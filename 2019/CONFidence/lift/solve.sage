import binascii

p = 35671
k = 100
# N = p^k

# P1.<x> = PolynomialRing(Zmod(p), implementation='NTL')

# pol1 = 12172655049735206766902704703038559858384636896299329359049381021748*x^4 + 11349632906292428218038992315252727065628405382223597973250830870345*x^3 + 9188725924715231519926481580171897766710554662167067944757835186451*x^2 + 8640134917502441100824547249422817926745071806483482930174015978801*x + 170423096151399242531943631075016082117474571389010646663163733960337669863762406085472678450206495375341400002076986312777537466715254543510453341546006440265217992449199424909061809647640636052570307868161063402607743165324091856116789213643943407874991700761651741114881108492638404942954408505222152223605412516092742190317989684590782541294253512675164049148557663016927886803673382663921583479090048005883115303905133335418178354255826423404513286728


# roots = pol1.roots(multiplicities=False)
# print(roots)

roots = [25020, 27020]
N = Qp(p,k)

P.<x> = PolynomialRing(N)

pol = 12172655049735206766902704703038559858384636896299329359049381021748*x^4 + 11349632906292428218038992315252727065628405382223597973250830870345*x^3 + 9188725924715231519926481580171897766710554662167067944757835186451*x^2 + 8640134917502441100824547249422817926745071806483482930174015978801*x + 170423096151399242531943631075016082117474571389010646663163733960337669863762406085472678450206495375341400002076986312777537466715254543510453341546006440265217992449199424909061809647640636052570307868161063402607743165324091856116789213643943407874991700761651741114881108492638404942954408505222152223605412516092742190317989684590782541294253512675164049148557663016927886803673382663921583479090048005883115303905133335418178354255826423404513286728

for candidate in roots:
    root = Integer(pol.hensel_lift(candidate))
    print(binascii.unhexlify(root.hex()))

# for i in range(2,101):
# 	P.<x> = PolynomialRing(Zmod(p^i), implementation='NTL')

# 	roots_copy = roots[:]
# 	for r in roots_copy:
# 		roots.remove(r)
# 		polPrime2 = polPrime.change_ring(P1)
# 		res = polPrime2(x=roots[0])
# 		if res == 0:
# 			print("f'(r) = 0 mod p!")
# 			exit()
# 		polPrime1 = polPrime.change_ring(P1)
# 		fr = pol1(x=r)
# 		fpr = polPrime1(x=r)
# 		temp = p^(i-1)
# 		t1 = int(fr)//int(temp)
# 		t2 = fpr
# 		t_pol = t1 + t2*x
# 		# t_pol = fpr*x + fr//(p^(i-1))
# 		t_pol = t_pol.change_ring(P1)
# 		if t_pol.degree() == 1:
# 			t = 0
# 		else:
# 			t = t_pol.roots(multiplicities=False)
# 		s = res + t*p
# 		roots.append(s)
# 		print(s)
# 		print(i)
		

# 	print(roots)
