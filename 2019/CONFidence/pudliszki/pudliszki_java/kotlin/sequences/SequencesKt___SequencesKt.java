package kotlin.sequences;

import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import kotlin.Metadata;
import kotlin.Pair;
import kotlin.SinceKotlin;
import kotlin.collections.CollectionsKt;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.functions.Function2;
import kotlin.jvm.internal.Intrinsics;
import kotlin.jvm.internal.Lambda;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@Metadata(mv={1, 1, 13}, bv={1, 0, 3}, k=5, xi=1, d1={"\000\002\n\000\n\002\020\013\n\000\n\002\030\002\n\000\n\002\030\002\n\002\b\002\n\002\020\034\n\002\b\002\n\002\020$\n\002\b\003\n\002\030\002\n\002\b\005\n\002\020%\n\002\b\b\n\002\020\006\n\002\020\005\n\002\b\002\n\002\020\007\n\000\n\002\020\b\n\000\n\002\020\t\n\000\n\002\020\n\n\002\b\002\n\002\020 \n\002\b\003\n\002\030\002\n\002\b\022\n\002\030\002\n\002\030\002\n\002\b\003\n\002\020\037\n\002\b\002\n\002\030\002\n\002\b\004\n\002\020\000\n\002\b\022\n\002\030\002\n\002\b\002\n\002\020\002\n\002\b\004\n\002\020!\n\000\n\002\030\002\n\002\b\006\n\002\030\002\n\002\030\002\n\002\b\002\n\002\020\r\n\002\b\006\n\002\020\016\n\002\b\f\n\002\020\017\n\002\b\006\n\002\030\002\n\002\030\002\n\002\b\007\n\002\020\021\n\002\b!\n\002\030\002\n\002\030\002\n\002\b\003\n\002\020#\n\000\n\002\020\"\n\002\b\004\n\002\030\002\n\002\b\006\032-\020\000\032\0020\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b\032\026\020\006\032\0020\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032-\020\006\032\0020\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b\032\034\020\007\032\b\022\004\022\002H\0020\b\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032\037\020\t\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\003H\b\032Q\020\n\032\016\022\004\022\002H\f\022\004\022\002H\r0\013\"\004\b\000\020\002\"\004\b\001\020\f\"\004\b\002\020\r*\b\022\004\022\002H\0020\0032\036\020\016\032\032\022\004\022\002H\002\022\020\022\016\022\004\022\002H\f\022\004\022\002H\r0\0170\005H\b\032?\020\020\032\016\022\004\022\002H\f\022\004\022\002H\0020\013\"\004\b\000\020\002\"\004\b\001\020\f*\b\022\004\022\002H\0020\0032\022\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\005H\b\032Y\020\020\032\016\022\004\022\002H\f\022\004\022\002H\r0\013\"\004\b\000\020\002\"\004\b\001\020\f\"\004\b\002\020\r*\b\022\004\022\002H\0020\0032\022\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\0052\022\020\022\032\016\022\004\022\002H\002\022\004\022\002H\r0\005H\b\032Z\020\023\032\002H\024\"\004\b\000\020\002\"\004\b\001\020\f\"\030\b\002\020\024*\022\022\006\b\000\022\002H\f\022\006\b\000\022\002H\0020\025*\b\022\004\022\002H\0020\0032\006\020\026\032\002H\0242\022\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\005H\b¢\006\002\020\027\032t\020\023\032\002H\024\"\004\b\000\020\002\"\004\b\001\020\f\"\004\b\002\020\r\"\030\b\003\020\024*\022\022\006\b\000\022\002H\f\022\006\b\000\022\002H\r0\025*\b\022\004\022\002H\0020\0032\006\020\026\032\002H\0242\022\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\0052\022\020\022\032\016\022\004\022\002H\002\022\004\022\002H\r0\005H\b¢\006\002\020\030\032l\020\031\032\002H\024\"\004\b\000\020\002\"\004\b\001\020\f\"\004\b\002\020\r\"\030\b\003\020\024*\022\022\006\b\000\022\002H\f\022\006\b\000\022\002H\r0\025*\b\022\004\022\002H\0020\0032\006\020\026\032\002H\0242\036\020\016\032\032\022\004\022\002H\002\022\020\022\016\022\004\022\002H\f\022\004\022\002H\r0\0170\005H\b¢\006\002\020\027\032?\020\032\032\016\022\004\022\002H\f\022\004\022\002H\r0\013\"\004\b\000\020\f\"\004\b\001\020\r*\b\022\004\022\002H\f0\0032\022\020\033\032\016\022\004\022\002H\f\022\004\022\002H\r0\005H\b\032Z\020\034\032\002H\024\"\004\b\000\020\f\"\004\b\001\020\r\"\030\b\002\020\024*\022\022\006\b\000\022\002H\f\022\006\b\000\022\002H\r0\025*\b\022\004\022\002H\f0\0032\006\020\026\032\002H\0242\022\020\033\032\016\022\004\022\002H\f\022\004\022\002H\r0\005H\b¢\006\002\020\027\032\027\020\035\032\0020\036*\b\022\004\022\0020\0370\003H\007¢\006\002\b \032\027\020\035\032\0020\036*\b\022\004\022\0020\0360\003H\007¢\006\002\b!\032\027\020\035\032\0020\036*\b\022\004\022\0020\"0\003H\007¢\006\002\b#\032\027\020\035\032\0020\036*\b\022\004\022\0020$0\003H\007¢\006\002\b%\032\027\020\035\032\0020\036*\b\022\004\022\0020&0\003H\007¢\006\002\b'\032\027\020\035\032\0020\036*\b\022\004\022\0020(0\003H\007¢\006\002\b)\032,\020*\032\016\022\n\022\b\022\004\022\002H\0020+0\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\020,\032\0020$H\007\032F\020*\032\b\022\004\022\002H-0\003\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032\006\020,\032\0020$2\030\020\016\032\024\022\n\022\b\022\004\022\002H\0020+\022\004\022\002H-0\005H\007\032+\020.\032\0020\001\"\t\b\000\020\002¢\006\002\b/*\b\022\004\022\002H\0020\0032\006\0200\032\002H\002H\002¢\006\002\0201\032\026\0202\032\0020$\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032-\0202\032\0020$\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b\032\034\0203\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\0326\0204\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002\"\004\b\001\020\f*\b\022\004\022\002H\0020\0032\022\0205\032\016\022\004\022\002H\002\022\004\022\002H\f0\005\032$\0206\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\0207\032\0020$\0320\0208\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005\032#\0209\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\020:\032\0020$¢\006\002\020;\0327\020<\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\020:\032\0020$2\022\020=\032\016\022\004\022\0020$\022\004\022\002H\0020\005¢\006\002\020>\032%\020?\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\020:\032\0020$¢\006\002\020;\0320\020@\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005\032E\020A\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032'\020\004\032#\022\023\022\0210$¢\006\f\bC\022\b\bD\022\004\b\b(:\022\004\022\002H\002\022\004\022\0020\0010B\032a\020E\032\002HF\"\004\b\000\020\002\"\020\b\001\020F*\n\022\006\b\000\022\002H\0020G*\b\022\004\022\002H\0020\0032\006\020\026\032\002HF2'\020\004\032#\022\023\022\0210$¢\006\f\bC\022\b\bD\022\004\b\b(:\022\004\022\002H\002\022\004\022\0020\0010BH\b¢\006\002\020H\032$\020I\032\r\022\t\022\007H-¢\006\002\bJ0\003\"\006\b\000\020-\030\001*\006\022\002\b\0030\003H\b\0328\020K\032\002HF\"\006\b\000\020-\030\001\"\020\b\001\020F*\n\022\006\b\000\022\002H-0G*\006\022\002\b\0030\0032\006\020\026\032\002HFH\b¢\006\002\020L\0320\020M\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005\032\"\020N\032\b\022\004\022\002H\0020\003\"\b\b\000\020\002*\0020O*\n\022\006\022\004\030\001H\0020\003\032;\020P\032\002HF\"\020\b\000\020F*\n\022\006\b\000\022\002H\0020G\"\b\b\001\020\002*\0020O*\n\022\006\022\004\030\001H\0020\0032\006\020\026\032\002HF¢\006\002\020L\032L\020Q\032\002HF\"\004\b\000\020\002\"\020\b\001\020F*\n\022\006\b\000\022\002H\0020G*\b\022\004\022\002H\0020\0032\006\020\026\032\002HF2\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b¢\006\002\020R\032L\020S\032\002HF\"\004\b\000\020\002\"\020\b\001\020F*\n\022\006\b\000\022\002H\0020G*\b\022\004\022\002H\0020\0032\006\020\026\032\002HF2\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b¢\006\002\020R\0324\020T\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b¢\006\002\020U\0324\020V\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b¢\006\002\020U\032\033\020W\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\003¢\006\002\020X\0322\020W\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b¢\006\002\020U\032\035\020Y\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\003¢\006\002\020X\0324\020Y\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b¢\006\002\020U\032<\020Z\032\b\022\004\022\002H-0\003\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032\030\020\016\032\024\022\004\022\002H\002\022\n\022\b\022\004\022\002H-0\0030\005\032X\020[\032\002HF\"\004\b\000\020\002\"\004\b\001\020-\"\020\b\002\020F*\n\022\006\b\000\022\002H-0G*\b\022\004\022\002H\0020\0032\006\020\026\032\002HF2\030\020\016\032\024\022\004\022\002H\002\022\n\022\b\022\004\022\002H-0\0030\005H\b¢\006\002\020R\032U\020\\\032\002H-\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032\006\020]\032\002H-2'\020^\032#\022\023\022\021H-¢\006\f\bC\022\b\bD\022\004\b\b(_\022\004\022\002H\002\022\004\022\002H-0BH\b¢\006\002\020`\032j\020a\032\002H-\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032\006\020]\032\002H-2<\020^\0328\022\023\022\0210$¢\006\f\bC\022\b\bD\022\004\b\b(:\022\023\022\021H-¢\006\f\bC\022\b\bD\022\004\b\b(_\022\004\022\002H\002\022\004\022\002H-0bH\b¢\006\002\020c\032-\020d\032\0020e\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020f\032\016\022\004\022\002H\002\022\004\022\0020e0\005H\b\032B\020g\032\0020e\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032'\020f\032#\022\023\022\0210$¢\006\f\bC\022\b\bD\022\004\b\b(:\022\004\022\002H\002\022\004\022\0020e0BH\b\032E\020h\032\024\022\004\022\002H\f\022\n\022\b\022\004\022\002H\0020+0\013\"\004\b\000\020\002\"\004\b\001\020\f*\b\022\004\022\002H\0020\0032\022\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\005H\b\032_\020h\032\024\022\004\022\002H\f\022\n\022\b\022\004\022\002H\r0+0\013\"\004\b\000\020\002\"\004\b\001\020\f\"\004\b\002\020\r*\b\022\004\022\002H\0020\0032\022\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\0052\022\020\022\032\016\022\004\022\002H\002\022\004\022\002H\r0\005H\b\032^\020i\032\002H\024\"\004\b\000\020\002\"\004\b\001\020\f\"\034\b\002\020\024*\026\022\006\b\000\022\002H\f\022\n\022\b\022\004\022\002H\0020j0\025*\b\022\004\022\002H\0020\0032\006\020\026\032\002H\0242\022\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\005H\b¢\006\002\020\027\032x\020i\032\002H\024\"\004\b\000\020\002\"\004\b\001\020\f\"\004\b\002\020\r\"\034\b\003\020\024*\026\022\006\b\000\022\002H\f\022\n\022\b\022\004\022\002H\r0j0\025*\b\022\004\022\002H\0020\0032\006\020\026\032\002H\0242\022\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\0052\022\020\022\032\016\022\004\022\002H\002\022\004\022\002H\r0\005H\b¢\006\002\020\030\032A\020k\032\016\022\004\022\002H\002\022\004\022\002H\f0l\"\004\b\000\020\002\"\004\b\001\020\f*\b\022\004\022\002H\0020\0032\024\b\004\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\005H\b\032(\020m\032\0020$\"\t\b\000\020\002¢\006\002\b/*\b\022\004\022\002H\0020\0032\006\0200\032\002H\002¢\006\002\020n\032-\020o\032\0020$\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b\032-\020p\032\0020$\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b\032{\020q\032\002Hr\"\004\b\000\020\002\"\f\b\001\020r*\0060sj\002`t*\b\022\004\022\002H\0020\0032\006\020u\032\002Hr2\b\b\002\020v\032\0020w2\b\b\002\020x\032\0020w2\b\b\002\020y\032\0020w2\b\b\002\020z\032\0020$2\b\b\002\020{\032\0020w2\026\b\002\020\016\032\020\022\004\022\002H\002\022\004\022\0020w\030\0010\005¢\006\002\020|\032`\020}\032\0020~\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\b\b\002\020v\032\0020w2\b\b\002\020x\032\0020w2\b\b\002\020y\032\0020w2\b\b\002\020z\032\0020$2\b\b\002\020{\032\0020w2\026\b\002\020\016\032\020\022\004\022\002H\002\022\004\022\0020w\030\0010\005\032\033\020\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\003¢\006\002\020X\0322\020\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b¢\006\002\020U\032)\020\001\032\0020$\"\t\b\000\020\002¢\006\002\b/*\b\022\004\022\002H\0020\0032\006\0200\032\002H\002¢\006\002\020n\032\036\020\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\003¢\006\002\020X\0325\020\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b¢\006\002\020U\0327\020\001\032\b\022\004\022\002H-0\003\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032\022\020\016\032\016\022\004\022\002H\002\022\004\022\002H-0\005\032L\020\001\032\b\022\004\022\002H-0\003\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032'\020\016\032#\022\023\022\0210$¢\006\f\bC\022\b\bD\022\004\b\b(:\022\004\022\002H\002\022\004\022\002H-0B\032R\020\001\032\b\022\004\022\002H-0\003\"\004\b\000\020\002\"\b\b\001\020-*\0020O*\b\022\004\022\002H\0020\0032)\020\016\032%\022\023\022\0210$¢\006\f\bC\022\b\bD\022\004\b\b(:\022\004\022\002H\002\022\006\022\004\030\001H-0B\032n\020\001\032\002HF\"\004\b\000\020\002\"\b\b\001\020-*\0020O\"\020\b\002\020F*\n\022\006\b\000\022\002H-0G*\b\022\004\022\002H\0020\0032\006\020\026\032\002HF2)\020\016\032%\022\023\022\0210$¢\006\f\bC\022\b\bD\022\004\b\b(:\022\004\022\002H\002\022\006\022\004\030\001H-0BH\b¢\006\002\020H\032h\020\001\032\002HF\"\004\b\000\020\002\"\004\b\001\020-\"\020\b\002\020F*\n\022\006\b\000\022\002H-0G*\b\022\004\022\002H\0020\0032\006\020\026\032\002HF2'\020\016\032#\022\023\022\0210$¢\006\f\bC\022\b\bD\022\004\b\b(:\022\004\022\002H\002\022\004\022\002H-0BH\b¢\006\002\020H\032=\020\001\032\b\022\004\022\002H-0\003\"\004\b\000\020\002\"\b\b\001\020-*\0020O*\b\022\004\022\002H\0020\0032\024\020\016\032\020\022\004\022\002H\002\022\006\022\004\030\001H-0\005\032Y\020\001\032\002HF\"\004\b\000\020\002\"\b\b\001\020-*\0020O\"\020\b\002\020F*\n\022\006\b\000\022\002H-0G*\b\022\004\022\002H\0020\0032\006\020\026\032\002HF2\024\020\016\032\020\022\004\022\002H\002\022\006\022\004\030\001H-0\005H\b¢\006\002\020R\032S\020\001\032\002HF\"\004\b\000\020\002\"\004\b\001\020-\"\020\b\002\020F*\n\022\006\b\000\022\002H-0G*\b\022\004\022\002H\0020\0032\006\020\026\032\002HF2\022\020\016\032\016\022\004\022\002H\002\022\004\022\002H-0\005H\b¢\006\002\020R\032*\020\001\032\004\030\001H\002\"\017\b\000\020\002*\t\022\004\022\002H\0020\001*\b\022\004\022\002H\0020\003¢\006\003\020\001\032\033\020\001\032\004\030\0010\036*\b\022\004\022\0020\0360\003H\007¢\006\003\020\001\032\033\020\001\032\004\030\0010\"*\b\022\004\022\0020\"0\003H\007¢\006\003\020\001\032F\020\001\032\004\030\001H\002\"\004\b\000\020\002\"\017\b\001\020-*\t\022\004\022\002H-0\001*\b\022\004\022\002H\0020\0032\022\0205\032\016\022\004\022\002H\002\022\004\022\002H-0\005H\b¢\006\002\020U\032>\020\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\035\020\001\032\030\022\006\b\000\022\002H\0020\001j\013\022\006\b\000\022\002H\002`\001¢\006\003\020\001\032*\020\001\032\004\030\001H\002\"\017\b\000\020\002*\t\022\004\022\002H\0020\001*\b\022\004\022\002H\0020\003¢\006\003\020\001\032\033\020\001\032\004\030\0010\036*\b\022\004\022\0020\0360\003H\007¢\006\003\020\001\032\033\020\001\032\004\030\0010\"*\b\022\004\022\0020\"0\003H\007¢\006\003\020\001\032F\020\001\032\004\030\001H\002\"\004\b\000\020\002\"\017\b\001\020-*\t\022\004\022\002H-0\001*\b\022\004\022\002H\0020\0032\022\0205\032\016\022\004\022\002H\002\022\004\022\002H-0\005H\b¢\006\002\020U\032>\020\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\035\020\001\032\030\022\006\b\000\022\002H\0020\001j\013\022\006\b\000\022\002H\002`\001¢\006\003\020\001\032.\020\001\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\0200\032\002H\002H\002¢\006\003\020\001\0328\020\001\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\020\020\001\032\013\022\006\b\001\022\002H\0020\001H\002¢\006\003\020\001\032/\020\001\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\r\020\001\032\b\022\004\022\002H\0020\bH\002\032/\020\001\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\r\020\001\032\b\022\004\022\002H\0020\003H\002\032.\020\001\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\0200\032\002H\002H\b¢\006\003\020\001\032\027\020\001\032\0020\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032.\020\001\032\0020\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b\0323\020\001\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020f\032\016\022\004\022\002H\002\022\004\022\0020e0\005H\007\032F\020 \001\032\032\022\n\022\b\022\004\022\002H\0020+\022\n\022\b\022\004\022\002H\0020+0\017\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b\032.\020¡\001\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\0200\032\002H\002H\002¢\006\003\020\001\0328\020¡\001\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\020\020\001\032\013\022\006\b\001\022\002H\0020\001H\002¢\006\003\020\001\032/\020¡\001\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\r\020\001\032\b\022\004\022\002H\0020\bH\002\032/\020¡\001\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\r\020\001\032\b\022\004\022\002H\0020\003H\002\032.\020¢\001\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\0200\032\002H\002H\b¢\006\003\020\001\032X\020£\001\032\003H¤\001\"\005\b\000\020¤\001\"\t\b\001\020\002*\003H¤\001*\b\022\004\022\002H\0020\0032)\020^\032%\022\024\022\022H¤\001¢\006\f\bC\022\b\bD\022\004\b\b(_\022\004\022\002H\002\022\005\022\003H¤\0010BH\b¢\006\003\020¥\001\032m\020¦\001\032\003H¤\001\"\005\b\000\020¤\001\"\t\b\001\020\002*\003H¤\001*\b\022\004\022\002H\0020\0032>\020^\032:\022\023\022\0210$¢\006\f\bC\022\b\bD\022\004\b\b(:\022\024\022\022H¤\001¢\006\f\bC\022\b\bD\022\004\b\b(_\022\004\022\002H\002\022\005\022\003H¤\0010bH\b¢\006\003\020§\001\032#\020¨\001\032\b\022\004\022\002H\0020\003\"\b\b\000\020\002*\0020O*\n\022\006\022\004\030\001H\0020\003\032\034\020©\001\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\003¢\006\002\020X\0323\020©\001\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b¢\006\002\020U\032\036\020ª\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\003¢\006\002\020X\0325\020ª\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H\b¢\006\002\020U\032(\020«\001\032\b\022\004\022\002H\0020\003\"\017\b\000\020\002*\t\022\004\022\002H\0020\001*\b\022\004\022\002H\0020\003\032I\020¬\001\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002\"\017\b\001\020-*\t\022\004\022\002H-0\001*\b\022\004\022\002H\0020\0032\026\b\004\0205\032\020\022\004\022\002H\002\022\006\022\004\030\001H-0\005H\b\032I\020­\001\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002\"\017\b\001\020-*\t\022\004\022\002H-0\001*\b\022\004\022\002H\0020\0032\026\b\004\0205\032\020\022\004\022\002H\002\022\006\022\004\030\001H-0\005H\b\032(\020®\001\032\b\022\004\022\002H\0020\003\"\017\b\000\020\002*\t\022\004\022\002H\0020\001*\b\022\004\022\002H\0020\003\032<\020¯\001\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\035\020\001\032\030\022\006\b\000\022\002H\0020\001j\013\022\006\b\000\022\002H\002`\001\032\031\020°\001\032\0020$*\b\022\004\022\0020\0370\003H\007¢\006\003\b±\001\032\031\020°\001\032\0020\036*\b\022\004\022\0020\0360\003H\007¢\006\003\b²\001\032\031\020°\001\032\0020\"*\b\022\004\022\0020\"0\003H\007¢\006\003\b³\001\032\031\020°\001\032\0020$*\b\022\004\022\0020$0\003H\007¢\006\003\b´\001\032\031\020°\001\032\0020&*\b\022\004\022\0020&0\003H\007¢\006\003\bµ\001\032\031\020°\001\032\0020$*\b\022\004\022\0020(0\003H\007¢\006\003\b¶\001\032.\020·\001\032\0020$\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\0205\032\016\022\004\022\002H\002\022\004\022\0020$0\005H\b\032.\020¸\001\032\0020\036\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\0205\032\016\022\004\022\002H\002\022\004\022\0020\0360\005H\b\032%\020¹\001\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\0207\032\0020$\0321\020º\001\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005\0326\020»\001\032\002HF\"\004\b\000\020\002\"\020\b\001\020F*\n\022\006\b\000\022\002H\0020G*\b\022\004\022\002H\0020\0032\006\020\026\032\002HF¢\006\002\020L\032)\020¼\001\032\024\022\004\022\002H\0020½\001j\t\022\004\022\002H\002`¾\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032\035\020¿\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032\035\020À\001\032\b\022\004\022\002H\0020j\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032\036\020Á\001\032\t\022\004\022\002H\0020Â\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032\036\020Ã\001\032\t\022\004\022\002H\0020Ä\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032C\020Å\001\032\016\022\n\022\b\022\004\022\002H\0020+0\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\020,\032\0020$2\t\b\002\020Æ\001\032\0020$2\t\b\002\020Ç\001\032\0020\001H\007\032]\020Å\001\032\b\022\004\022\002H-0\003\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032\006\020,\032\0020$2\t\b\002\020Æ\001\032\0020$2\t\b\002\020Ç\001\032\0020\0012\030\020\016\032\024\022\n\022\b\022\004\022\002H\0020+\022\004\022\002H-0\005H\007\032$\020È\001\032\017\022\013\022\t\022\004\022\002H\0020É\0010\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032A\020Ê\001\032\024\022\020\022\016\022\004\022\002H\002\022\004\022\002H-0\0170\003\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032\r\020Ë\001\032\b\022\004\022\002H-0\003H\004\032r\020Ê\001\032\b\022\004\022\002H\r0\003\"\004\b\000\020\002\"\004\b\001\020-\"\004\b\002\020\r*\b\022\004\022\002H\0020\0032\r\020Ë\001\032\b\022\004\022\002H-0\00328\020\016\0324\022\024\022\022H\002¢\006\r\bC\022\t\bD\022\005\b\b(Ì\001\022\024\022\022H-¢\006\r\bC\022\t\bD\022\005\b\b(Í\001\022\004\022\002H\r0B\032+\020Î\001\032\024\022\020\022\016\022\004\022\002H\002\022\004\022\002H\0020\0170\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\003H\007\032_\020Î\001\032\b\022\004\022\002H-0\003\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\00328\020\016\0324\022\024\022\022H\002¢\006\r\bC\022\t\bD\022\005\b\b(Ì\001\022\024\022\022H\002¢\006\r\bC\022\t\bD\022\005\b\b(Í\001\022\004\022\002H-0BH\007¨\006Ï\001"}, d2={"all", "", "T", "Lkotlin/sequences/Sequence;", "predicate", "Lkotlin/Function1;", "any", "asIterable", "", "asSequence", "associate", "", "K", "V", "transform", "Lkotlin/Pair;", "associateBy", "keySelector", "valueTransform", "associateByTo", "M", "", "destination", "(Lkotlin/sequences/Sequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "(Lkotlin/sequences/Sequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "associateTo", "associateWith", "valueSelector", "associateWithTo", "average", "", "", "averageOfByte", "averageOfDouble", "", "averageOfFloat", "", "averageOfInt", "", "averageOfLong", "", "averageOfShort", "chunked", "", "size", "R", "contains", "Lkotlin/internal/OnlyInputTypes;", "element", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;)Z", "count", "distinct", "distinctBy", "selector", "drop", "n", "dropWhile", "elementAt", "index", "(Lkotlin/sequences/Sequence;I)Ljava/lang/Object;", "elementAtOrElse", "defaultValue", "(Lkotlin/sequences/Sequence;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "elementAtOrNull", "filter", "filterIndexed", "Lkotlin/Function2;", "Lkotlin/ParameterName;", "name", "filterIndexedTo", "C", "", "(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "filterIsInstance", "Lkotlin/internal/NoInfer;", "filterIsInstanceTo", "(Lkotlin/sequences/Sequence;Ljava/util/Collection;)Ljava/util/Collection;", "filterNot", "filterNotNull", "", "filterNotNullTo", "filterNotTo", "(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "filterTo", "find", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "findLast", "first", "(Lkotlin/sequences/Sequence;)Ljava/lang/Object;", "firstOrNull", "flatMap", "flatMapTo", "fold", "initial", "operation", "acc", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "foldIndexed", "Lkotlin/Function3;", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "forEach", "", "action", "forEachIndexed", "groupBy", "groupByTo", "", "groupingBy", "Lkotlin/collections/Grouping;", "indexOf", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;)I", "indexOfFirst", "indexOfLast", "joinTo", "A", "Ljava/lang/Appendable;", "Lkotlin/text/Appendable;", "buffer", "separator", "", "prefix", "postfix", "limit", "truncated", "(Lkotlin/sequences/Sequence;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "joinToString", "", "last", "lastIndexOf", "lastOrNull", "map", "mapIndexed", "mapIndexedNotNull", "mapIndexedNotNullTo", "mapIndexedTo", "mapNotNull", "mapNotNullTo", "mapTo", "max", "", "(Lkotlin/sequences/Sequence;)Ljava/lang/Comparable;", "(Lkotlin/sequences/Sequence;)Ljava/lang/Double;", "(Lkotlin/sequences/Sequence;)Ljava/lang/Float;", "maxBy", "maxWith", "comparator", "Ljava/util/Comparator;", "Lkotlin/Comparator;", "(Lkotlin/sequences/Sequence;Ljava/util/Comparator;)Ljava/lang/Object;", "min", "minBy", "minWith", "minus", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;)Lkotlin/sequences/Sequence;", "elements", "", "(Lkotlin/sequences/Sequence;[Ljava/lang/Object;)Lkotlin/sequences/Sequence;", "minusElement", "none", "onEach", "partition", "plus", "plusElement", "reduce", "S", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceIndexed", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "requireNoNulls", "single", "singleOrNull", "sorted", "sortedBy", "sortedByDescending", "sortedDescending", "sortedWith", "sum", "sumOfByte", "sumOfDouble", "sumOfFloat", "sumOfInt", "sumOfLong", "sumOfShort", "sumBy", "sumByDouble", "take", "takeWhile", "toCollection", "toHashSet", "Ljava/util/HashSet;", "Lkotlin/collections/HashSet;", "toList", "toMutableList", "toMutableSet", "", "toSet", "", "windowed", "step", "partialWindows", "withIndex", "Lkotlin/collections/IndexedValue;", "zip", "other", "a", "b", "zipWithNext", "kotlin-stdlib"}, xs="kotlin/sequences/SequencesKt")
class SequencesKt___SequencesKt extends SequencesKt___SequencesJvmKt
{
  public static final <T> boolean contains(@NotNull Sequence<? extends T> $receiver, T element)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");return SequencesKt.indexOf($receiver, element) >= 0;
  }
  






  public static final <T> T elementAt(@NotNull Sequence<? extends T> $receiver, int index)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");SequencesKt.elementAtOrElse($receiver, index, (Function1)new Lambda(index) { @NotNull
      public final Void invoke(int it) { throw ((Throwable)new IndexOutOfBoundsException("Sequence doesn't contain element at index " + $index + '.')); }
    });
  }
  





  public static final <T> T elementAtOrElse(@NotNull Sequence<? extends T> $receiver, int index, @NotNull Function1<? super Integer, ? extends T> defaultValue)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(defaultValue, "defaultValue"); if (index < 0)
      return defaultValue.invoke(Integer.valueOf(index));
    Iterator iterator = $receiver.iterator();
    int count = 0;
    while (iterator.hasNext()) {
      Object element = iterator.next();
      if (index == count++)
        return element;
    }
    return defaultValue.invoke(Integer.valueOf(index));
  }
  





  @Nullable
  public static final <T> T elementAtOrNull(@NotNull Sequence<? extends T> $receiver, int index)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0"); if (index < 0)
      return null;
    Iterator iterator = $receiver.iterator();
    int count = 0;
    while (iterator.hasNext()) {
      Object element = iterator.next();
      if (index == count++)
        return element;
    }
    return null;
  }
  

























  public static final <T> T first(@NotNull Sequence<? extends T> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Iterator iterator = $receiver.iterator();
    if (!iterator.hasNext())
      throw ((Throwable)new java.util.NoSuchElementException("Sequence is empty."));
    return iterator.next();
  }
  














  @Nullable
  public static final <T> T firstOrNull(@NotNull Sequence<? extends T> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Iterator iterator = $receiver.iterator();
    if (!iterator.hasNext())
      return null;
    return iterator.next();
  }
  














  public static final <T> int indexOf(@NotNull Sequence<? extends T> $receiver, T element)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");int index = 0;
    for (Object item : $receiver) {
      if (index < 0) CollectionsKt.throwIndexOverflow();
      if (Intrinsics.areEqual(element, item))
        return index;
      index++;
    }
    return -1;
  }
  


  public static final <T> int indexOfFirst(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Boolean> predicate)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");int index = 0;
    for (Object item : $receiver) {
      if (index < 0) if (kotlin.internal.PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) CollectionsKt.throwIndexOverflow(); else throw ((Throwable)new ArithmeticException("Index overflow has happened."));
      if (((Boolean)predicate.invoke(item)).booleanValue())
        return index;
      index++;
    }
    return -1;
  }
  


  public static final <T> int indexOfLast(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Boolean> predicate)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");int lastIndex = -1;
    int index = 0;
    for (Object item : $receiver) {
      if (index < 0) if (kotlin.internal.PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) CollectionsKt.throwIndexOverflow(); else throw ((Throwable)new ArithmeticException("Index overflow has happened."));
      if (((Boolean)predicate.invoke(item)).booleanValue())
        lastIndex = index;
      index++;
    }
    return lastIndex;
  }
  





  public static final <T> T last(@NotNull Sequence<? extends T> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Iterator iterator = $receiver.iterator();
    if (!iterator.hasNext())
      throw ((Throwable)new java.util.NoSuchElementException("Sequence is empty."));
    Object last = iterator.next();
    while (iterator.hasNext())
      last = iterator.next();
    return last;
  }
  


  public static final <T> T last(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Boolean> predicate)
  {
    ;
    

    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");Object last = null;
    boolean found = false;
    for (Object element : $receiver) {
      if (((Boolean)predicate.invoke(element)).booleanValue()) {
        last = element;
        found = true;
      }
    }
    if (!found) { throw ((Throwable)new java.util.NoSuchElementException("Sequence contains no element matching the predicate."));
    }
    return last;
  }
  




  public static final <T> int lastIndexOf(@NotNull Sequence<? extends T> $receiver, T element)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");int lastIndex = -1;
    int index = 0;
    for (Object item : $receiver) {
      if (index < 0) CollectionsKt.throwIndexOverflow();
      if (Intrinsics.areEqual(element, item))
        lastIndex = index;
      index++;
    }
    return lastIndex;
  }
  



  @Nullable
  public static final <T> T lastOrNull(@NotNull Sequence<? extends T> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Iterator iterator = $receiver.iterator();
    if (!iterator.hasNext())
      return null;
    Object last = iterator.next();
    while (iterator.hasNext())
      last = iterator.next();
    return last;
  }
  

  @Nullable
  public static final <T> T lastOrNull(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Boolean> predicate)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");Object last = null;
    for (Object element : $receiver) {
      if (((Boolean)predicate.invoke(element)).booleanValue()) {
        last = element;
      }
    }
    return last;
  }
  




  public static final <T> T single(@NotNull Sequence<? extends T> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Iterator iterator = $receiver.iterator();
    if (!iterator.hasNext())
      throw ((Throwable)new java.util.NoSuchElementException("Sequence is empty."));
    Object single = iterator.next();
    if (iterator.hasNext())
      throw ((Throwable)new IllegalArgumentException("Sequence has more than one element."));
    return single;
  }
  


  public static final <T> T single(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Boolean> predicate)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");Object single = null;
    boolean found = false;
    for (Object element : $receiver) {
      if (((Boolean)predicate.invoke(element)).booleanValue()) {
        if (found) throw ((Throwable)new IllegalArgumentException("Sequence contains more than one matching element."));
        single = element;
        found = true;
      }
    }
    if (!found) { throw ((Throwable)new java.util.NoSuchElementException("Sequence contains no element matching the predicate."));
    }
    return single;
  }
  



  @Nullable
  public static final <T> T singleOrNull(@NotNull Sequence<? extends T> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Iterator iterator = $receiver.iterator();
    if (!iterator.hasNext())
      return null;
    Object single = iterator.next();
    if (iterator.hasNext())
      return null;
    return single;
  }
  

  @Nullable
  public static final <T> T singleOrNull(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Boolean> predicate)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");Object single = null;
    boolean found = false;
    for (Object element : $receiver) {
      if (((Boolean)predicate.invoke(element)).booleanValue()) {
        if (found) return null;
        single = element;
        found = true;
      }
    }
    if (!found) return null;
    return single;
  }
  





  @NotNull
  public static final <T> Sequence<T> drop(@NotNull Sequence<? extends T> $receiver, int n)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");int i = n >= 0 ? 1 : 0; if (i == 0) { int $i$a$1$require; String str = "Requested element count " + n + " is less than zero.";throw ((Throwable)new IllegalArgumentException(str.toString())); }
    return 
    
      ($receiver instanceof DropTakeSequence) ? ((DropTakeSequence)$receiver).drop(n) : n == 0 ? $receiver : 
      (Sequence)new DropSequence($receiver, n);
  }
  






  @NotNull
  public static final <T> Sequence<T> dropWhile(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Boolean> predicate)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");return (Sequence)new DropWhileSequence($receiver, predicate);
  }
  



  @NotNull
  public static final <T> Sequence<T> filter(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Boolean> predicate)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");return (Sequence)new FilteringSequence($receiver, true, predicate);
  }
  






  @NotNull
  public static final <T> Sequence<T> filterIndexed(@NotNull Sequence<? extends T> $receiver, @NotNull Function2<? super Integer, ? super T, Boolean> predicate)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");(Sequence)new TransformingSequence((Sequence)new FilteringSequence((Sequence)new IndexingSequence($receiver), true, (Function1)new Lambda(predicate) { public final boolean invoke(@NotNull kotlin.collections.IndexedValue<? extends T> it) { Intrinsics.checkParameterIsNotNull(it, "it");return ((Boolean)$predicate.invoke(Integer.valueOf(it.getIndex()), it.getValue())).booleanValue(); } }), (Function1)filterIndexed.2.INSTANCE);
  }
  


  @NotNull
  public static final <T, C extends Collection<? super T>> C filterIndexedTo(@NotNull Sequence<? extends T> $receiver, @NotNull C destination, @NotNull Function2<? super Integer, ? super T, Boolean> predicate)
  {
    ;
    

    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(destination, "destination");Intrinsics.checkParameterIsNotNull(predicate, "predicate");Sequence $receiver$iv = $receiver;
    

































































































































































































































































































































































































































































































































































































































































































































































































    int $i$f$forEachIndexed;
    
































































































































































































































































































































































































































































































































































































































































































































































































    int index$iv = 0;
    for (Object item$iv : $receiver$iv) { int i = index$iv++; if (i < 0) if (kotlin.internal.PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) CollectionsKt.throwIndexOverflow(); else throw ((Throwable)new ArithmeticException("Index overflow has happened.")); int j = i;Object localObject1 = item$iv;int index = j;
      int $i$a$1$forEachIndexed;
      Object element;
      if (((Boolean)predicate.invoke(Integer.valueOf(index), element)).booleanValue()) destination.add(element);
    }
    return destination;
  }
  


  private static final <R> Sequence<R> filterIsInstance(@NotNull Sequence<?> $receiver)
  {
    ;
    

    Intrinsics.needClassReification(); Sequence tmp13_10 = SequencesKt.filter($receiver, (Function1)filterIsInstance.1.INSTANCE); if (tmp13_10 == null) throw new kotlin.TypeCastException("null cannot be cast to non-null type kotlin.sequences.Sequence<R>"); return tmp13_10;
  }
  


  private static final <R, C extends Collection<? super R>> C filterIsInstanceTo(@NotNull Sequence<?> $receiver, C destination)
  {
    ;
    
    for (Object element : $receiver) { Intrinsics.reifiedOperationMarker(3, "R"); if ((element instanceof Object)) destination.add(element); }
    return destination;
  }
  



  @NotNull
  public static final <T> Sequence<T> filterNot(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Boolean> predicate)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");return (Sequence)new FilteringSequence($receiver, false, predicate);
  }
  




  @NotNull
  public static final <T> Sequence<T> filterNotNull(@NotNull Sequence<? extends T> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0"); Sequence tmp16_13 = SequencesKt.filterNot($receiver, (Function1)filterNotNull.1.INSTANCE); if (tmp16_13 == null) throw new kotlin.TypeCastException("null cannot be cast to non-null type kotlin.sequences.Sequence<T>"); return tmp16_13;
  }
  



  @NotNull
  public static final <C extends Collection<? super T>, T> C filterNotNullTo(@NotNull Sequence<? extends T> $receiver, @NotNull C destination)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(destination, "destination"); for (Object element : $receiver) if (element != null) destination.add(element);
    return destination;
  }
  

  @NotNull
  public static final <T, C extends Collection<? super T>> C filterNotTo(@NotNull Sequence<? extends T> $receiver, @NotNull C destination, @NotNull Function1<? super T, Boolean> predicate)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(destination, "destination");Intrinsics.checkParameterIsNotNull(predicate, "predicate"); for (Object element : $receiver) if (!((Boolean)predicate.invoke(element)).booleanValue()) destination.add(element);
    return destination;
  }
  

  @NotNull
  public static final <T, C extends Collection<? super T>> C filterTo(@NotNull Sequence<? extends T> $receiver, @NotNull C destination, @NotNull Function1<? super T, Boolean> predicate)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(destination, "destination");Intrinsics.checkParameterIsNotNull(predicate, "predicate"); for (Object element : $receiver) if (((Boolean)predicate.invoke(element)).booleanValue()) destination.add(element);
    return destination;
  }
  





  @NotNull
  public static final <T> Sequence<T> take(@NotNull Sequence<? extends T> $receiver, int n)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");int i = n >= 0 ? 1 : 0; if (i == 0) { int $i$a$1$require; String str = "Requested element count " + n + " is less than zero.";throw ((Throwable)new IllegalArgumentException(str.toString())); }
    return 
    
      ($receiver instanceof DropTakeSequence) ? ((DropTakeSequence)$receiver).take(n) : n == 0 ? SequencesKt.emptySequence() : 
      (Sequence)new TakeSequence($receiver, n);
  }
  






  @NotNull
  public static final <T> Sequence<T> takeWhile(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Boolean> predicate)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");return (Sequence)new TakeWhileSequence($receiver, predicate);
  }
  





  @NotNull
  public static final <T extends Comparable<? super T>> Sequence<T> sorted(@NotNull Sequence<? extends T> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");(Sequence)new Sequence() {
      @NotNull
      public Iterator<T> iterator() { List sortedList = SequencesKt.toMutableList($this_sorted);
        CollectionsKt.sort(sortedList);
        return sortedList.iterator();
      }
    };
  }
  


  @NotNull
  public static final <T, R extends Comparable<? super R>> Sequence<T> sortedBy(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, ? extends R> selector)
  {
    ;
    

    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(selector, "selector");Sequence localSequence = $receiver;Comparator localComparator = (Comparator)new kotlin.comparisons.ComparisonsKt__ComparisonsKt.compareBy.2(selector);return SequencesKt.sortedWith(localSequence, localComparator);
  }
  


  @NotNull
  public static final <T, R extends Comparable<? super R>> Sequence<T> sortedByDescending(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, ? extends R> selector)
  {
    ;
    

    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(selector, "selector");Sequence localSequence = $receiver;Comparator localComparator = (Comparator)new kotlin.comparisons.ComparisonsKt__ComparisonsKt.compareByDescending.1(selector);return SequencesKt.sortedWith(localSequence, localComparator);
  }
  





  @NotNull
  public static final <T extends Comparable<? super T>> Sequence<T> sortedDescending(@NotNull Sequence<? extends T> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");return SequencesKt.sortedWith($receiver, kotlin.comparisons.ComparisonsKt.reverseOrder());
  }
  





  @NotNull
  public static final <T> Sequence<T> sortedWith(@NotNull Sequence<? extends T> $receiver, @NotNull final Comparator<? super T> comparator)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(comparator, "comparator");(Sequence)new Sequence() {
      @NotNull
      public Iterator<T> iterator() { List sortedList = SequencesKt.toMutableList($this_sortedWith);
        CollectionsKt.sortWith(sortedList, comparator);
        return sortedList.iterator();
      }
    };
  }
  
























  @NotNull
  public static final <T, K, M extends Map<? super K, ? super T>> M associateByTo(@NotNull Sequence<? extends T> $receiver, @NotNull M destination, @NotNull Function1<? super T, ? extends K> keySelector)
  {
    ;
    






















    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(destination, "destination");Intrinsics.checkParameterIsNotNull(keySelector, "keySelector"); for (Object element : $receiver) {
      destination.put(keySelector.invoke(element), element);
    }
    return destination;
  }
  



  @NotNull
  public static final <T, K, V, M extends Map<? super K, ? super V>> M associateByTo(@NotNull Sequence<? extends T> $receiver, @NotNull M destination, @NotNull Function1<? super T, ? extends K> keySelector, @NotNull Function1<? super T, ? extends V> valueTransform)
  {
    ;
    


    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(destination, "destination");Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");Intrinsics.checkParameterIsNotNull(valueTransform, "valueTransform"); for (Object element : $receiver) {
      destination.put(keySelector.invoke(element), valueTransform.invoke(element));
    }
    return destination;
  }
  



  @NotNull
  public static final <T, K, V, M extends Map<? super K, ? super V>> M associateTo(@NotNull Sequence<? extends T> $receiver, @NotNull M destination, @NotNull Function1<? super T, ? extends Pair<? extends K, ? extends V>> transform)
  {
    ;
    

    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(destination, "destination");Intrinsics.checkParameterIsNotNull(transform, "transform"); Map localMap; Pair localPair; for (Iterator localIterator = $receiver.iterator(); localIterator.hasNext(); 
        localMap.put(localPair.getFirst(), localPair.getSecond()))
    {
      Object element = localIterator.next();
      localMap = destination;localPair = (Pair)transform.invoke(element);
    }
    return destination;
  }
  












  @SinceKotlin(version="1.3")
  @NotNull
  public static final <K, V, M extends Map<? super K, ? super V>> M associateWithTo(@NotNull Sequence<? extends K> $receiver, @NotNull M destination, @NotNull Function1<? super K, ? extends V> valueSelector)
  {
    ;
    










    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(destination, "destination");Intrinsics.checkParameterIsNotNull(valueSelector, "valueSelector"); for (Object element : $receiver) {
      destination.put(element, valueSelector.invoke(element));
    }
    return destination;
  }
  



  @NotNull
  public static final <T, C extends Collection<? super T>> C toCollection(@NotNull Sequence<? extends T> $receiver, @NotNull C destination)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(destination, "destination"); for (Object item : $receiver) {
      destination.add(item);
    }
    return destination;
  }
  



  @NotNull
  public static final <T> java.util.HashSet<T> toHashSet(@NotNull Sequence<? extends T> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");return (java.util.HashSet)SequencesKt.toCollection($receiver, (Collection)new java.util.HashSet());
  }
  



  @NotNull
  public static final <T> List<T> toList(@NotNull Sequence<? extends T> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");return CollectionsKt.optimizeReadOnlyList(SequencesKt.toMutableList($receiver));
  }
  



  @NotNull
  public static final <T> List<T> toMutableList(@NotNull Sequence<? extends T> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");return (List)SequencesKt.toCollection($receiver, (Collection)new java.util.ArrayList());
  }
  





  @NotNull
  public static final <T> java.util.Set<T> toSet(@NotNull Sequence<? extends T> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");return kotlin.collections.SetsKt.optimizeReadOnlySet((java.util.Set)SequencesKt.toCollection($receiver, (Collection)new java.util.LinkedHashSet()));
  }
  



  @NotNull
  public static final <T, R> Sequence<R> flatMap(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, ? extends Sequence<? extends R>> transform)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(transform, "transform");return (Sequence)new FlatteningSequence($receiver, transform, (Function1)flatMap.1.INSTANCE);
  }
  

  @NotNull
  public static final <T, R, C extends Collection<? super R>> C flatMapTo(@NotNull Sequence<? extends T> $receiver, @NotNull C destination, @NotNull Function1<? super T, ? extends Sequence<? extends R>> transform)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(destination, "destination");Intrinsics.checkParameterIsNotNull(transform, "transform"); for (Object element : $receiver) {
      Sequence list = (Sequence)transform.invoke(element);
      CollectionsKt.addAll(destination, list);
    }
    return destination;
  }
  


















  @NotNull
  public static final <T, K, M extends Map<? super K, List<T>>> M groupByTo(@NotNull Sequence<? extends T> $receiver, @NotNull M destination, @NotNull Function1<? super T, ? extends K> keySelector)
  {
    ;
    

















    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(destination, "destination");Intrinsics.checkParameterIsNotNull(keySelector, "keySelector"); for (Object element : $receiver) {
      Object key = keySelector.invoke(element);
      Map $receiver$iv = destination;
      













































































































































































































































































































































































































































































































































































































      int $i$f$getOrPut;
      












































































































































































































































































































































































































































































































































































































      Object value$iv = $receiver$iv.get(key);
      int $i$a$1$getOrPut;
      Object answer$iv = new java.util.ArrayList();
      






























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































      $receiver$iv.put(key, answer$iv);List list = (List)(value$iv == null ? 
        answer$iv : 
        
        value$iv);list.add(element);
    }
    return destination;
  }
  




  @NotNull
  public static final <T, K, V, M extends Map<? super K, List<V>>> M groupByTo(@NotNull Sequence<? extends T> $receiver, @NotNull M destination, @NotNull Function1<? super T, ? extends K> keySelector, @NotNull Function1<? super T, ? extends V> valueTransform)
  {
    ;
    



    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(destination, "destination");Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");Intrinsics.checkParameterIsNotNull(valueTransform, "valueTransform"); for (Object element : $receiver) {
      Object key = keySelector.invoke(element);
      Map $receiver$iv = destination;
      






































































































































































































































































































































































































































































































































































































      int $i$f$getOrPut;
      






































































































































































































































































































































































































































































































































































































      Object value$iv = $receiver$iv.get(key);
      int $i$a$2$getOrPut;
      Object answer$iv = new java.util.ArrayList();
      

















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































      $receiver$iv.put(key, answer$iv);List list = (List)(value$iv == null ? 
        answer$iv : 
        
        value$iv);list.add(valueTransform.invoke(element));
    }
    return destination;
  }
  



  @SinceKotlin(version="1.1")
  @NotNull
  public static final <T, K> kotlin.collections.Grouping<T, K> groupingBy(@NotNull Sequence<? extends T> $receiver, @NotNull final Function1<? super T, ? extends K> keySelector)
  {
    ;
    

    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");(kotlin.collections.Grouping)new kotlin.collections.Grouping() { @NotNull
      public Iterator<T> sourceIterator() { return $this_groupingBy.iterator(); }
      public K keyOf(T element) { return keySelector.invoke(element); }
    };
  }
  




  @NotNull
  public static final <T, R> Sequence<R> map(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, ? extends R> transform)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(transform, "transform");return (Sequence)new TransformingSequence($receiver, transform);
  }
  






  @NotNull
  public static final <T, R> Sequence<R> mapIndexed(@NotNull Sequence<? extends T> $receiver, @NotNull Function2<? super Integer, ? super T, ? extends R> transform)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(transform, "transform");return (Sequence)new TransformingIndexedSequence($receiver, transform);
  }
  






  @NotNull
  public static final <T, R> Sequence<R> mapIndexedNotNull(@NotNull Sequence<? extends T> $receiver, @NotNull Function2<? super Integer, ? super T, ? extends R> transform)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(transform, "transform");return SequencesKt.filterNotNull((Sequence)new TransformingIndexedSequence($receiver, transform));
  }
  









  @NotNull
  public static final <T, R, C extends Collection<? super R>> C mapIndexedTo(@NotNull Sequence<? extends T> $receiver, @NotNull C destination, @NotNull Function2<? super Integer, ? super T, ? extends R> transform)
  {
    ;
    








    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(destination, "destination");Intrinsics.checkParameterIsNotNull(transform, "transform");int index = 0;
    Object item; Function2 localFunction2; Collection localCollection; int j; for (Iterator localIterator = $receiver.iterator(); localIterator.hasNext(); 
        localCollection.add(localFunction2.invoke(Integer.valueOf(j), item)))
    {
      item = localIterator.next();
      int i = index++;localFunction2 = transform;localCollection = destination; if (i < 0) if (kotlin.internal.PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) CollectionsKt.throwIndexOverflow(); else throw ((Throwable)new ArithmeticException("Index overflow has happened.")); j = i; }
    return destination;
  }
  




  @NotNull
  public static final <T, R> Sequence<R> mapNotNull(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, ? extends R> transform)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(transform, "transform");return SequencesKt.filterNotNull((Sequence)new TransformingSequence($receiver, transform));
  }
  







  @NotNull
  public static final <T, R, C extends Collection<? super R>> C mapTo(@NotNull Sequence<? extends T> $receiver, @NotNull C destination, @NotNull Function1<? super T, ? extends R> transform)
  {
    ;
    






    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(destination, "destination");Intrinsics.checkParameterIsNotNull(transform, "transform"); for (Object item : $receiver)
      destination.add(transform.invoke(item));
    return destination;
  }
  



  @NotNull
  public static final <T> Sequence<kotlin.collections.IndexedValue<T>> withIndex(@NotNull Sequence<? extends T> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");return (Sequence)new IndexingSequence($receiver);
  }
  





  @NotNull
  public static final <T> Sequence<T> distinct(@NotNull Sequence<? extends T> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");return SequencesKt.distinctBy($receiver, (Function1)distinct.1.INSTANCE);
  }
  






  @NotNull
  public static final <T, K> Sequence<T> distinctBy(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, ? extends K> selector)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(selector, "selector");return (Sequence)new DistinctSequence($receiver, selector);
  }
  





  @NotNull
  public static final <T> java.util.Set<T> toMutableSet(@NotNull Sequence<? extends T> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");java.util.LinkedHashSet set = new java.util.LinkedHashSet();
    Object item; for (Iterator localIterator = $receiver.iterator(); localIterator.hasNext(); set.add(item)) item = localIterator.next();
    return (java.util.Set)set;
  }
  


















  public static final <T> boolean any(@NotNull Sequence<? extends T> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");return $receiver.iterator().hasNext();
  }
  
















  public static final <T> int count(@NotNull Sequence<? extends T> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");int count = 0;
    for (Object element : $receiver) { count++;int i = count; if (i < 0) CollectionsKt.throwCountOverflow(); }
    return count;
  }
  


  public static final <T> int count(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Boolean> predicate)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");int count = 0;
    for (Object element : $receiver) if (((Boolean)predicate.invoke(element)).booleanValue()) { count++;int i = count; if (i < 0) if (kotlin.internal.PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) CollectionsKt.throwCountOverflow(); else throw ((Throwable)new ArithmeticException("Count overflow has happened.")); }
    return count;
  }
  


  public static final <T, R> R fold(@NotNull Sequence<? extends T> $receiver, R initial, @NotNull Function2<? super R, ? super T, ? extends R> operation)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(operation, "operation");Object accumulator = initial;
    Object element; for (Iterator localIterator = $receiver.iterator(); localIterator.hasNext(); accumulator = operation.invoke(accumulator, element)) element = localIterator.next();
    return accumulator;
  }
  



  public static final <T, R> R foldIndexed(@NotNull Sequence<? extends T> $receiver, R initial, @NotNull kotlin.jvm.functions.Function3<? super Integer, ? super R, ? super T, ? extends R> operation)
  {
    ;
    


    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(operation, "operation");int index = 0;
    Object accumulator = initial;
    Object element; kotlin.jvm.functions.Function3 localFunction3; int j; for (Iterator localIterator = $receiver.iterator(); localIterator.hasNext(); accumulator = localFunction3.invoke(Integer.valueOf(j), accumulator, element)) { element = localIterator.next();int i = index++;localFunction3 = operation; if (i < 0) if (kotlin.internal.PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) CollectionsKt.throwIndexOverflow(); else throw ((Throwable)new ArithmeticException("Index overflow has happened.")); j = i; }
    return accumulator;
  }
  


  public static final <T> void forEach(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, kotlin.Unit> action)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(action, "action"); Object element; for (Iterator localIterator = $receiver.iterator(); localIterator.hasNext(); action.invoke(element)) { element = localIterator.next();
    }
  }
  


  public static final <T> void forEachIndexed(@NotNull Sequence<? extends T> $receiver, @NotNull Function2<? super Integer, ? super T, kotlin.Unit> action)
  {
    ;
    

    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(action, "action");int index = 0;
    Object item; Function2 localFunction2; int j; for (Iterator localIterator = $receiver.iterator(); localIterator.hasNext(); localFunction2.invoke(Integer.valueOf(j), item)) { item = localIterator.next();int i = index++;localFunction2 = action; if (i < 0) if (kotlin.internal.PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) CollectionsKt.throwIndexOverflow(); else throw ((Throwable)new ArithmeticException("Index overflow has happened.")); j = i;
    }
  }
  




  @SinceKotlin(version="1.1")
  @Nullable
  public static final Double max(@NotNull Sequence<Double> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Iterator iterator = $receiver.iterator();
    if (!iterator.hasNext()) return null;
    double max = ((Number)iterator.next()).doubleValue();
    double d1 = max; if (Double.isNaN(d1)) return Double.valueOf(max);
    while (iterator.hasNext()) {
      double e = ((Number)iterator.next()).doubleValue();
      double d2 = e; if (Double.isNaN(d2)) return Double.valueOf(e);
      if (max < e) max = e;
    }
    return Double.valueOf(max);
  }
  





  @SinceKotlin(version="1.1")
  @Nullable
  public static final Float max(@NotNull Sequence<Float> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Iterator iterator = $receiver.iterator();
    if (!iterator.hasNext()) return null;
    float max = ((Number)iterator.next()).floatValue();
    float f1 = max; if (Float.isNaN(f1)) return Float.valueOf(max);
    while (iterator.hasNext()) {
      float e = ((Number)iterator.next()).floatValue();
      float f2 = e; if (Float.isNaN(f2)) return Float.valueOf(e);
      if (max < e) max = e;
    }
    return Float.valueOf(max);
  }
  



  @Nullable
  public static final <T extends Comparable<? super T>> T max(@NotNull Sequence<? extends T> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Iterator iterator = $receiver.iterator();
    if (!iterator.hasNext()) return null;
    Comparable max = (Comparable)iterator.next();
    while (iterator.hasNext()) {
      Comparable e = (Comparable)iterator.next();
      if (max.compareTo(e) < 0) max = e;
    }
    return max;
  }
  


  @Nullable
  public static final <T, R extends Comparable<? super R>> T maxBy(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, ? extends R> selector)
  {
    ;
    

    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(selector, "selector");Iterator iterator = $receiver.iterator();
    if (!iterator.hasNext()) return null;
    Object maxElem = iterator.next();
    Comparable maxValue = (Comparable)selector.invoke(maxElem);
    while (iterator.hasNext()) {
      Object e = iterator.next();
      Comparable v = (Comparable)selector.invoke(e);
      if (maxValue.compareTo(v) < 0) {
        maxElem = e;
        maxValue = v;
      }
    }
    return maxElem;
  }
  



  @Nullable
  public static final <T> T maxWith(@NotNull Sequence<? extends T> $receiver, @NotNull Comparator<? super T> comparator)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(comparator, "comparator");Iterator iterator = $receiver.iterator();
    if (!iterator.hasNext()) return null;
    Object max = iterator.next();
    while (iterator.hasNext()) {
      Object e = iterator.next();
      if (comparator.compare(max, e) < 0) max = e;
    }
    return max;
  }
  





  @SinceKotlin(version="1.1")
  @Nullable
  public static final Double min(@NotNull Sequence<Double> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Iterator iterator = $receiver.iterator();
    if (!iterator.hasNext()) return null;
    double min = ((Number)iterator.next()).doubleValue();
    double d1 = min; if (Double.isNaN(d1)) return Double.valueOf(min);
    while (iterator.hasNext()) {
      double e = ((Number)iterator.next()).doubleValue();
      double d2 = e; if (Double.isNaN(d2)) return Double.valueOf(e);
      if (min > e) min = e;
    }
    return Double.valueOf(min);
  }
  





  @SinceKotlin(version="1.1")
  @Nullable
  public static final Float min(@NotNull Sequence<Float> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Iterator iterator = $receiver.iterator();
    if (!iterator.hasNext()) return null;
    float min = ((Number)iterator.next()).floatValue();
    float f1 = min; if (Float.isNaN(f1)) return Float.valueOf(min);
    while (iterator.hasNext()) {
      float e = ((Number)iterator.next()).floatValue();
      float f2 = e; if (Float.isNaN(f2)) return Float.valueOf(e);
      if (min > e) min = e;
    }
    return Float.valueOf(min);
  }
  



  @Nullable
  public static final <T extends Comparable<? super T>> T min(@NotNull Sequence<? extends T> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Iterator iterator = $receiver.iterator();
    if (!iterator.hasNext()) return null;
    Comparable min = (Comparable)iterator.next();
    while (iterator.hasNext()) {
      Comparable e = (Comparable)iterator.next();
      if (min.compareTo(e) > 0) min = e;
    }
    return min;
  }
  


  @Nullable
  public static final <T, R extends Comparable<? super R>> T minBy(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, ? extends R> selector)
  {
    ;
    

    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(selector, "selector");Iterator iterator = $receiver.iterator();
    if (!iterator.hasNext()) return null;
    Object minElem = iterator.next();
    Comparable minValue = (Comparable)selector.invoke(minElem);
    while (iterator.hasNext()) {
      Object e = iterator.next();
      Comparable v = (Comparable)selector.invoke(e);
      if (minValue.compareTo(v) > 0) {
        minElem = e;
        minValue = v;
      }
    }
    return minElem;
  }
  



  @Nullable
  public static final <T> T minWith(@NotNull Sequence<? extends T> $receiver, @NotNull Comparator<? super T> comparator)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(comparator, "comparator");Iterator iterator = $receiver.iterator();
    if (!iterator.hasNext()) return null;
    Object min = iterator.next();
    while (iterator.hasNext()) {
      Object e = iterator.next();
      if (comparator.compare(min, e) > 0) min = e;
    }
    return min;
  }
  






  public static final <T> boolean none(@NotNull Sequence<? extends T> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");return !$receiver.iterator().hasNext();
  }
  















  @SinceKotlin(version="1.1")
  @NotNull
  public static final <T> Sequence<T> onEach(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, kotlin.Unit> action)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(action, "action");SequencesKt.map($receiver, (Function1)new Lambda(action) {
      public final T invoke(T it) { $action.invoke(it);
        return it;
      }
    });
  }
  

  public static final <S, T extends S> S reduce(@NotNull Sequence<? extends T> $receiver, @NotNull Function2<? super S, ? super T, ? extends S> operation)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(operation, "operation");Iterator iterator = $receiver.iterator();
    if (!iterator.hasNext()) throw ((Throwable)new UnsupportedOperationException("Empty sequence can't be reduced."));
    Object accumulator = iterator.next();
    while (iterator.hasNext()) {
      accumulator = operation.invoke(accumulator, iterator.next());
    }
    return accumulator;
  }
  



  public static final <S, T extends S> S reduceIndexed(@NotNull Sequence<? extends T> $receiver, @NotNull kotlin.jvm.functions.Function3<? super Integer, ? super S, ? super T, ? extends S> operation)
  {
    ;
    


    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(operation, "operation");Iterator iterator = $receiver.iterator();
    if (!iterator.hasNext()) throw ((Throwable)new UnsupportedOperationException("Empty sequence can't be reduced."));
    int index = 1;
    kotlin.jvm.functions.Function3 localFunction3; int j; for (Object accumulator = iterator.next(); 
        iterator.hasNext(); 
        accumulator = localFunction3.invoke(Integer.valueOf(j), accumulator, iterator.next())) { int i = index++;localFunction3 = operation; if (i < 0) if (kotlin.internal.PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) CollectionsKt.throwIndexOverflow(); else throw ((Throwable)new ArithmeticException("Index overflow has happened.")); j = i;
    }
    return accumulator;
  }
  


  public static final <T> int sumBy(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Integer> selector)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(selector, "selector");int sum = 0;
    for (Object element : $receiver) {
      sum += ((Number)selector.invoke(element)).intValue();
    }
    return sum;
  }
  


  public static final <T> double sumByDouble(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Double> selector)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(selector, "selector");double sum = 0.0D;
    for (Object element : $receiver) {
      sum += ((Number)selector.invoke(element)).doubleValue();
    }
    return sum;
  }
  



  @NotNull
  public static final <T> Sequence<T> requireNoNulls(@NotNull Sequence<? extends T> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");SequencesKt.map($receiver, (Function1)new Lambda($receiver)
    {
      /* Error */
      @NotNull
      public final T invoke(@Nullable T it)
      {
        // Byte code:
        //   0: aload_1
        //   1: dup
        //   2: ifnull +6 -> 8
        //   5: goto +42 -> 47
        //   8: pop
        //   9: new 13	java/lang/IllegalArgumentException
        //   12: dup
        //   13: new 15	java/lang/StringBuilder
        //   16: dup
        //   17: invokespecial 19	java/lang/StringBuilder:<init>	()V
        //   20: ldc 21
        //   22: invokevirtual 25	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   25: aload_0
        //   26: getfield 29	kotlin/sequences/SequencesKt___SequencesKt$requireNoNulls$1:$this_requireNoNulls	Lkotlin/sequences/Sequence;
        //   29: invokevirtual 32	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //   32: bipush 46
        //   34: invokevirtual 35	java/lang/StringBuilder:append	(C)Ljava/lang/StringBuilder;
        //   37: invokevirtual 39	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //   40: invokespecial 42	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
        //   43: checkcast 44	java/lang/Throwable
        //   46: athrow
        //   47: areturn
        // Line number table:
        //   Java source line #1388	-> byte code offset #0
        // Local variable table:
        //   start	length	slot	name	signature
        //   0	48	0	this	1
        //   0	48	1	it	Object
      }
    });
  }
  
  @SinceKotlin(version="1.2")
  @NotNull
  public static final <T> Sequence<List<T>> chunked(@NotNull Sequence<? extends T> $receiver, int size)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");return SequencesKt.windowed($receiver, size, size, true);
  }
  














  @SinceKotlin(version="1.2")
  @NotNull
  public static final <T, R> Sequence<R> chunked(@NotNull Sequence<? extends T> $receiver, int size, @NotNull Function1<? super List<? extends T>, ? extends R> transform)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(transform, "transform");return SequencesKt.windowed($receiver, size, size, true, transform);
  }
  



  @NotNull
  public static final <T> Sequence<T> minus(@NotNull Sequence<? extends T> $receiver, final T element)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");(Sequence)new Sequence() {
      @NotNull
      public Iterator<T> iterator() { kotlin.jvm.internal.Ref.BooleanRef localBooleanRef1 = new kotlin.jvm.internal.Ref.BooleanRef();element = false;
        final kotlin.jvm.internal.Ref.BooleanRef removed; SequencesKt.filter($this_minus, (Function1)new Lambda(removed) { public final boolean invoke(T it) { removedelement = true;return (removedelement) || (!Intrinsics.areEqual(it, this$0.$element));
          }
        }).iterator();
      }
    };
  }
  







  @NotNull
  public static final <T> Sequence<T> minus(@NotNull Sequence<? extends T> $receiver, @NotNull final T[] elements)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(elements, "elements");Object[] arrayOfObject = elements; if ((arrayOfObject.length == 0 ? 1 : 0) != 0) return $receiver;
    (Sequence)new Sequence() {
      @NotNull
      public Iterator<T> iterator() { java.util.HashSet other = kotlin.collections.ArraysKt.toHashSet(elements);
        SequencesKt.filterNot($this_minus, (Function1)new Lambda(other) { public final boolean invoke(T it) { return $other.contains(it); }
        }).iterator();
      }
    };
  }
  








  @NotNull
  public static final <T> Sequence<T> minus(@NotNull Sequence<? extends T> $receiver, @NotNull final Iterable<? extends T> elements)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(elements, "elements");(Sequence)new Sequence() {
      @NotNull
      public Iterator<T> iterator() { Collection other = CollectionsKt.convertToSetForSetOperation(elements);
        if (other.isEmpty()) {
          return $this_minus.iterator();
        }
        SequencesKt.filterNot($this_minus, (Function1)new Lambda(other) { public final boolean invoke(T it) { return $other.contains(it); }
        }).iterator();
      }
    };
  }
  








  @NotNull
  public static final <T> Sequence<T> minus(@NotNull Sequence<? extends T> $receiver, @NotNull final Sequence<? extends T> elements)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(elements, "elements");(Sequence)new Sequence() {
      @NotNull
      public Iterator<T> iterator() { java.util.HashSet other = SequencesKt.toHashSet(elements);
        if (other.isEmpty()) {
          return $this_minus.iterator();
        }
        SequencesKt.filterNot($this_minus, (Function1)new Lambda(other) { public final boolean invoke(T it) { return $other.contains(it); }
        }).iterator();
      }
    };
  }
  

  @kotlin.internal.InlineOnly
  private static final <T> Sequence<T> minusElement(@NotNull Sequence<? extends T> $receiver, T element)
  {
    ;
    
    return SequencesKt.minus($receiver, element);
  }
  


  @NotNull
  public static final <T> Pair<List<T>, List<T>> partition(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Boolean> predicate)
  {
    ;
    

    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");java.util.ArrayList first = new java.util.ArrayList();
    java.util.ArrayList second = new java.util.ArrayList();
    for (Object element : $receiver) {
      if (((Boolean)predicate.invoke(element)).booleanValue()) {
        first.add(element);
      } else {
        second.add(element);
      }
    }
    return new Pair(first, second);
  }
  



  @NotNull
  public static final <T> Sequence<T> plus(@NotNull Sequence<? extends T> $receiver, T element)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");return SequencesKt.flatten(SequencesKt.sequenceOf(new Sequence[] { $receiver, SequencesKt.sequenceOf(new Object[] { element }) }));
  }
  






  @NotNull
  public static final <T> Sequence<T> plus(@NotNull Sequence<? extends T> $receiver, @NotNull T[] elements)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(elements, "elements");return SequencesKt.plus($receiver, (Iterable)kotlin.collections.ArraysKt.asList(elements));
  }
  






  @NotNull
  public static final <T> Sequence<T> plus(@NotNull Sequence<? extends T> $receiver, @NotNull Iterable<? extends T> elements)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(elements, "elements");return SequencesKt.flatten(SequencesKt.sequenceOf(new Sequence[] { $receiver, CollectionsKt.asSequence(elements) }));
  }
  






  @NotNull
  public static final <T> Sequence<T> plus(@NotNull Sequence<? extends T> $receiver, @NotNull Sequence<? extends T> elements)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(elements, "elements");return SequencesKt.flatten(SequencesKt.sequenceOf(new Sequence[] { $receiver, elements }));
  }
  


  @kotlin.internal.InlineOnly
  private static final <T> Sequence<T> plusElement(@NotNull Sequence<? extends T> $receiver, T element)
  {
    ;
    
    return SequencesKt.plus($receiver, element);
  }
  













  @SinceKotlin(version="1.2")
  @NotNull
  public static final <T> Sequence<List<T>> windowed(@NotNull Sequence<? extends T> $receiver, int size, int step, boolean partialWindows)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");return kotlin.collections.SlidingWindowKt.windowedSequence($receiver, size, step, partialWindows, false);
  }
  















  @SinceKotlin(version="1.2")
  @NotNull
  public static final <T, R> Sequence<R> windowed(@NotNull Sequence<? extends T> $receiver, int size, int step, boolean partialWindows, @NotNull Function1<? super List<? extends T>, ? extends R> transform)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(transform, "transform");return SequencesKt.map(kotlin.collections.SlidingWindowKt.windowedSequence($receiver, size, step, partialWindows, true), transform);
  }
  






  @NotNull
  public static final <T, R> Sequence<Pair<T, R>> zip(@NotNull Sequence<? extends T> $receiver, @NotNull Sequence<? extends R> other)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(other, "other");return (Sequence)new MergingSequence($receiver, other, (Function2)zip.1.INSTANCE);
  }
  







  @NotNull
  public static final <T, R, V> Sequence<V> zip(@NotNull Sequence<? extends T> $receiver, @NotNull Sequence<? extends R> other, @NotNull Function2<? super T, ? super R, ? extends V> transform)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(other, "other");Intrinsics.checkParameterIsNotNull(transform, "transform");return (Sequence)new MergingSequence($receiver, other, transform);
  }
  







  @SinceKotlin(version="1.2")
  @NotNull
  public static final <T> Sequence<Pair<T, T>> zipWithNext(@NotNull Sequence<? extends T> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");return SequencesKt.zipWithNext($receiver, (Function2)zipWithNext.1.INSTANCE);
  }
  








  @SinceKotlin(version="1.2")
  @NotNull
  public static final <T, R> Sequence<R> zipWithNext(@NotNull Sequence<? extends T> $receiver, @NotNull final Function2<? super T, ? super T, ? extends R> transform)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(transform, "transform");SequencesKt.sequence((Function2)new kotlin.coroutines.jvm.internal.RestrictedSuspendLambda($receiver, transform)
    {
      private SequenceScope p$;
      Object L$0;
      Object L$1;
      Object L$2;
      Object L$3;
      int label;
      
      /* Error */
      @Nullable
      public final Object invokeSuspend(@NotNull Object result)
      {
        // Byte code:
        //   0: invokestatic 38	kotlin/coroutines/intrinsics/IntrinsicsKt:getCOROUTINE_SUSPENDED	()Ljava/lang/Object;
        //   3: astore 6
        //   5: aload_0
        //   6: getfield 42	kotlin/sequences/SequencesKt___SequencesKt$zipWithNext$2:label	I
        //   9: tableswitch	default:+203->212, 0:+23->32, 1:+146->155
        //   32: aload_1
        //   33: dup
        //   34: instanceof 44
        //   37: ifeq +10 -> 47
        //   40: checkcast 44	kotlin/Result$Failure
        //   43: getfield 48	kotlin/Result$Failure:exception	Ljava/lang/Throwable;
        //   46: athrow
        //   47: pop
        //   48: aload_0
        //   49: getfield 50	kotlin/sequences/SequencesKt___SequencesKt$zipWithNext$2:p$	Lkotlin/sequences/SequenceScope;
        //   52: astore_2
        //   53: aload_0
        //   54: getfield 54	kotlin/sequences/SequencesKt___SequencesKt$zipWithNext$2:$this_zipWithNext	Lkotlin/sequences/Sequence;
        //   57: invokeinterface 59 1 0
        //   62: astore_3
        //   63: aload_3
        //   64: invokeinterface 65 1 0
        //   69: ifne +7 -> 76
        //   72: getstatic 71	kotlin/Unit:INSTANCE	Lkotlin/Unit;
        //   75: areturn
        //   76: aload_3
        //   77: invokeinterface 73 1 0
        //   82: astore 4
        //   84: aload_3
        //   85: invokeinterface 65 1 0
        //   90: ifeq +118 -> 208
        //   93: aload_3
        //   94: invokeinterface 73 1 0
        //   99: astore 5
        //   101: aload_2
        //   102: aload_0
        //   103: getfield 77	kotlin/sequences/SequencesKt___SequencesKt$zipWithNext$2:$transform	Lkotlin/jvm/functions/Function2;
        //   106: aload 4
        //   108: aload 5
        //   110: invokeinterface 81 3 0
        //   115: aload_0
        //   116: aload_0
        //   117: aload_2
        //   118: putfield 83	kotlin/sequences/SequencesKt___SequencesKt$zipWithNext$2:L$0	Ljava/lang/Object;
        //   121: aload_0
        //   122: aload_3
        //   123: putfield 85	kotlin/sequences/SequencesKt___SequencesKt$zipWithNext$2:L$1	Ljava/lang/Object;
        //   126: aload_0
        //   127: aload 4
        //   129: putfield 87	kotlin/sequences/SequencesKt___SequencesKt$zipWithNext$2:L$2	Ljava/lang/Object;
        //   132: aload_0
        //   133: aload 5
        //   135: putfield 89	kotlin/sequences/SequencesKt___SequencesKt$zipWithNext$2:L$3	Ljava/lang/Object;
        //   138: aload_0
        //   139: iconst_1
        //   140: putfield 42	kotlin/sequences/SequencesKt___SequencesKt$zipWithNext$2:label	I
        //   143: invokevirtual 95	kotlin/sequences/SequenceScope:yield	(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
        //   146: dup
        //   147: aload 6
        //   149: if_acmpne +51 -> 200
        //   152: aload 6
        //   154: areturn
        //   155: aload_0
        //   156: getfield 89	kotlin/sequences/SequencesKt___SequencesKt$zipWithNext$2:L$3	Ljava/lang/Object;
        //   159: astore 5
        //   161: aload_0
        //   162: getfield 87	kotlin/sequences/SequencesKt___SequencesKt$zipWithNext$2:L$2	Ljava/lang/Object;
        //   165: astore 4
        //   167: aload_0
        //   168: getfield 85	kotlin/sequences/SequencesKt___SequencesKt$zipWithNext$2:L$1	Ljava/lang/Object;
        //   171: checkcast 61	java/util/Iterator
        //   174: astore_3
        //   175: aload_0
        //   176: getfield 83	kotlin/sequences/SequencesKt___SequencesKt$zipWithNext$2:L$0	Ljava/lang/Object;
        //   179: checkcast 91	kotlin/sequences/SequenceScope
        //   182: astore_2
        //   183: aload_1
        //   184: dup
        //   185: instanceof 44
        //   188: ifeq +10 -> 198
        //   191: checkcast 44	kotlin/Result$Failure
        //   194: getfield 48	kotlin/Result$Failure:exception	Ljava/lang/Throwable;
        //   197: athrow
        //   198: pop
        //   199: aload_1
        //   200: pop
        //   201: aload 5
        //   203: astore 4
        //   205: goto -121 -> 84
        //   208: getstatic 71	kotlin/Unit:INSTANCE	Lkotlin/Unit;
        //   211: areturn
        //   212: new 97	java/lang/IllegalStateException
        //   215: dup
        //   216: ldc 99
        //   218: invokespecial 103	java/lang/IllegalStateException:<init>	(Ljava/lang/String;)V
        //   221: athrow
        // Line number table:
        //   Java source line #1687	-> byte code offset #3
        //   Java source line #1688	-> byte code offset #53
        //   Java source line #1689	-> byte code offset #63
        //   Java source line #1690	-> byte code offset #76
        //   Java source line #1691	-> byte code offset #84
        //   Java source line #1692	-> byte code offset #93
        //   Java source line #1693	-> byte code offset #101
        //   Java source line #1687	-> byte code offset #152
        //   Java source line #1694	-> byte code offset #200
        //   Java source line #1691	-> byte code offset #205
        //   Java source line #1696	-> byte code offset #208
        // Local variable table:
        //   start	length	slot	name	signature
        //   0	222	0	this	2
        //   0	222	1	result	Object
        //   63	145	3	iterator	Iterator
        //   84	124	4	current	Object
        //   101	104	5	next	Object
      }
      
      @NotNull
      public final kotlin.coroutines.Continuation<kotlin.Unit> create(@Nullable Object value, @NotNull kotlin.coroutines.Continuation<?> completion)
      {
        Intrinsics.checkParameterIsNotNull(completion, "completion");
        2 local2 = new 2($this_zipWithNext, transform, completion);
        p$ = ((SequenceScope)value);
        return local2;
      }
      
      public final Object invoke(Object paramAnonymousObject1, Object paramAnonymousObject2)
      {
        return ((2)create(paramAnonymousObject1, (kotlin.coroutines.Continuation)paramAnonymousObject2)).invokeSuspend(kotlin.Unit.INSTANCE);
      }
    });
  }
  
  @NotNull
  public static final <T, A extends Appendable> A joinTo(@NotNull Sequence<? extends T> $receiver, @NotNull A buffer, @NotNull CharSequence separator, @NotNull CharSequence prefix, @NotNull CharSequence postfix, int limit, @NotNull CharSequence truncated, @Nullable Function1<? super T, ? extends CharSequence> transform)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(buffer, "buffer");Intrinsics.checkParameterIsNotNull(separator, "separator");Intrinsics.checkParameterIsNotNull(prefix, "prefix");Intrinsics.checkParameterIsNotNull(postfix, "postfix");Intrinsics.checkParameterIsNotNull(truncated, "truncated");buffer.append(prefix);
    int count = 0;
    for (Object element : $receiver) {
      count++; if (count > 1) buffer.append(separator);
      if ((limit < 0) || (count <= limit))
        kotlin.text.StringsKt.appendElement(buffer, element, transform); else
        break;
    }
    if ((limit >= 0) && (count > limit)) buffer.append(truncated);
    buffer.append(postfix);
    return buffer;
  }
  








  @NotNull
  public static final <T> String joinToString(@NotNull Sequence<? extends T> $receiver, @NotNull CharSequence separator, @NotNull CharSequence prefix, @NotNull CharSequence postfix, int limit, @NotNull CharSequence truncated, @Nullable Function1<? super T, ? extends CharSequence> transform)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(separator, "separator");Intrinsics.checkParameterIsNotNull(prefix, "prefix");Intrinsics.checkParameterIsNotNull(postfix, "postfix");Intrinsics.checkParameterIsNotNull(truncated, "truncated"); String tmp64_61 = ((StringBuilder)SequencesKt.joinTo($receiver, (Appendable)new StringBuilder(), separator, prefix, postfix, limit, truncated, transform)).toString();Intrinsics.checkExpressionValueIsNotNull(tmp64_61, "joinTo(StringBuilder(), …ed, transform).toString()");return tmp64_61;
  }
  

  @NotNull
  public static final <T> Iterable<T> asIterable(@NotNull Sequence<? extends T> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");return (Iterable)new SequencesKt___SequencesKt.asIterable..inlined.Iterable.1($receiver);
  }
  

  @kotlin.internal.InlineOnly
  private static final <T> Sequence<T> asSequence(@NotNull Sequence<? extends T> $receiver)
  {
    ;
    return $receiver;
  }
  




  @kotlin.jvm.JvmName(name="averageOfByte")
  public static final double averageOfByte(@NotNull Sequence<Byte> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");double sum = 0.0D;
    int count = 0;
    for (Iterator localIterator = $receiver.iterator(); localIterator.hasNext();) { byte element = ((Number)localIterator.next()).byteValue();
      sum += element;
      count++;int i = count; if (i < 0) CollectionsKt.throwCountOverflow();
    }
    return count == 0 ? kotlin.jvm.internal.DoubleCompanionObject.INSTANCE.getNaN() : sum / count;
  }
  




  @kotlin.jvm.JvmName(name="averageOfShort")
  public static final double averageOfShort(@NotNull Sequence<Short> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");double sum = 0.0D;
    int count = 0;
    for (Iterator localIterator = $receiver.iterator(); localIterator.hasNext();) { short element = ((Number)localIterator.next()).shortValue();
      sum += element;
      count++;int i = count; if (i < 0) CollectionsKt.throwCountOverflow();
    }
    return count == 0 ? kotlin.jvm.internal.DoubleCompanionObject.INSTANCE.getNaN() : sum / count;
  }
  




  @kotlin.jvm.JvmName(name="averageOfInt")
  public static final double averageOfInt(@NotNull Sequence<Integer> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");double sum = 0.0D;
    int count = 0;
    for (Iterator localIterator = $receiver.iterator(); localIterator.hasNext();) { int element = ((Number)localIterator.next()).intValue();
      sum += element;
      count++;int i = count; if (i < 0) CollectionsKt.throwCountOverflow();
    }
    return count == 0 ? kotlin.jvm.internal.DoubleCompanionObject.INSTANCE.getNaN() : sum / count;
  }
  




  @kotlin.jvm.JvmName(name="averageOfLong")
  public static final double averageOfLong(@NotNull Sequence<Long> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");double sum = 0.0D;
    int count = 0;
    for (Iterator localIterator = $receiver.iterator(); localIterator.hasNext();) { long element = ((Number)localIterator.next()).longValue();
      sum += element;
      count++;int i = count; if (i < 0) CollectionsKt.throwCountOverflow();
    }
    return count == 0 ? kotlin.jvm.internal.DoubleCompanionObject.INSTANCE.getNaN() : sum / count;
  }
  




  @kotlin.jvm.JvmName(name="averageOfFloat")
  public static final double averageOfFloat(@NotNull Sequence<Float> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");double sum = 0.0D;
    int count = 0;
    for (Iterator localIterator = $receiver.iterator(); localIterator.hasNext();) { float element = ((Number)localIterator.next()).floatValue();
      sum += element;
      count++;int i = count; if (i < 0) CollectionsKt.throwCountOverflow();
    }
    return count == 0 ? kotlin.jvm.internal.DoubleCompanionObject.INSTANCE.getNaN() : sum / count;
  }
  




  @kotlin.jvm.JvmName(name="averageOfDouble")
  public static final double averageOfDouble(@NotNull Sequence<Double> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");double sum = 0.0D;
    int count = 0;
    for (Iterator localIterator = $receiver.iterator(); localIterator.hasNext();) { double element = ((Number)localIterator.next()).doubleValue();
      sum += element;
      count++;int i = count; if (i < 0) CollectionsKt.throwCountOverflow();
    }
    return count == 0 ? kotlin.jvm.internal.DoubleCompanionObject.INSTANCE.getNaN() : sum / count;
  }
  




  @kotlin.jvm.JvmName(name="sumOfByte")
  public static final int sumOfByte(@NotNull Sequence<Byte> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");int sum = 0;
    for (Iterator localIterator = $receiver.iterator(); localIterator.hasNext();) { byte element = ((Number)localIterator.next()).byteValue();
      sum += element;
    }
    return sum;
  }
  




  @kotlin.jvm.JvmName(name="sumOfShort")
  public static final int sumOfShort(@NotNull Sequence<Short> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");int sum = 0;
    for (Iterator localIterator = $receiver.iterator(); localIterator.hasNext();) { short element = ((Number)localIterator.next()).shortValue();
      sum += element;
    }
    return sum;
  }
  




  @kotlin.jvm.JvmName(name="sumOfInt")
  public static final int sumOfInt(@NotNull Sequence<Integer> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");int sum = 0;
    for (Iterator localIterator = $receiver.iterator(); localIterator.hasNext();) { int element = ((Number)localIterator.next()).intValue();
      sum += element;
    }
    return sum;
  }
  




  @kotlin.jvm.JvmName(name="sumOfLong")
  public static final long sumOfLong(@NotNull Sequence<Long> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");long sum = 0L;
    for (Iterator localIterator = $receiver.iterator(); localIterator.hasNext();) { long element = ((Number)localIterator.next()).longValue();
      sum += element;
    }
    return sum;
  }
  




  @kotlin.jvm.JvmName(name="sumOfFloat")
  public static final float sumOfFloat(@NotNull Sequence<Float> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");float sum = 0.0F;
    for (Iterator localIterator = $receiver.iterator(); localIterator.hasNext();) { float element = ((Number)localIterator.next()).floatValue();
      sum += element;
    }
    return sum;
  }
  




  @kotlin.jvm.JvmName(name="sumOfDouble")
  public static final double sumOfDouble(@NotNull Sequence<Double> $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");double sum = 0.0D;
    for (Iterator localIterator = $receiver.iterator(); localIterator.hasNext();) { double element = ((Number)localIterator.next()).doubleValue();
      sum += element;
    }
    return sum;
  }
  
  @kotlin.internal.InlineOnly
  private static final <T> T findLast(@NotNull Sequence<? extends T> $receiver, Function1<? super T, Boolean> predicate)
  {
    ;
    Sequence $receiver$iv = $receiver;
    






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































    int $i$f$lastOrNull;
    






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































    Object last$iv = null;
    for (Object element$iv : $receiver$iv) {
      if (((Boolean)predicate.invoke(element$iv)).booleanValue()) {
        last$iv = element$iv;
      }
    }
    return last$iv;
  }
  
  @NotNull
  public static final <T, K, V> Map<K, V> associate(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, ? extends Pair<? extends K, ? extends V>> transform)
  {
    ;
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(transform, "transform");Sequence localSequence1 = $receiver;Map destination$iv = (Map)new java.util.LinkedHashMap();
    















































































































































































































































































    int $i$f$associateTo;
    















































































































































































































































































    Sequence $receiver$iv;
    















































































































































































































































































    Map localMap1;
    















































































































































































































































































    Pair localPair;
    














































































































































































































































































    for (Iterator localIterator = $receiver$iv.iterator(); localIterator.hasNext(); 
        localMap1.put(localPair.getFirst(), localPair.getSecond()))
    {
      Object element$iv = localIterator.next();
      localMap1 = destination$iv;localPair = (Pair)transform.invoke(element$iv);
    }
    return destination$iv;
  }
  
  @NotNull
  public static final <T, K> Map<K, T> associateBy(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, ? extends K> keySelector)
  {
    ;
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");Sequence localSequence1 = $receiver;Map destination$iv = (Map)new java.util.LinkedHashMap();
    


































































































































































































































































































































































































































































    int $i$f$associateByTo;
    

































































































































































































































































































































































































































































    Sequence $receiver$iv;
    

































































































































































































































































































































































































































































    for (Object element$iv : $receiver$iv) {
      destination$iv.put(keySelector.invoke(element$iv), element$iv);
    }
    return destination$iv;
  }
  
  @NotNull
  public static final <T, K, V> Map<K, V> associateBy(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, ? extends K> keySelector, @NotNull Function1<? super T, ? extends V> valueTransform)
  {
    ;
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");Intrinsics.checkParameterIsNotNull(valueTransform, "valueTransform");Sequence localSequence1 = $receiver;Map destination$iv = (Map)new java.util.LinkedHashMap();
    































































































































































































































































































































































































































































    int $i$f$associateByTo;
    






























































































































































































































































































































































































































































    Sequence $receiver$iv;
    






























































































































































































































































































































































































































































    for (Object element$iv : $receiver$iv) {
      destination$iv.put(keySelector.invoke(element$iv), valueTransform.invoke(element$iv));
    }
    return destination$iv;
  }
  
  @SinceKotlin(version="1.3")
  @NotNull
  public static final <K, V> Map<K, V> associateWith(@NotNull Sequence<? extends K> $receiver, @NotNull Function1<? super K, ? extends V> valueSelector)
  {
    ;
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(valueSelector, "valueSelector");java.util.LinkedHashMap result = new java.util.LinkedHashMap();
    Sequence $receiver$iv = $receiver;
    
































































































































































































































































































































































































































































































































































































































































    int $i$f$associateWithTo;
    
































































































































































































































































































































































































































































































































































































































































    for (Object element$iv : $receiver$iv) {
      ((Map)result).put(element$iv, valueSelector.invoke(element$iv));
    }
    return (Map)result;
  }
  
  @NotNull
  public static final <T, K> Map<K, List<T>> groupBy(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, ? extends K> keySelector)
  {
    ;
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");Sequence localSequence1 = $receiver;Map destination$iv = (Map)new java.util.LinkedHashMap();
    










































































































































































































































































































































































































    int $i$f$groupByTo;
    









































































































































































































































































































































































































    Sequence $receiver$iv;
    









































































































































































































































































































































































































    for (Object element$iv : $receiver$iv) {
      Object key$iv = keySelector.invoke(element$iv);
      Map $receiver$iv$iv = destination$iv;
      int $i$f$getOrPut; Object value$iv$iv = $receiver$iv$iv.get(key$iv);
      int $i$a$1$getOrPut;
      Object answer$iv$iv = new java.util.ArrayList();
      


      $receiver$iv$iv.put(key$iv, answer$iv$iv);List list$iv = (List)(value$iv$iv == null ? 
        answer$iv$iv : 
        
        value$iv$iv);
      list$iv.add(element$iv);
    }
    return destination$iv;
  }
  
  @NotNull
  public static final <T, K, V> Map<K, List<V>> groupBy(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, ? extends K> keySelector, @NotNull Function1<? super T, ? extends V> valueTransform)
  {
    ;
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");Intrinsics.checkParameterIsNotNull(valueTransform, "valueTransform");Sequence localSequence1 = $receiver;Map destination$iv = (Map)new java.util.LinkedHashMap();
    









































































































































































































































































































































































































    int $i$f$groupByTo;
    









































































































































































































































































































































































































    Sequence $receiver$iv;
    








































































































































































































































































































































































































    for (Object element$iv : $receiver$iv) {
      Object key$iv = keySelector.invoke(element$iv);
      Map $receiver$iv$iv = destination$iv;
      int $i$f$getOrPut; Object value$iv$iv = $receiver$iv$iv.get(key$iv);
      int $i$a$2$getOrPut;
      Object answer$iv$iv = new java.util.ArrayList();
      


      $receiver$iv$iv.put(key$iv, answer$iv$iv);List list$iv = (List)(value$iv$iv == null ? 
        answer$iv$iv : 
        
        value$iv$iv);
      list$iv.add(valueTransform.invoke(element$iv));
    }
    return destination$iv;
  }
  
  /* Error */
  @kotlin.internal.InlineOnly
  private static final <T> T find(@NotNull Sequence<? extends T> $receiver, Function1<? super T, Boolean> predicate)
  {
    // Byte code:
    //   0: aload_0
    //   1: astore_3
    //   2: aload_3
    //   3: invokeinterface 59 1 0
    //   8: astore 4
    //   10: aload 4
    //   12: invokeinterface 65 1 0
    //   17: ifeq +37 -> 54
    //   20: aload 4
    //   22: invokeinterface 69 1 0
    //   27: astore 5
    //   29: aload_1
    //   30: aload 5
    //   32: invokeinterface 53 2 0
    //   37: checkcast 81	java/lang/Boolean
    //   40: invokevirtual 84	java/lang/Boolean:booleanValue	()Z
    //   43: ifeq -33 -> 10
    //   46: aload 5
    //   48: goto +7 -> 55
    //   51: nop
    //   52: nop
    //   53: athrow
    //   54: aconst_null
    //   55: areturn
    // Line number table:
    //   Java source line #85	-> byte code offset #0
    //   Java source line #1933	-> byte code offset #2
    //   Java source line #1934	-> byte code offset #54
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	56	0	$receiver	Sequence
    //   0	56	1	predicate	Function1
    //   0	56	2	$i$f$find	int
    //   2	53	3	$receiver$iv	Sequence
    //   29	22	5	element$iv	Object
    //   2	53	6	$i$f$firstOrNull	int
  }
  
  /* Error */
  public static final <T> T first(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Boolean> predicate)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc 9
    //   3: invokestatic 15	kotlin/jvm/internal/Intrinsics:checkParameterIsNotNull	(Ljava/lang/Object;Ljava/lang/String;)V
    //   6: aload_1
    //   7: ldc 105
    //   9: invokestatic 15	kotlin/jvm/internal/Intrinsics:checkParameterIsNotNull	(Ljava/lang/Object;Ljava/lang/String;)V
    //   12: aload_0
    //   13: invokeinterface 59 1 0
    //   18: astore 4
    //   20: aload 4
    //   22: invokeinterface 65 1 0
    //   27: ifeq +32 -> 59
    //   30: aload 4
    //   32: invokeinterface 69 1 0
    //   37: astore_3
    //   38: aload_1
    //   39: aload_3
    //   40: invokeinterface 53 2 0
    //   45: checkcast 81	java/lang/Boolean
    //   48: invokevirtual 84	java/lang/Boolean:booleanValue	()Z
    //   51: ifeq -31 -> 20
    //   54: aload_3
    //   55: areturn
    //   56: nop
    //   57: nop
    //   58: athrow
    //   59: new 99	java/util/NoSuchElementException
    //   62: dup
    //   63: ldc 107
    //   65: invokespecial 104	java/util/NoSuchElementException:<init>	(Ljava/lang/String;)V
    //   68: checkcast 91	java/lang/Throwable
    //   71: athrow
    // Line number table:
    //   Java source line #118	-> byte code offset #12
    //   Java source line #119	-> byte code offset #59
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	72	0	$receiver	Sequence
    //   0	72	1	predicate	Function1
    //   0	72	2	$i$f$first	int
    //   38	18	3	element	Object
  }
  
  /* Error */
  @Nullable
  public static final <T> T firstOrNull(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Boolean> predicate)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc 9
    //   3: invokestatic 15	kotlin/jvm/internal/Intrinsics:checkParameterIsNotNull	(Ljava/lang/Object;Ljava/lang/String;)V
    //   6: aload_1
    //   7: ldc 105
    //   9: invokestatic 15	kotlin/jvm/internal/Intrinsics:checkParameterIsNotNull	(Ljava/lang/Object;Ljava/lang/String;)V
    //   12: aload_0
    //   13: invokeinterface 59 1 0
    //   18: astore 4
    //   20: aload 4
    //   22: invokeinterface 65 1 0
    //   27: ifeq +32 -> 59
    //   30: aload 4
    //   32: invokeinterface 69 1 0
    //   37: astore_3
    //   38: aload_1
    //   39: aload_3
    //   40: invokeinterface 53 2 0
    //   45: checkcast 81	java/lang/Boolean
    //   48: invokevirtual 84	java/lang/Boolean:booleanValue	()Z
    //   51: ifeq -31 -> 20
    //   54: aload_3
    //   55: areturn
    //   56: nop
    //   57: nop
    //   58: athrow
    //   59: aconst_null
    //   60: areturn
    // Line number table:
    //   Java source line #140	-> byte code offset #12
    //   Java source line #141	-> byte code offset #59
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	61	0	$receiver	Sequence
    //   0	61	1	predicate	Function1
    //   0	61	2	$i$f$firstOrNull	int
    //   38	18	3	element	Object
  }
  
  /* Error */
  @NotNull
  public static final <T, R, C extends Collection<? super R>> C mapIndexedNotNullTo(@NotNull Sequence<? extends T> $receiver, @NotNull C destination, @NotNull Function2<? super Integer, ? super T, ? extends R> transform)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc 9
    //   3: invokestatic 15	kotlin/jvm/internal/Intrinsics:checkParameterIsNotNull	(Ljava/lang/Object;Ljava/lang/String;)V
    //   6: aload_1
    //   7: ldc -29
    //   9: invokestatic 15	kotlin/jvm/internal/Intrinsics:checkParameterIsNotNull	(Ljava/lang/Object;Ljava/lang/String;)V
    //   12: aload_2
    //   13: ldc_w 345
    //   16: invokestatic 15	kotlin/jvm/internal/Intrinsics:checkParameterIsNotNull	(Ljava/lang/Object;Ljava/lang/String;)V
    //   19: aload_0
    //   20: astore 4
    //   22: iconst_0
    //   23: istore 5
    //   25: aload 4
    //   27: invokeinterface 59 1 0
    //   32: astore 6
    //   34: aload 6
    //   36: invokeinterface 65 1 0
    //   41: ifeq +104 -> 145
    //   44: aload 6
    //   46: invokeinterface 69 1 0
    //   51: astore 7
    //   53: iload 5
    //   55: iinc 5 1
    //   58: istore 8
    //   60: iload 8
    //   62: ifge +31 -> 93
    //   65: iconst_1
    //   66: iconst_3
    //   67: iconst_0
    //   68: invokestatic 128	kotlin/internal/PlatformImplementationsKt:apiVersionIsAtLeast	(III)Z
    //   71: ifeq +9 -> 80
    //   74: invokestatic 115	kotlin/collections/CollectionsKt:throwIndexOverflow	()V
    //   77: goto +16 -> 93
    //   80: new 130	java/lang/ArithmeticException
    //   83: dup
    //   84: ldc -124
    //   86: invokespecial 133	java/lang/ArithmeticException:<init>	(Ljava/lang/String;)V
    //   89: checkcast 91	java/lang/Throwable
    //   92: athrow
    //   93: iload 8
    //   95: istore 9
    //   97: iload 9
    //   99: aload 7
    //   101: astore 10
    //   103: istore 11
    //   105: aload_2
    //   106: iload 11
    //   108: invokestatic 49	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   111: aload 10
    //   113: invokeinterface 232 3 0
    //   118: dup
    //   119: ifnull +21 -> 140
    //   122: astore 12
    //   124: aload 12
    //   126: astore 13
    //   128: aload_1
    //   129: aload 13
    //   131: invokeinterface 238 2 0
    //   136: pop
    //   137: goto +4 -> 141
    //   140: pop
    //   141: nop
    //   142: goto -108 -> 34
    //   145: nop
    //   146: aload_1
    //   147: areturn
    // Line number table:
    //   Java source line #891	-> byte code offset #19
    //   Java source line #2001	-> byte code offset #22
    //   Java source line #2002	-> byte code offset #25
    //   Java source line #2002	-> byte code offset #99
    //   Java source line #891	-> byte code offset #105
    //   Java source line #891	-> byte code offset #128
    //   Java source line #891	-> byte code offset #137
    //   Java source line #891	-> byte code offset #141
    //   Java source line #2003	-> byte code offset #145
    //   Java source line #892	-> byte code offset #146
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	148	0	$receiver	Sequence
    //   0	148	1	destination	Collection
    //   0	148	2	transform	Function2
    //   0	148	3	$i$f$mapIndexedNotNullTo	int
    //   22	124	4	$receiver$iv	Sequence
    //   25	121	5	index$iv	int
    //   53	89	7	item$iv	Object
    //   105	36	10	element	Object
    //   105	36	11	index	int
    //   128	8	13	it	Object
    //   128	8	14	$i$a$1$let	int
    //   105	36	15	$i$a$1$forEachIndexed	int
    //   22	124	16	$i$f$forEachIndexed	int
  }
  
  /* Error */
  @NotNull
  public static final <T, R, C extends Collection<? super R>> C mapNotNullTo(@NotNull Sequence<? extends T> $receiver, @NotNull C destination, @NotNull Function1<? super T, ? extends R> transform)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc 9
    //   3: invokestatic 15	kotlin/jvm/internal/Intrinsics:checkParameterIsNotNull	(Ljava/lang/Object;Ljava/lang/String;)V
    //   6: aload_1
    //   7: ldc -29
    //   9: invokestatic 15	kotlin/jvm/internal/Intrinsics:checkParameterIsNotNull	(Ljava/lang/Object;Ljava/lang/String;)V
    //   12: aload_2
    //   13: ldc_w 345
    //   16: invokestatic 15	kotlin/jvm/internal/Intrinsics:checkParameterIsNotNull	(Ljava/lang/Object;Ljava/lang/String;)V
    //   19: aload_0
    //   20: astore 4
    //   22: aload 4
    //   24: invokeinterface 59 1 0
    //   29: astore 5
    //   31: aload 5
    //   33: invokeinterface 65 1 0
    //   38: ifeq +51 -> 89
    //   41: aload 5
    //   43: invokeinterface 69 1 0
    //   48: astore 6
    //   50: aload 6
    //   52: astore 7
    //   54: aload_2
    //   55: aload 7
    //   57: invokeinterface 53 2 0
    //   62: dup
    //   63: ifnull +21 -> 84
    //   66: astore 8
    //   68: aload 8
    //   70: astore 9
    //   72: aload_1
    //   73: aload 9
    //   75: invokeinterface 238 2 0
    //   80: pop
    //   81: goto +4 -> 85
    //   84: pop
    //   85: nop
    //   86: goto -55 -> 31
    //   89: nop
    //   90: aload_1
    //   91: areturn
    // Line number table:
    //   Java source line #927	-> byte code offset #19
    //   Java source line #2004	-> byte code offset #22
    //   Java source line #927	-> byte code offset #54
    //   Java source line #927	-> byte code offset #72
    //   Java source line #927	-> byte code offset #81
    //   Java source line #927	-> byte code offset #85
    //   Java source line #2005	-> byte code offset #89
    //   Java source line #928	-> byte code offset #90
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	92	0	$receiver	Sequence
    //   0	92	1	destination	Collection
    //   0	92	2	transform	Function1
    //   0	92	3	$i$f$mapNotNullTo	int
    //   22	68	4	$receiver$iv	Sequence
    //   50	36	6	element$iv	Object
    //   54	31	7	element	Object
    //   72	8	9	it	Object
    //   72	8	10	$i$a$1$let	int
    //   54	31	11	$i$a$1$forEach	int
    //   22	68	12	$i$f$forEach	int
  }
  
  /* Error */
  public static final <T> boolean all(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Boolean> predicate)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc 9
    //   3: invokestatic 15	kotlin/jvm/internal/Intrinsics:checkParameterIsNotNull	(Ljava/lang/Object;Ljava/lang/String;)V
    //   6: aload_1
    //   7: ldc 105
    //   9: invokestatic 15	kotlin/jvm/internal/Intrinsics:checkParameterIsNotNull	(Ljava/lang/Object;Ljava/lang/String;)V
    //   12: aload_0
    //   13: invokeinterface 59 1 0
    //   18: astore 4
    //   20: aload 4
    //   22: invokeinterface 65 1 0
    //   27: ifeq +32 -> 59
    //   30: aload 4
    //   32: invokeinterface 69 1 0
    //   37: astore_3
    //   38: aload_1
    //   39: aload_3
    //   40: invokeinterface 53 2 0
    //   45: checkcast 81	java/lang/Boolean
    //   48: invokevirtual 84	java/lang/Boolean:booleanValue	()Z
    //   51: ifne -31 -> 20
    //   54: iconst_0
    //   55: ireturn
    //   56: nop
    //   57: nop
    //   58: athrow
    //   59: iconst_1
    //   60: ireturn
    // Line number table:
    //   Java source line #996	-> byte code offset #12
    //   Java source line #997	-> byte code offset #59
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	61	0	$receiver	Sequence
    //   0	61	1	predicate	Function1
    //   0	61	2	$i$f$all	int
    //   38	18	3	element	Object
  }
  
  /* Error */
  public static final <T> boolean any(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Boolean> predicate)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc 9
    //   3: invokestatic 15	kotlin/jvm/internal/Intrinsics:checkParameterIsNotNull	(Ljava/lang/Object;Ljava/lang/String;)V
    //   6: aload_1
    //   7: ldc 105
    //   9: invokestatic 15	kotlin/jvm/internal/Intrinsics:checkParameterIsNotNull	(Ljava/lang/Object;Ljava/lang/String;)V
    //   12: aload_0
    //   13: invokeinterface 59 1 0
    //   18: astore 4
    //   20: aload 4
    //   22: invokeinterface 65 1 0
    //   27: ifeq +32 -> 59
    //   30: aload 4
    //   32: invokeinterface 69 1 0
    //   37: astore_3
    //   38: aload_1
    //   39: aload_3
    //   40: invokeinterface 53 2 0
    //   45: checkcast 81	java/lang/Boolean
    //   48: invokevirtual 84	java/lang/Boolean:booleanValue	()Z
    //   51: ifeq -31 -> 20
    //   54: iconst_1
    //   55: ireturn
    //   56: nop
    //   57: nop
    //   58: athrow
    //   59: iconst_0
    //   60: ireturn
    // Line number table:
    //   Java source line #1019	-> byte code offset #12
    //   Java source line #1020	-> byte code offset #59
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	61	0	$receiver	Sequence
    //   0	61	1	predicate	Function1
    //   0	61	2	$i$f$any	int
    //   38	18	3	element	Object
  }
  
  /* Error */
  public static final <T> boolean none(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Boolean> predicate)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc 9
    //   3: invokestatic 15	kotlin/jvm/internal/Intrinsics:checkParameterIsNotNull	(Ljava/lang/Object;Ljava/lang/String;)V
    //   6: aload_1
    //   7: ldc 105
    //   9: invokestatic 15	kotlin/jvm/internal/Intrinsics:checkParameterIsNotNull	(Ljava/lang/Object;Ljava/lang/String;)V
    //   12: aload_0
    //   13: invokeinterface 59 1 0
    //   18: astore 4
    //   20: aload 4
    //   22: invokeinterface 65 1 0
    //   27: ifeq +32 -> 59
    //   30: aload 4
    //   32: invokeinterface 69 1 0
    //   37: astore_3
    //   38: aload_1
    //   39: aload_3
    //   40: invokeinterface 53 2 0
    //   45: checkcast 81	java/lang/Boolean
    //   48: invokevirtual 84	java/lang/Boolean:booleanValue	()Z
    //   51: ifeq -31 -> 20
    //   54: iconst_0
    //   55: ireturn
    //   56: nop
    //   57: nop
    //   58: athrow
    //   59: iconst_1
    //   60: ireturn
    // Line number table:
    //   Java source line #1305	-> byte code offset #12
    //   Java source line #1306	-> byte code offset #59
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	61	0	$receiver	Sequence
    //   0	61	1	predicate	Function1
    //   0	61	2	$i$f$none	int
    //   38	18	3	element	Object
  }
  
  public SequencesKt___SequencesKt() {}
}
