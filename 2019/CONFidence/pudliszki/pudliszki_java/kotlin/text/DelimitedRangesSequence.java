package kotlin.text;

import java.util.Iterator;
import java.util.NoSuchElementException;
import kotlin.Metadata;
import kotlin.Pair;
import kotlin.TypeCastException;
import kotlin.jvm.functions.Function2;
import kotlin.jvm.internal.markers.KMappedMarker;
import kotlin.ranges.IntRange;
import kotlin.ranges.RangesKt;
import kotlin.sequences.Sequence;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;












































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































@Metadata(mv={1, 1, 13}, bv={1, 0, 3}, k=1, d1={"\000:\n\002\030\002\n\002\030\002\n\002\030\002\n\000\n\002\020\r\n\000\n\002\020\b\n\002\b\002\n\002\030\002\n\002\030\002\n\002\b\002\n\002\030\002\n\002\030\002\n\002\b\002\n\002\020(\n\000\b\002\030\0002\b\022\004\022\0020\0020\001BY\022\006\020\003\032\0020\004\022\006\020\005\032\0020\006\022\006\020\007\032\0020\006\022:\020\b\0326\022\004\022\0020\004\022\023\022\0210\006¢\006\f\b\n\022\b\b\013\022\004\b\b(\f\022\022\022\020\022\004\022\0020\006\022\004\022\0020\006\030\0010\r0\t¢\006\002\b\016¢\006\002\020\017J\017\020\020\032\b\022\004\022\0020\0020\021H\002RB\020\b\0326\022\004\022\0020\004\022\023\022\0210\006¢\006\f\b\n\022\b\b\013\022\004\b\b(\f\022\022\022\020\022\004\022\0020\006\022\004\022\0020\006\030\0010\r0\t¢\006\002\b\016X\004¢\006\002\n\000R\016\020\003\032\0020\004X\004¢\006\002\n\000R\016\020\007\032\0020\006X\004¢\006\002\n\000R\016\020\005\032\0020\006X\004¢\006\002\n\000¨\006\022"}, d2={"Lkotlin/text/DelimitedRangesSequence;", "Lkotlin/sequences/Sequence;", "Lkotlin/ranges/IntRange;", "input", "", "startIndex", "", "limit", "getNextMatch", "Lkotlin/Function2;", "Lkotlin/ParameterName;", "name", "currentIndex", "Lkotlin/Pair;", "Lkotlin/ExtensionFunctionType;", "(Ljava/lang/CharSequence;IILkotlin/jvm/functions/Function2;)V", "iterator", "", "kotlin-stdlib"})
final class DelimitedRangesSequence
  implements Sequence<IntRange>
{
  private final CharSequence input;
  private final int startIndex;
  private final int limit;
  private final Function2<CharSequence, Integer, Pair<Integer, Integer>> getNextMatch;
  
  public DelimitedRangesSequence(@NotNull CharSequence input, int startIndex, int limit, @NotNull Function2<? super CharSequence, ? super Integer, Pair<Integer, Integer>> getNextMatch)
  {
    this.input = input;this.startIndex = startIndex;this.limit = limit;this.getNextMatch = getNextMatch;
  }
  

















































  @NotNull
  public Iterator<IntRange> iterator()
  {
    (Iterator)new Iterator()
    {
      private int nextState;
      private int currentStartIndex;
      private int nextSearchIndex;
      @Nullable
      private IntRange nextItem;
      private int counter;
      
      public final int getNextState() { return nextState; } public final void setNextState(int <set-?>) { nextState = <set-?>; }
      public final int getCurrentStartIndex() { return currentStartIndex; } public final void setCurrentStartIndex(int <set-?>) { currentStartIndex = <set-?>; }
      public final int getNextSearchIndex() { return nextSearchIndex; } public final void setNextSearchIndex(int <set-?>) { nextSearchIndex = <set-?>; } @Nullable
      public final IntRange getNextItem() { return nextItem; } public final void setNextItem(@Nullable IntRange <set-?>) { nextItem = <set-?>; }
      public final int getCounter() { return counter; } public final void setCounter(int <set-?>) { counter = <set-?>; }
      
      private final void calcNext() {
        if (nextSearchIndex < 0) {
          nextState = 0;
          nextItem = ((IntRange)null);
        } else {
          if (DelimitedRangesSequence.access$getLimit$p(this$0) > 0) { counter += 1; if (counter >= DelimitedRangesSequence.access$getLimit$p(this$0)) {} } else { if (nextSearchIndex <= DelimitedRangesSequence.access$getInput$p(this$0).length()) break label111; }
          int i = currentStartIndex;nextItem = new IntRange(i, StringsKt.getLastIndex(DelimitedRangesSequence.access$getInput$p(this$0)));
          nextSearchIndex = -1;
          break label244;
          label111: Pair match = (Pair)DelimitedRangesSequence.access$getGetNextMatch$p(this$0).invoke(DelimitedRangesSequence.access$getInput$p(this$0), Integer.valueOf(nextSearchIndex));
          int j; if (match == null) {
            j = currentStartIndex;nextItem = new IntRange(j, StringsKt.getLastIndex(DelimitedRangesSequence.access$getInput$p(this$0)));
            nextSearchIndex = -1;
          } else {
            Pair localPair1 = match;j = ((Number)localPair1.component1()).intValue();int length = ((Number)localPair1.component2()).intValue();
            int index; nextItem = RangesKt.until(currentStartIndex, index);
            currentStartIndex = (index + length);
            nextSearchIndex = (currentStartIndex + (length == 0 ? 1 : 0));
          }
          label244:
          nextState = 1;
        }
      }
      
      @NotNull
      public IntRange next() { if (nextState == -1)
          calcNext();
        if (nextState == 0)
          throw ((Throwable)new NoSuchElementException());
        IntRange tmp34_31 = nextItem;
        















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































        if (tmp34_31 == null) throw new TypeCastException("null cannot be cast to non-null type kotlin.ranges.IntRange"); IntRange result = tmp34_31;
        
        nextItem = ((IntRange)null);
        nextState = -1;
        return result;
      }
      
      public boolean hasNext() {
        if (nextState == -1)
          calcNext();
        return nextState == 1;
      }
      
      public void remove()
      {
        throw new UnsupportedOperationException("Operation is not supported for read-only collection");
      }
    };
  }
}
