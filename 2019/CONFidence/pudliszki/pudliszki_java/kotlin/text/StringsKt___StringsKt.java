package kotlin.text;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import kotlin.Pair;
import kotlin.SinceKotlin;
import kotlin.internal.InlineOnly;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.functions.Function2;
import kotlin.jvm.functions.Function3;
import kotlin.jvm.internal.Intrinsics;
import kotlin.ranges.RangesKt;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@kotlin.Metadata(mv={1, 1, 13}, bv={1, 0, 3}, k=5, xi=1, d1={"\000Ü\001\n\000\n\002\020\013\n\002\020\r\n\000\n\002\030\002\n\002\020\f\n\002\b\002\n\002\020\034\n\000\n\002\030\002\n\000\n\002\020$\n\002\b\003\n\002\030\002\n\002\b\005\n\002\020%\n\002\b\b\n\002\020 \n\002\020\016\n\000\n\002\020\b\n\002\b\020\n\002\030\002\n\002\030\002\n\002\b\003\n\002\030\002\n\002\030\002\n\002\b\r\n\002\020\037\n\002\b\007\n\002\030\002\n\002\b\004\n\002\020\002\n\002\b\006\n\002\020!\n\000\n\002\030\002\n\002\b\007\n\002\020\000\n\002\b\b\n\002\020\017\n\002\b\003\n\002\030\002\n\002\030\002\n\002\b\n\n\002\030\002\n\002\b\t\n\002\030\002\n\002\b\002\n\002\020\006\n\002\b\007\n\002\030\002\n\002\030\002\n\002\b\003\n\002\020\"\n\002\b\005\n\002\030\002\n\002\b\006\032!\020\000\032\0020\001*\0020\0022\022\020\003\032\016\022\004\022\0020\005\022\004\022\0020\0010\004H\b\032\n\020\006\032\0020\001*\0020\002\032!\020\006\032\0020\001*\0020\0022\022\020\003\032\016\022\004\022\0020\005\022\004\022\0020\0010\004H\b\032\020\020\007\032\b\022\004\022\0020\0050\b*\0020\002\032\020\020\t\032\b\022\004\022\0020\0050\n*\0020\002\032E\020\013\032\016\022\004\022\002H\r\022\004\022\002H\0160\f\"\004\b\000\020\r\"\004\b\001\020\016*\0020\0022\036\020\017\032\032\022\004\022\0020\005\022\020\022\016\022\004\022\002H\r\022\004\022\002H\0160\0200\004H\b\0323\020\021\032\016\022\004\022\002H\r\022\004\022\0020\0050\f\"\004\b\000\020\r*\0020\0022\022\020\022\032\016\022\004\022\0020\005\022\004\022\002H\r0\004H\b\032M\020\021\032\016\022\004\022\002H\r\022\004\022\002H\0160\f\"\004\b\000\020\r\"\004\b\001\020\016*\0020\0022\022\020\022\032\016\022\004\022\0020\005\022\004\022\002H\r0\0042\022\020\023\032\016\022\004\022\0020\005\022\004\022\002H\0160\004H\b\032N\020\024\032\002H\025\"\004\b\000\020\r\"\030\b\001\020\025*\022\022\006\b\000\022\002H\r\022\006\b\000\022\0020\0050\026*\0020\0022\006\020\027\032\002H\0252\022\020\022\032\016\022\004\022\0020\005\022\004\022\002H\r0\004H\b¢\006\002\020\030\032h\020\024\032\002H\025\"\004\b\000\020\r\"\004\b\001\020\016\"\030\b\002\020\025*\022\022\006\b\000\022\002H\r\022\006\b\000\022\002H\0160\026*\0020\0022\006\020\027\032\002H\0252\022\020\022\032\016\022\004\022\0020\005\022\004\022\002H\r0\0042\022\020\023\032\016\022\004\022\0020\005\022\004\022\002H\0160\004H\b¢\006\002\020\031\032`\020\032\032\002H\025\"\004\b\000\020\r\"\004\b\001\020\016\"\030\b\002\020\025*\022\022\006\b\000\022\002H\r\022\006\b\000\022\002H\0160\026*\0020\0022\006\020\027\032\002H\0252\036\020\017\032\032\022\004\022\0020\005\022\020\022\016\022\004\022\002H\r\022\004\022\002H\0160\0200\004H\b¢\006\002\020\030\0323\020\033\032\016\022\004\022\0020\005\022\004\022\002H\0160\f\"\004\b\000\020\016*\0020\0022\022\020\034\032\016\022\004\022\0020\005\022\004\022\002H\0160\004H\b\032N\020\035\032\002H\025\"\004\b\000\020\016\"\030\b\001\020\025*\022\022\006\b\000\022\0020\005\022\006\b\000\022\002H\0160\026*\0020\0022\006\020\027\032\002H\0252\022\020\034\032\016\022\004\022\0020\005\022\004\022\002H\0160\004H\b¢\006\002\020\030\032\032\020\036\032\b\022\004\022\0020 0\037*\0020\0022\006\020!\032\0020\"H\007\0324\020\036\032\b\022\004\022\002H#0\037\"\004\b\000\020#*\0020\0022\006\020!\032\0020\"2\022\020\017\032\016\022\004\022\0020\002\022\004\022\002H#0\004H\007\032\032\020$\032\b\022\004\022\0020 0\n*\0020\0022\006\020!\032\0020\"H\007\0324\020$\032\b\022\004\022\002H#0\n\"\004\b\000\020#*\0020\0022\006\020!\032\0020\"2\022\020\017\032\016\022\004\022\0020\002\022\004\022\002H#0\004H\007\032\r\020%\032\0020\"*\0020\002H\b\032!\020%\032\0020\"*\0020\0022\022\020\003\032\016\022\004\022\0020\005\022\004\022\0020\0010\004H\b\032\022\020&\032\0020\002*\0020\0022\006\020'\032\0020\"\032\022\020&\032\0020 *\0020 2\006\020'\032\0020\"\032\022\020(\032\0020\002*\0020\0022\006\020'\032\0020\"\032\022\020(\032\0020 *\0020 2\006\020'\032\0020\"\032!\020)\032\0020\002*\0020\0022\022\020\003\032\016\022\004\022\0020\005\022\004\022\0020\0010\004H\b\032!\020)\032\0020 *\0020 2\022\020\003\032\016\022\004\022\0020\005\022\004\022\0020\0010\004H\b\032!\020*\032\0020\002*\0020\0022\022\020\003\032\016\022\004\022\0020\005\022\004\022\0020\0010\004H\b\032!\020*\032\0020 *\0020 2\022\020\003\032\016\022\004\022\0020\005\022\004\022\0020\0010\004H\b\032\025\020+\032\0020\005*\0020\0022\006\020,\032\0020\"H\b\032)\020-\032\0020\005*\0020\0022\006\020,\032\0020\"2\022\020.\032\016\022\004\022\0020\"\022\004\022\0020\0050\004H\b\032\034\020/\032\004\030\0010\005*\0020\0022\006\020,\032\0020\"H\b¢\006\002\0200\032!\0201\032\0020\002*\0020\0022\022\020\003\032\016\022\004\022\0020\005\022\004\022\0020\0010\004H\b\032!\0201\032\0020 *\0020 2\022\020\003\032\016\022\004\022\0020\005\022\004\022\0020\0010\004H\b\0326\0202\032\0020\002*\0020\0022'\020\003\032#\022\023\022\0210\"¢\006\f\b4\022\b\b5\022\004\b\b(,\022\004\022\0020\005\022\004\022\0020\00103H\b\0326\0202\032\0020 *\0020 2'\020\003\032#\022\023\022\0210\"¢\006\f\b4\022\b\b5\022\004\b\b(,\022\004\022\0020\005\022\004\022\0020\00103H\b\032Q\0206\032\002H7\"\f\b\000\0207*\00608j\002`9*\0020\0022\006\020\027\032\002H72'\020\003\032#\022\023\022\0210\"¢\006\f\b4\022\b\b5\022\004\b\b(,\022\004\022\0020\005\022\004\022\0020\00103H\b¢\006\002\020:\032!\020;\032\0020\002*\0020\0022\022\020\003\032\016\022\004\022\0020\005\022\004\022\0020\0010\004H\b\032!\020;\032\0020 *\0020 2\022\020\003\032\016\022\004\022\0020\005\022\004\022\0020\0010\004H\b\032<\020<\032\002H7\"\f\b\000\0207*\00608j\002`9*\0020\0022\006\020\027\032\002H72\022\020\003\032\016\022\004\022\0020\005\022\004\022\0020\0010\004H\b¢\006\002\020=\032<\020>\032\002H7\"\f\b\000\0207*\00608j\002`9*\0020\0022\006\020\027\032\002H72\022\020\003\032\016\022\004\022\0020\005\022\004\022\0020\0010\004H\b¢\006\002\020=\032(\020?\032\004\030\0010\005*\0020\0022\022\020\003\032\016\022\004\022\0020\005\022\004\022\0020\0010\004H\b¢\006\002\020@\032(\020A\032\004\030\0010\005*\0020\0022\022\020\003\032\016\022\004\022\0020\005\022\004\022\0020\0010\004H\b¢\006\002\020@\032\n\020B\032\0020\005*\0020\002\032!\020B\032\0020\005*\0020\0022\022\020\003\032\016\022\004\022\0020\005\022\004\022\0020\0010\004H\b\032\021\020C\032\004\030\0010\005*\0020\002¢\006\002\020D\032(\020C\032\004\030\0010\005*\0020\0022\022\020\003\032\016\022\004\022\0020\005\022\004\022\0020\0010\004H\b¢\006\002\020@\0323\020E\032\b\022\004\022\002H#0\037\"\004\b\000\020#*\0020\0022\030\020\017\032\024\022\004\022\0020\005\022\n\022\b\022\004\022\002H#0\b0\004H\b\032L\020F\032\002H7\"\004\b\000\020#\"\020\b\001\0207*\n\022\006\b\000\022\002H#0G*\0020\0022\006\020\027\032\002H72\030\020\017\032\024\022\004\022\0020\005\022\n\022\b\022\004\022\002H#0\b0\004H\b¢\006\002\020H\032I\020I\032\002H#\"\004\b\000\020#*\0020\0022\006\020J\032\002H#2'\020K\032#\022\023\022\021H#¢\006\f\b4\022\b\b5\022\004\b\b(L\022\004\022\0020\005\022\004\022\002H#03H\b¢\006\002\020M\032^\020N\032\002H#\"\004\b\000\020#*\0020\0022\006\020J\032\002H#2<\020K\0328\022\023\022\0210\"¢\006\f\b4\022\b\b5\022\004\b\b(,\022\023\022\021H#¢\006\f\b4\022\b\b5\022\004\b\b(L\022\004\022\0020\005\022\004\022\002H#0OH\b¢\006\002\020P\032I\020Q\032\002H#\"\004\b\000\020#*\0020\0022\006\020J\032\002H#2'\020K\032#\022\004\022\0020\005\022\023\022\021H#¢\006\f\b4\022\b\b5\022\004\b\b(L\022\004\022\002H#03H\b¢\006\002\020M\032^\020R\032\002H#\"\004\b\000\020#*\0020\0022\006\020J\032\002H#2<\020K\0328\022\023\022\0210\"¢\006\f\b4\022\b\b5\022\004\b\b(,\022\004\022\0020\005\022\023\022\021H#¢\006\f\b4\022\b\b5\022\004\b\b(L\022\004\022\002H#0OH\b¢\006\002\020P\032!\020S\032\0020T*\0020\0022\022\020U\032\016\022\004\022\0020\005\022\004\022\0020T0\004H\b\0326\020V\032\0020T*\0020\0022'\020U\032#\022\023\022\0210\"¢\006\f\b4\022\b\b5\022\004\b\b(,\022\004\022\0020\005\022\004\022\0020T03H\b\032)\020W\032\0020\005*\0020\0022\006\020,\032\0020\"2\022\020.\032\016\022\004\022\0020\"\022\004\022\0020\0050\004H\b\032\031\020X\032\004\030\0010\005*\0020\0022\006\020,\032\0020\"¢\006\002\0200\0329\020Y\032\024\022\004\022\002H\r\022\n\022\b\022\004\022\0020\0050\0370\f\"\004\b\000\020\r*\0020\0022\022\020\022\032\016\022\004\022\0020\005\022\004\022\002H\r0\004H\b\032S\020Y\032\024\022\004\022\002H\r\022\n\022\b\022\004\022\002H\0160\0370\f\"\004\b\000\020\r\"\004\b\001\020\016*\0020\0022\022\020\022\032\016\022\004\022\0020\005\022\004\022\002H\r0\0042\022\020\023\032\016\022\004\022\0020\005\022\004\022\002H\0160\004H\b\032R\020Z\032\002H\025\"\004\b\000\020\r\"\034\b\001\020\025*\026\022\006\b\000\022\002H\r\022\n\022\b\022\004\022\0020\0050[0\026*\0020\0022\006\020\027\032\002H\0252\022\020\022\032\016\022\004\022\0020\005\022\004\022\002H\r0\004H\b¢\006\002\020\030\032l\020Z\032\002H\025\"\004\b\000\020\r\"\004\b\001\020\016\"\034\b\002\020\025*\026\022\006\b\000\022\002H\r\022\n\022\b\022\004\022\002H\0160[0\026*\0020\0022\006\020\027\032\002H\0252\022\020\022\032\016\022\004\022\0020\005\022\004\022\002H\r0\0042\022\020\023\032\016\022\004\022\0020\005\022\004\022\002H\0160\004H\b¢\006\002\020\031\0325\020\\\032\016\022\004\022\0020\005\022\004\022\002H\r0]\"\004\b\000\020\r*\0020\0022\024\b\004\020\022\032\016\022\004\022\0020\005\022\004\022\002H\r0\004H\b\032!\020^\032\0020\"*\0020\0022\022\020\003\032\016\022\004\022\0020\005\022\004\022\0020\0010\004H\b\032!\020_\032\0020\"*\0020\0022\022\020\003\032\016\022\004\022\0020\005\022\004\022\0020\0010\004H\b\032\n\020`\032\0020\005*\0020\002\032!\020`\032\0020\005*\0020\0022\022\020\003\032\016\022\004\022\0020\005\022\004\022\0020\0010\004H\b\032\021\020a\032\004\030\0010\005*\0020\002¢\006\002\020D\032(\020a\032\004\030\0010\005*\0020\0022\022\020\003\032\016\022\004\022\0020\005\022\004\022\0020\0010\004H\b¢\006\002\020@\032-\020b\032\b\022\004\022\002H#0\037\"\004\b\000\020#*\0020\0022\022\020\017\032\016\022\004\022\0020\005\022\004\022\002H#0\004H\b\032B\020c\032\b\022\004\022\002H#0\037\"\004\b\000\020#*\0020\0022'\020\017\032#\022\023\022\0210\"¢\006\f\b4\022\b\b5\022\004\b\b(,\022\004\022\0020\005\022\004\022\002H#03H\b\032H\020d\032\b\022\004\022\002H#0\037\"\b\b\000\020#*\0020e*\0020\0022)\020\017\032%\022\023\022\0210\"¢\006\f\b4\022\b\b5\022\004\b\b(,\022\004\022\0020\005\022\006\022\004\030\001H#03H\b\032a\020f\032\002H7\"\b\b\000\020#*\0020e\"\020\b\001\0207*\n\022\006\b\000\022\002H#0G*\0020\0022\006\020\027\032\002H72)\020\017\032%\022\023\022\0210\"¢\006\f\b4\022\b\b5\022\004\b\b(,\022\004\022\0020\005\022\006\022\004\030\001H#03H\b¢\006\002\020g\032[\020h\032\002H7\"\004\b\000\020#\"\020\b\001\0207*\n\022\006\b\000\022\002H#0G*\0020\0022\006\020\027\032\002H72'\020\017\032#\022\023\022\0210\"¢\006\f\b4\022\b\b5\022\004\b\b(,\022\004\022\0020\005\022\004\022\002H#03H\b¢\006\002\020g\0323\020i\032\b\022\004\022\002H#0\037\"\b\b\000\020#*\0020e*\0020\0022\024\020\017\032\020\022\004\022\0020\005\022\006\022\004\030\001H#0\004H\b\032L\020j\032\002H7\"\b\b\000\020#*\0020e\"\020\b\001\0207*\n\022\006\b\000\022\002H#0G*\0020\0022\006\020\027\032\002H72\024\020\017\032\020\022\004\022\0020\005\022\006\022\004\030\001H#0\004H\b¢\006\002\020H\032F\020k\032\002H7\"\004\b\000\020#\"\020\b\001\0207*\n\022\006\b\000\022\002H#0G*\0020\0022\006\020\027\032\002H72\022\020\017\032\016\022\004\022\0020\005\022\004\022\002H#0\004H\b¢\006\002\020H\032\021\020l\032\004\030\0010\005*\0020\002¢\006\002\020D\0328\020m\032\004\030\0010\005\"\016\b\000\020#*\b\022\004\022\002H#0n*\0020\0022\022\020o\032\016\022\004\022\0020\005\022\004\022\002H#0\004H\b¢\006\002\020@\032-\020p\032\004\030\0010\005*\0020\0022\032\020q\032\026\022\006\b\000\022\0020\0050rj\n\022\006\b\000\022\0020\005`s¢\006\002\020t\032\021\020u\032\004\030\0010\005*\0020\002¢\006\002\020D\0328\020v\032\004\030\0010\005\"\016\b\000\020#*\b\022\004\022\002H#0n*\0020\0022\022\020o\032\016\022\004\022\0020\005\022\004\022\002H#0\004H\b¢\006\002\020@\032-\020w\032\004\030\0010\005*\0020\0022\032\020q\032\026\022\006\b\000\022\0020\0050rj\n\022\006\b\000\022\0020\005`s¢\006\002\020t\032\n\020x\032\0020\001*\0020\002\032!\020x\032\0020\001*\0020\0022\022\020\003\032\016\022\004\022\0020\005\022\004\022\0020\0010\004H\b\0320\020y\032\002Hz\"\b\b\000\020z*\0020\002*\002Hz2\022\020U\032\016\022\004\022\0020\005\022\004\022\0020T0\004H\b¢\006\002\020{\032-\020|\032\016\022\004\022\0020\002\022\004\022\0020\0020\020*\0020\0022\022\020\003\032\016\022\004\022\0020\005\022\004\022\0020\0010\004H\b\032-\020|\032\016\022\004\022\0020 \022\004\022\0020 0\020*\0020 2\022\020\003\032\016\022\004\022\0020\005\022\004\022\0020\0010\004H\b\032\r\020}\032\0020\005*\0020\002H\b\032\024\020}\032\0020\005*\0020\0022\006\020}\032\0020~H\007\0326\020\032\0020\005*\0020\0022'\020K\032#\022\023\022\0210\005¢\006\f\b4\022\b\b5\022\004\b\b(L\022\004\022\0020\005\022\004\022\0020\00503H\b\032L\020\001\032\0020\005*\0020\0022<\020K\0328\022\023\022\0210\"¢\006\f\b4\022\b\b5\022\004\b\b(,\022\023\022\0210\005¢\006\f\b4\022\b\b5\022\004\b\b(L\022\004\022\0020\005\022\004\022\0020\0050OH\b\0327\020\001\032\0020\005*\0020\0022'\020K\032#\022\004\022\0020\005\022\023\022\0210\005¢\006\f\b4\022\b\b5\022\004\b\b(L\022\004\022\0020\00503H\b\032L\020\001\032\0020\005*\0020\0022<\020K\0328\022\023\022\0210\"¢\006\f\b4\022\b\b5\022\004\b\b(,\022\004\022\0020\005\022\023\022\0210\005¢\006\f\b4\022\b\b5\022\004\b\b(L\022\004\022\0020\0050OH\b\032\013\020\001\032\0020\002*\0020\002\032\016\020\001\032\0020 *\0020 H\b\032\013\020\001\032\0020\005*\0020\002\032\"\020\001\032\0020\005*\0020\0022\022\020\003\032\016\022\004\022\0020\005\022\004\022\0020\0010\004H\b\032\022\020\001\032\004\030\0010\005*\0020\002¢\006\002\020D\032)\020\001\032\004\030\0010\005*\0020\0022\022\020\003\032\016\022\004\022\0020\005\022\004\022\0020\0010\004H\b¢\006\002\020@\032\032\020\001\032\0020\002*\0020\0022\r\020\001\032\b\022\004\022\0020\"0\b\032\025\020\001\032\0020\002*\0020\0022\b\020\001\032\0030\001\032\035\020\001\032\0020 *\0020 2\r\020\001\032\b\022\004\022\0020\"0\bH\b\032\025\020\001\032\0020 *\0020 2\b\020\001\032\0030\001\032\"\020\001\032\0020\"*\0020\0022\022\020o\032\016\022\004\022\0020\005\022\004\022\0020\"0\004H\b\032$\020\001\032\0030\001*\0020\0022\023\020o\032\017\022\004\022\0020\005\022\005\022\0030\0010\004H\b\032\023\020\001\032\0020\002*\0020\0022\006\020'\032\0020\"\032\023\020\001\032\0020 *\0020 2\006\020'\032\0020\"\032\023\020\001\032\0020\002*\0020\0022\006\020'\032\0020\"\032\023\020\001\032\0020 *\0020 2\006\020'\032\0020\"\032\"\020\001\032\0020\002*\0020\0022\022\020\003\032\016\022\004\022\0020\005\022\004\022\0020\0010\004H\b\032\"\020\001\032\0020 *\0020 2\022\020\003\032\016\022\004\022\0020\005\022\004\022\0020\0010\004H\b\032\"\020\001\032\0020\002*\0020\0022\022\020\003\032\016\022\004\022\0020\005\022\004\022\0020\0010\004H\b\032\"\020\001\032\0020 *\0020 2\022\020\003\032\016\022\004\022\0020\005\022\004\022\0020\0010\004H\b\032+\020\001\032\002H7\"\020\b\000\0207*\n\022\006\b\000\022\0020\0050G*\0020\0022\006\020\027\032\002H7¢\006\003\020\001\032\035\020\001\032\024\022\004\022\0020\0050\001j\t\022\004\022\0020\005`\001*\0020\002\032\021\020\001\032\b\022\004\022\0020\0050\037*\0020\002\032\021\020\001\032\b\022\004\022\0020\0050[*\0020\002\032\022\020\001\032\t\022\004\022\0020\0050\001*\0020\002\0321\020\001\032\b\022\004\022\0020 0\037*\0020\0022\006\020!\032\0020\"2\t\b\002\020\001\032\0020\"2\t\b\002\020\001\032\0020\001H\007\032K\020\001\032\b\022\004\022\002H#0\037\"\004\b\000\020#*\0020\0022\006\020!\032\0020\"2\t\b\002\020\001\032\0020\"2\t\b\002\020\001\032\0020\0012\022\020\017\032\016\022\004\022\0020\002\022\004\022\002H#0\004H\007\0321\020\001\032\b\022\004\022\0020 0\n*\0020\0022\006\020!\032\0020\"2\t\b\002\020\001\032\0020\"2\t\b\002\020\001\032\0020\001H\007\032K\020\001\032\b\022\004\022\002H#0\n\"\004\b\000\020#*\0020\0022\006\020!\032\0020\"2\t\b\002\020\001\032\0020\"2\t\b\002\020\001\032\0020\0012\022\020\017\032\016\022\004\022\0020\002\022\004\022\002H#0\004H\007\032\030\020\001\032\017\022\013\022\t\022\004\022\0020\0050\0010\b*\0020\002\032)\020\001\032\024\022\020\022\016\022\004\022\0020\005\022\004\022\0020\0050\0200\037*\0020\0022\007\020 \001\032\0020\002H\004\032]\020\001\032\b\022\004\022\002H\0160\037\"\004\b\000\020\016*\0020\0022\007\020 \001\032\0020\00228\020\017\0324\022\024\022\0220\005¢\006\r\b4\022\t\b5\022\005\b\b(¡\001\022\024\022\0220\005¢\006\r\b4\022\t\b5\022\005\b\b(¢\001\022\004\022\002H\01603H\b\032\037\020£\001\032\024\022\020\022\016\022\004\022\0020\005\022\004\022\0020\0050\0200\037*\0020\002H\007\032T\020£\001\032\b\022\004\022\002H#0\037\"\004\b\000\020#*\0020\00228\020\017\0324\022\024\022\0220\005¢\006\r\b4\022\t\b5\022\005\b\b(¡\001\022\024\022\0220\005¢\006\r\b4\022\t\b5\022\005\b\b(¢\001\022\004\022\002H#03H\b¨\006¤\001"}, d2={"all", "", "", "predicate", "Lkotlin/Function1;", "", "any", "asIterable", "", "asSequence", "Lkotlin/sequences/Sequence;", "associate", "", "K", "V", "transform", "Lkotlin/Pair;", "associateBy", "keySelector", "valueTransform", "associateByTo", "M", "", "destination", "(Ljava/lang/CharSequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "(Ljava/lang/CharSequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "associateTo", "associateWith", "valueSelector", "associateWithTo", "chunked", "", "", "size", "", "R", "chunkedSequence", "count", "drop", "n", "dropLast", "dropLastWhile", "dropWhile", "elementAt", "index", "elementAtOrElse", "defaultValue", "elementAtOrNull", "(Ljava/lang/CharSequence;I)Ljava/lang/Character;", "filter", "filterIndexed", "Lkotlin/Function2;", "Lkotlin/ParameterName;", "name", "filterIndexedTo", "C", "Ljava/lang/Appendable;", "Lkotlin/text/Appendable;", "(Ljava/lang/CharSequence;Ljava/lang/Appendable;Lkotlin/jvm/functions/Function2;)Ljava/lang/Appendable;", "filterNot", "filterNotTo", "(Ljava/lang/CharSequence;Ljava/lang/Appendable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "filterTo", "find", "(Ljava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Character;", "findLast", "first", "firstOrNull", "(Ljava/lang/CharSequence;)Ljava/lang/Character;", "flatMap", "flatMapTo", "", "(Ljava/lang/CharSequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "fold", "initial", "operation", "acc", "(Ljava/lang/CharSequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "foldIndexed", "Lkotlin/Function3;", "(Ljava/lang/CharSequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "foldRight", "foldRightIndexed", "forEach", "", "action", "forEachIndexed", "getOrElse", "getOrNull", "groupBy", "groupByTo", "", "groupingBy", "Lkotlin/collections/Grouping;", "indexOfFirst", "indexOfLast", "last", "lastOrNull", "map", "mapIndexed", "mapIndexedNotNull", "", "mapIndexedNotNullTo", "(Ljava/lang/CharSequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "mapIndexedTo", "mapNotNull", "mapNotNullTo", "mapTo", "max", "maxBy", "", "selector", "maxWith", "comparator", "Ljava/util/Comparator;", "Lkotlin/Comparator;", "(Ljava/lang/CharSequence;Ljava/util/Comparator;)Ljava/lang/Character;", "min", "minBy", "minWith", "none", "onEach", "S", "(Ljava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/CharSequence;", "partition", "random", "Lkotlin/random/Random;", "reduce", "reduceIndexed", "reduceRight", "reduceRightIndexed", "reversed", "single", "singleOrNull", "slice", "indices", "Lkotlin/ranges/IntRange;", "sumBy", "sumByDouble", "", "take", "takeLast", "takeLastWhile", "takeWhile", "toCollection", "(Ljava/lang/CharSequence;Ljava/util/Collection;)Ljava/util/Collection;", "toHashSet", "Ljava/util/HashSet;", "Lkotlin/collections/HashSet;", "toList", "toMutableList", "toSet", "", "windowed", "step", "partialWindows", "windowedSequence", "withIndex", "Lkotlin/collections/IndexedValue;", "zip", "other", "a", "b", "zipWithNext", "kotlin-stdlib"}, xs="kotlin/text/StringsKt")
class StringsKt___StringsKt extends StringsKt___StringsJvmKt
{
  @InlineOnly
  private static final char elementAt(@NotNull CharSequence $receiver, int index)
  {
    ;
    return $receiver.charAt(index);
  }
  


  @InlineOnly
  private static final char elementAtOrElse(@NotNull CharSequence $receiver, int index, Function1<? super Integer, Character> defaultValue)
  {
    ;
    
    return (index >= 0) && (index <= StringsKt.getLastIndex($receiver)) ? $receiver.charAt(index) : ((Character)defaultValue.invoke(Integer.valueOf(index))).charValue();
  }
  


  @InlineOnly
  private static final Character elementAtOrNull(@NotNull CharSequence $receiver, int index)
  {
    ;
    
    return StringsKt.getOrNull($receiver, index);
  }
  



















  public static final char first(@NotNull CharSequence $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");CharSequence localCharSequence = $receiver; if ((localCharSequence.length() == 0 ? 1 : 0) != 0)
      throw ((Throwable)new java.util.NoSuchElementException("Char sequence is empty."));
    return $receiver.charAt(0);
  }
  

  public static final char first(@NotNull CharSequence $receiver, @NotNull Function1<? super Character, Boolean> predicate)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");CharSequence localCharSequence = $receiver; for (int i = 0; i < localCharSequence.length(); i++) { char element = localCharSequence.charAt(i); if (((Boolean)predicate.invoke(Character.valueOf(element))).booleanValue()) return element; }
    throw ((Throwable)new java.util.NoSuchElementException("Char sequence contains no character matching the predicate."));
  }
  

  @Nullable
  public static final Character firstOrNull(@NotNull CharSequence $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");CharSequence localCharSequence = $receiver;return (localCharSequence.length() == 0 ? 1 : 0) != 0 ? null : Character.valueOf($receiver.charAt(0));
  }
  
  @Nullable
  public static final Character firstOrNull(@NotNull CharSequence $receiver, @NotNull Function1<? super Character, Boolean> predicate)
  {
    ;
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");CharSequence localCharSequence = $receiver; for (int i = 0; i < localCharSequence.length(); i++) { char element = localCharSequence.charAt(i); if (((Boolean)predicate.invoke(Character.valueOf(element))).booleanValue()) return Character.valueOf(element); }
    return null;
  }
  

  @InlineOnly
  private static final char getOrElse(@NotNull CharSequence $receiver, int index, Function1<? super Integer, Character> defaultValue)
  {
    ;
    return (index >= 0) && (index <= StringsKt.getLastIndex($receiver)) ? $receiver.charAt(index) : ((Character)defaultValue.invoke(Integer.valueOf(index))).charValue();
  }
  

  @Nullable
  public static final Character getOrNull(@NotNull CharSequence $receiver, int index)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");return (index >= 0) && (index <= StringsKt.getLastIndex($receiver)) ? Character.valueOf($receiver.charAt(index)) : null;
  }
  

  public static final int indexOfFirst(@NotNull CharSequence $receiver, @NotNull Function1<? super Character, Boolean> predicate)
  {
    ;
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");int i = 0; int index; for (int j = $receiver.length(); i < j; index++) {
      if (((Boolean)predicate.invoke(Character.valueOf($receiver.charAt(index)))).booleanValue()) {
        return index;
      }
    }
    return -1;
  }
  

  public static final int indexOfLast(@NotNull CharSequence $receiver, @NotNull Function1<? super Character, Boolean> predicate)
  {
    ;
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");int i = $receiver.length();i--; int index; for (int j = 0; i >= 0; index--) {
      if (((Boolean)predicate.invoke(Character.valueOf($receiver.charAt(index)))).booleanValue()) {
        return index;
      }
    }
    return -1;
  }
  



  public static final char last(@NotNull CharSequence $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");CharSequence localCharSequence = $receiver; if ((localCharSequence.length() == 0 ? 1 : 0) != 0)
      throw ((Throwable)new java.util.NoSuchElementException("Char sequence is empty."));
    return $receiver.charAt(StringsKt.getLastIndex($receiver));
  }
  

  public static final char last(@NotNull CharSequence $receiver, @NotNull Function1<? super Character, Boolean> predicate)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");int i = $receiver.length();i--; int index; for (int j = 0; i >= 0; index--) {
      char element = $receiver.charAt(index);
      if (((Boolean)predicate.invoke(Character.valueOf(element))).booleanValue()) return element;
    }
    throw ((Throwable)new java.util.NoSuchElementException("Char sequence contains no character matching the predicate."));
  }
  

  @Nullable
  public static final Character lastOrNull(@NotNull CharSequence $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");CharSequence localCharSequence = $receiver;return (localCharSequence.length() == 0 ? 1 : 0) != 0 ? null : Character.valueOf($receiver.charAt($receiver.length() - 1));
  }
  
  @Nullable
  public static final Character lastOrNull(@NotNull CharSequence $receiver, @NotNull Function1<? super Character, Boolean> predicate)
  {
    ;
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");int i = $receiver.length();i--; int index; for (int j = 0; i >= 0; index--) {
      char element = $receiver.charAt(index);
      if (((Boolean)predicate.invoke(Character.valueOf(element))).booleanValue()) return Character.valueOf(element);
    }
    return null;
  }
  


  @SinceKotlin(version="1.3")
  @InlineOnly
  private static final char random(@NotNull CharSequence $receiver)
  {
    ;
    
    return StringsKt.random($receiver, (kotlin.random.Random)kotlin.random.Random.Default);
  }
  




  @SinceKotlin(version="1.3")
  public static final char random(@NotNull CharSequence $receiver, @NotNull kotlin.random.Random random)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(random, "random");CharSequence localCharSequence = $receiver; if ((localCharSequence.length() == 0 ? 1 : 0) != 0)
      throw ((Throwable)new java.util.NoSuchElementException("Char sequence is empty."));
    return $receiver.charAt(random.nextInt($receiver.length()));
  }
  


  public static final char single(@NotNull CharSequence $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0"); switch ($receiver.length()) {
    case 0:  throw ((Throwable)new java.util.NoSuchElementException("Char sequence is empty."));
    case 1: 
      break; default:  throw ((Throwable)new IllegalArgumentException("Char sequence has more than one element."));
    }
    return 
    
      $receiver.charAt(0);
  }
  


  public static final char single(@NotNull CharSequence $receiver, @NotNull Function1<? super Character, Boolean> predicate)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");Character single = (Character)null;
    boolean found = false;
    CharSequence localCharSequence = $receiver; for (int i = 0; i < localCharSequence.length(); i++) { char element = localCharSequence.charAt(i);
      if (((Boolean)predicate.invoke(Character.valueOf(element))).booleanValue()) {
        if (found) throw ((Throwable)new IllegalArgumentException("Char sequence contains more than one matching element."));
        single = Character.valueOf(element);
        found = true;
      }
    }
    if (!found) { throw ((Throwable)new java.util.NoSuchElementException("Char sequence contains no character matching the predicate."));
    }
    Character tmp121_120 = single;
    
































































































































































































































    if (tmp121_120 == null) throw new kotlin.TypeCastException("null cannot be cast to non-null type kotlin.Char"); return tmp121_120.charValue();
  }
  

  @Nullable
  public static final Character singleOrNull(@NotNull CharSequence $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");return $receiver.length() == 1 ? Character.valueOf($receiver.charAt(0)) : null;
  }
  
  @Nullable
  public static final Character singleOrNull(@NotNull CharSequence $receiver, @NotNull Function1<? super Character, Boolean> predicate)
  {
    ;
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");Character single = (Character)null;
    boolean found = false;
    CharSequence localCharSequence = $receiver; for (int i = 0; i < localCharSequence.length(); i++) { char element = localCharSequence.charAt(i);
      if (((Boolean)predicate.invoke(Character.valueOf(element))).booleanValue()) {
        if (found) return null;
        single = Character.valueOf(element);
        found = true;
      }
    }
    if (!found) return null;
    return single;
  }
  



  @NotNull
  public static final CharSequence drop(@NotNull CharSequence $receiver, int n)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");int i = n >= 0 ? 1 : 0; if (i == 0) { int $i$a$1$require; String str = "Requested character count " + n + " is less than zero.";throw ((Throwable)new IllegalArgumentException(str.toString())); }
    return $receiver.subSequence(RangesKt.coerceAtMost(n, $receiver.length()), $receiver.length());
  }
  



  @NotNull
  public static final String drop(@NotNull String $receiver, int n)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");int i = n >= 0 ? 1 : 0; if (i == 0) { String str2 = "Requested character count " + n + " is less than zero.";throw ((Throwable)new IllegalArgumentException(str2.toString())); }
    String str1 = $receiver;int $i$a$2$require = RangesKt.coerceAtMost(n, $receiver.length()); String tmp78_75 = str1.substring($i$a$2$require);Intrinsics.checkExpressionValueIsNotNull(tmp78_75, "(this as java.lang.String).substring(startIndex)");return tmp78_75;
  }
  



  @NotNull
  public static final CharSequence dropLast(@NotNull CharSequence $receiver, int n)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");int i = n >= 0 ? 1 : 0; if (i == 0) { int $i$a$1$require; String str = "Requested character count " + n + " is less than zero.";throw ((Throwable)new IllegalArgumentException(str.toString())); }
    return StringsKt.take($receiver, RangesKt.coerceAtLeast($receiver.length() - n, 0));
  }
  



  @NotNull
  public static final String dropLast(@NotNull String $receiver, int n)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");int i = n >= 0 ? 1 : 0; if (i == 0) { int $i$a$2$require; String str = "Requested character count " + n + " is less than zero.";throw ((Throwable)new IllegalArgumentException(str.toString())); }
    return StringsKt.take($receiver, RangesKt.coerceAtLeast($receiver.length() - n, 0));
  }
  

  @NotNull
  public static final CharSequence dropLastWhile(@NotNull CharSequence $receiver, @NotNull Function1<? super Character, Boolean> predicate)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");int i = StringsKt.getLastIndex($receiver); int index; for (int j = 0; i >= 0; index--)
      if (!((Boolean)predicate.invoke(Character.valueOf($receiver.charAt(index)))).booleanValue())
        return $receiver.subSequence(0, index + 1);
    return (CharSequence)"";
  }
  

  @NotNull
  public static final String dropLastWhile(@NotNull String $receiver, @NotNull Function1<? super Character, Boolean> predicate)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");int i = StringsKt.getLastIndex((CharSequence)$receiver); int index; for (int j = 0; i >= 0; index--)
      if (!((Boolean)predicate.invoke(Character.valueOf($receiver.charAt(index)))).booleanValue()) {
        String str = $receiver;int k = 0;int m = index + 1; String tmp70_67 = str.substring(k, m);Intrinsics.checkExpressionValueIsNotNull(tmp70_67, "(this as java.lang.Strin…ing(startIndex, endIndex)");return tmp70_67; }
    return "";
  }
  

  @NotNull
  public static final CharSequence dropWhile(@NotNull CharSequence $receiver, @NotNull Function1<? super Character, Boolean> predicate)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");int i = 0; int index; for (int j = $receiver.length(); i < j; index++)
      if (!((Boolean)predicate.invoke(Character.valueOf($receiver.charAt(index)))).booleanValue())
        return $receiver.subSequence(index, $receiver.length());
    return (CharSequence)"";
  }
  

  @NotNull
  public static final String dropWhile(@NotNull String $receiver, @NotNull Function1<? super Character, Boolean> predicate)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");int i = 0; int index; for (int j = ((CharSequence)$receiver).length(); i < j; index++)
      if (!((Boolean)predicate.invoke(Character.valueOf($receiver.charAt(index)))).booleanValue()) {
        String str = $receiver; String tmp63_60 = str.substring(index);Intrinsics.checkExpressionValueIsNotNull(tmp63_60, "(this as java.lang.String).substring(startIndex)");return tmp63_60; }
    return "";
  }
  




  @NotNull
  public static final String filter(@NotNull String $receiver, @NotNull Function1<? super Character, Boolean> predicate)
  {
    ;
    


    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");CharSequence localCharSequence1 = (CharSequence)$receiver;Appendable destination$iv = (Appendable)new StringBuilder();
    




























































































































































































































































































































































































    int $i$f$filterTo;
    




























































































































































































































































































































































































    CharSequence $receiver$iv;
    




























































































































































































































































































































































































    int i = 0; int index$iv; for (int j = $receiver$iv.length(); i < j; index$iv++) {
      char element$iv = $receiver$iv.charAt(index$iv);
      if (((Boolean)predicate.invoke(Character.valueOf(element$iv))).booleanValue()) destination$iv.append(element$iv);
    }
    String tmp101_98 = 
    




























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































      ((StringBuilder)destination$iv).toString();Intrinsics.checkExpressionValueIsNotNull(tmp101_98, "filterTo(StringBuilder(), predicate).toString()");return tmp101_98;
  }
  






  @NotNull
  public static final String filterIndexed(@NotNull String $receiver, @NotNull Function2<? super Integer, ? super Character, Boolean> predicate)
  {
    ;
    




    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");CharSequence localCharSequence1 = (CharSequence)$receiver;Appendable destination$iv = (Appendable)new StringBuilder();
    


























































































































































































































































































































































































    int $i$f$filterIndexedTo;
    


























































































































































































































































































































































































    CharSequence $receiver$iv;
    


























































































































































































































































































































































































    CharSequence $receiver$iv$iv = $receiver$iv;
    int $i$f$forEachIndexed; int index$iv$iv = 0;
    CharSequence localCharSequence2 = $receiver$iv$iv; for (int i = 0; i < localCharSequence2.length();) { char item$iv$iv = localCharSequence2.charAt(i);int j = item$iv$iv;int index$iv = index$iv$iv++;
      int $i$a$1$forEachIndexed; char element$iv; if (((Boolean)predicate.invoke(Integer.valueOf(index$iv), Character.valueOf(element$iv))).booleanValue()) destination$iv.append(element$iv);
      i++;
    }
    String tmp126_123 = 
    
























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































      ((StringBuilder)destination$iv).toString();Intrinsics.checkExpressionValueIsNotNull(tmp126_123, "filterIndexedTo(StringBu…(), predicate).toString()");return tmp126_123;
  }
  

  @NotNull
  public static final <C extends Appendable> C filterIndexedTo(@NotNull CharSequence $receiver, @NotNull C destination, @NotNull Function2<? super Integer, ? super Character, Boolean> predicate)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(destination, "destination");Intrinsics.checkParameterIsNotNull(predicate, "predicate");CharSequence $receiver$iv = $receiver;
    























































































































































































































































































































































































































































































































































































    int $i$f$forEachIndexed;
    























































































































































































































































































































































































































































































































































































    int index$iv = 0;
    CharSequence localCharSequence1 = $receiver$iv; for (int i = 0; i < localCharSequence1.length();) { char item$iv = localCharSequence1.charAt(i);int j = item$iv;int index = index$iv++;
      int $i$a$1$forEachIndexed;
      char element;
      if (((Boolean)predicate.invoke(Integer.valueOf(index), Character.valueOf(element))).booleanValue()) destination.append(element);
      i++; }
    return destination;
  }
  




  @NotNull
  public static final String filterNot(@NotNull String $receiver, @NotNull Function1<? super Character, Boolean> predicate)
  {
    ;
    


    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");CharSequence localCharSequence1 = (CharSequence)$receiver;Appendable destination$iv = (Appendable)new StringBuilder();
    






















































































































































































































































































































































































    int $i$f$filterNotTo;
    





















































































































































































































































































































































































    CharSequence $receiver$iv;
    





















































































































































































































































































































































































    CharSequence localCharSequence2 = $receiver$iv; for (int i = 0; i < localCharSequence2.length(); i++) { char element$iv = localCharSequence2.charAt(i); if (!((Boolean)predicate.invoke(Character.valueOf(element$iv))).booleanValue()) destination$iv.append(element$iv);
    }
    String tmp102_99 = 
    





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































      ((StringBuilder)destination$iv).toString();Intrinsics.checkExpressionValueIsNotNull(tmp102_99, "filterNotTo(StringBuilder(), predicate).toString()");return tmp102_99;
  }
  
  @NotNull
  public static final <C extends Appendable> C filterNotTo(@NotNull CharSequence $receiver, @NotNull C destination, @NotNull Function1<? super Character, Boolean> predicate)
  {
    ;
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(destination, "destination");Intrinsics.checkParameterIsNotNull(predicate, "predicate");CharSequence localCharSequence = $receiver; for (int i = 0; i < localCharSequence.length(); i++) { char element = localCharSequence.charAt(i); if (!((Boolean)predicate.invoke(Character.valueOf(element))).booleanValue()) destination.append(element); }
    return destination;
  }
  
  @NotNull
  public static final <C extends Appendable> C filterTo(@NotNull CharSequence $receiver, @NotNull C destination, @NotNull Function1<? super Character, Boolean> predicate)
  {
    ;
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(destination, "destination");Intrinsics.checkParameterIsNotNull(predicate, "predicate");int i = 0; int index; for (int j = $receiver.length(); i < j; index++) {
      char element = $receiver.charAt(index);
      if (((Boolean)predicate.invoke(Character.valueOf(element))).booleanValue()) destination.append(element);
    }
    return destination;
  }
  

  @NotNull
  public static final CharSequence slice(@NotNull CharSequence $receiver, @NotNull kotlin.ranges.IntRange indices)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(indices, "indices"); if (indices.isEmpty()) return (CharSequence)"";
    return StringsKt.subSequence($receiver, indices);
  }
  

  @NotNull
  public static final String slice(@NotNull String $receiver, @NotNull kotlin.ranges.IntRange indices)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(indices, "indices"); if (indices.isEmpty()) return "";
    return StringsKt.substring($receiver, indices);
  }
  

  @NotNull
  public static final CharSequence slice(@NotNull CharSequence $receiver, @NotNull Iterable<Integer> indices)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(indices, "indices");int size = kotlin.collections.CollectionsKt.collectionSizeOrDefault(indices, 10);
    if (size == 0) return (CharSequence)"";
    StringBuilder result = new StringBuilder(size);
    for (java.util.Iterator localIterator = indices.iterator(); localIterator.hasNext();) { int i = ((Number)localIterator.next()).intValue();
      result.append($receiver.charAt(i));
    }
    return (CharSequence)result;
  }
  

  @InlineOnly
  private static final String slice(@NotNull String $receiver, Iterable<Integer> indices)
  {
    ;
    if ($receiver == null) throw new kotlin.TypeCastException("null cannot be cast to non-null type kotlin.CharSequence"); return StringsKt.slice((CharSequence)$receiver, indices).toString();
  }
  



  @NotNull
  public static final CharSequence take(@NotNull CharSequence $receiver, int n)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");int i = n >= 0 ? 1 : 0; if (i == 0) { int $i$a$1$require; String str = "Requested character count " + n + " is less than zero.";throw ((Throwable)new IllegalArgumentException(str.toString())); }
    return $receiver.subSequence(0, RangesKt.coerceAtMost(n, $receiver.length()));
  }
  



  @NotNull
  public static final String take(@NotNull String $receiver, int n)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");int i = n >= 0 ? 1 : 0; if (i == 0) { String str2 = "Requested character count " + n + " is less than zero.";throw ((Throwable)new IllegalArgumentException(str2.toString())); }
    String str1 = $receiver;int $i$a$2$require = 0;int j = RangesKt.coerceAtMost(n, $receiver.length()); String tmp83_80 = str1.substring($i$a$2$require, j);Intrinsics.checkExpressionValueIsNotNull(tmp83_80, "(this as java.lang.Strin…ing(startIndex, endIndex)");return tmp83_80;
  }
  



  @NotNull
  public static final CharSequence takeLast(@NotNull CharSequence $receiver, int n)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");int i = n >= 0 ? 1 : 0; if (i == 0) { int $i$a$1$require; String str = "Requested character count " + n + " is less than zero.";throw ((Throwable)new IllegalArgumentException(str.toString())); }
    int length = $receiver.length();
    return $receiver.subSequence(length - RangesKt.coerceAtMost(n, length), length);
  }
  



  @NotNull
  public static final String takeLast(@NotNull String $receiver, int n)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");int i = n >= 0 ? 1 : 0; if (i == 0) { String str = "Requested character count " + n + " is less than zero.";throw ((Throwable)new IllegalArgumentException(str.toString())); }
    int length = $receiver.length();
    int $i$a$2$require = $receiver;int j = length - RangesKt.coerceAtMost(n, length); String tmp84_81 = $i$a$2$require.substring(j);Intrinsics.checkExpressionValueIsNotNull(tmp84_81, "(this as java.lang.String).substring(startIndex)");return tmp84_81;
  }
  

  @NotNull
  public static final CharSequence takeLastWhile(@NotNull CharSequence $receiver, @NotNull Function1<? super Character, Boolean> predicate)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");int i = StringsKt.getLastIndex($receiver); int index; for (int j = 0; i >= 0; index--) {
      if (!((Boolean)predicate.invoke(Character.valueOf($receiver.charAt(index)))).booleanValue()) {
        return $receiver.subSequence(index + 1, $receiver.length());
      }
    }
    return $receiver.subSequence(0, $receiver.length());
  }
  

  @NotNull
  public static final String takeLastWhile(@NotNull String $receiver, @NotNull Function1<? super Character, Boolean> predicate)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");int i = StringsKt.getLastIndex((CharSequence)$receiver); int index; for (int j = 0; i >= 0; index--) {
      if (!((Boolean)predicate.invoke(Character.valueOf($receiver.charAt(index)))).booleanValue()) {
        String str = $receiver;int k = index + 1; String tmp65_62 = str.substring(k);Intrinsics.checkExpressionValueIsNotNull(tmp65_62, "(this as java.lang.String).substring(startIndex)");return tmp65_62;
      }
    }
    return $receiver;
  }
  

  @NotNull
  public static final CharSequence takeWhile(@NotNull CharSequence $receiver, @NotNull Function1<? super Character, Boolean> predicate)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");int i = 0; int index; for (int j = $receiver.length(); i < j; index++) {
      if (!((Boolean)predicate.invoke(Character.valueOf($receiver.charAt(index)))).booleanValue())
        return $receiver.subSequence(0, index);
    }
    return $receiver.subSequence(0, $receiver.length());
  }
  

  @NotNull
  public static final String takeWhile(@NotNull String $receiver, @NotNull Function1<? super Character, Boolean> predicate)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");int i = 0; int index; for (int j = $receiver.length(); i < j; index++)
      if (!((Boolean)predicate.invoke(Character.valueOf($receiver.charAt(index)))).booleanValue()) {
        String str = $receiver;int k = 0; String tmp63_60 = str.substring(k, index);Intrinsics.checkExpressionValueIsNotNull(tmp63_60, "(this as java.lang.Strin…ing(startIndex, endIndex)");return tmp63_60;
      }
    return $receiver;
  }
  

  @NotNull
  public static final CharSequence reversed(@NotNull CharSequence $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0"); StringBuilder tmp17_14 = new StringBuilder($receiver).reverse();Intrinsics.checkExpressionValueIsNotNull(tmp17_14, "StringBuilder(this).reverse()");return (CharSequence)tmp17_14;
  }
  

  @InlineOnly
  private static final String reversed(@NotNull String $receiver)
  {
    ;
    if ($receiver == null) throw new kotlin.TypeCastException("null cannot be cast to non-null type kotlin.CharSequence"); return StringsKt.reversed((CharSequence)$receiver).toString();
  }
  





















  @NotNull
  public static final <K, M extends Map<? super K, ? super Character>> M associateByTo(@NotNull CharSequence $receiver, @NotNull M destination, @NotNull Function1<? super Character, ? extends K> keySelector)
  {
    ;
    




















    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(destination, "destination");Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");CharSequence localCharSequence = $receiver; for (int i = 0; i < localCharSequence.length(); i++) { char element = localCharSequence.charAt(i);
      destination.put(keySelector.invoke(Character.valueOf(element)), Character.valueOf(element));
    }
    return destination;
  }
  


  @NotNull
  public static final <K, V, M extends Map<? super K, ? super V>> M associateByTo(@NotNull CharSequence $receiver, @NotNull M destination, @NotNull Function1<? super Character, ? extends K> keySelector, @NotNull Function1<? super Character, ? extends V> valueTransform)
  {
    ;
    

    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(destination, "destination");Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");Intrinsics.checkParameterIsNotNull(valueTransform, "valueTransform");CharSequence localCharSequence = $receiver; for (int i = 0; i < localCharSequence.length(); i++) { char element = localCharSequence.charAt(i);
      destination.put(keySelector.invoke(Character.valueOf(element)), valueTransform.invoke(Character.valueOf(element)));
    }
    return destination;
  }
  


  @NotNull
  public static final <K, V, M extends Map<? super K, ? super V>> M associateTo(@NotNull CharSequence $receiver, @NotNull M destination, @NotNull Function1<? super Character, ? extends Pair<? extends K, ? extends V>> transform)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(destination, "destination");Intrinsics.checkParameterIsNotNull(transform, "transform");CharSequence localCharSequence = $receiver; for (int i = 0; i < localCharSequence.length(); i++) { char element = localCharSequence.charAt(i);
      Map localMap = destination;Pair localPair = (Pair)transform.invoke(Character.valueOf(element));localMap.put(localPair.getFirst(), localPair.getSecond());
    }
    return destination;
  }
  










  @SinceKotlin(version="1.3")
  @NotNull
  public static final <V, M extends Map<? super Character, ? super V>> M associateWithTo(@NotNull CharSequence $receiver, @NotNull M destination, @NotNull Function1<? super Character, ? extends V> valueSelector)
  {
    ;
    








    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(destination, "destination");Intrinsics.checkParameterIsNotNull(valueSelector, "valueSelector");CharSequence localCharSequence = $receiver; for (int i = 0; i < localCharSequence.length(); i++) { char element = localCharSequence.charAt(i);
      destination.put(Character.valueOf(element), valueSelector.invoke(Character.valueOf(element)));
    }
    return destination;
  }
  

  @NotNull
  public static final <C extends Collection<? super Character>> C toCollection(@NotNull CharSequence $receiver, @NotNull C destination)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(destination, "destination");CharSequence localCharSequence = $receiver; for (int i = 0; i < localCharSequence.length(); i++) { char item = localCharSequence.charAt(i);
      destination.add(Character.valueOf(item));
    }
    return destination;
  }
  

  @NotNull
  public static final java.util.HashSet<Character> toHashSet(@NotNull CharSequence $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");return (java.util.HashSet)StringsKt.toCollection($receiver, (Collection)new java.util.HashSet(kotlin.collections.MapsKt.mapCapacity($receiver.length())));
  }
  

  @NotNull
  public static final List<Character> toList(@NotNull CharSequence $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0"); switch ($receiver.length()) {case 0:  break; case 1:  break; } return 
    

      StringsKt.toMutableList($receiver);
  }
  


  @NotNull
  public static final List<Character> toMutableList(@NotNull CharSequence $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");return (List)StringsKt.toCollection($receiver, (Collection)new ArrayList($receiver.length()));
  }
  



  @NotNull
  public static final java.util.Set<Character> toSet(@NotNull CharSequence $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0"); switch ($receiver.length()) {case 0:  break; case 1:  break; } return 
    

      (java.util.Set)StringsKt.toCollection($receiver, (Collection)new java.util.LinkedHashSet(kotlin.collections.MapsKt.mapCapacity($receiver.length())));
  }
  




  @NotNull
  public static final <R, C extends Collection<? super R>> C flatMapTo(@NotNull CharSequence $receiver, @NotNull C destination, @NotNull Function1<? super Character, ? extends Iterable<? extends R>> transform)
  {
    ;
    



    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(destination, "destination");Intrinsics.checkParameterIsNotNull(transform, "transform");CharSequence localCharSequence = $receiver; for (int i = 0; i < localCharSequence.length(); i++) { char element = localCharSequence.charAt(i);
      Iterable list = (Iterable)transform.invoke(Character.valueOf(element));
      kotlin.collections.CollectionsKt.addAll(destination, list);
    }
    return destination;
  }
  















  @NotNull
  public static final <K, M extends Map<? super K, List<Character>>> M groupByTo(@NotNull CharSequence $receiver, @NotNull M destination, @NotNull Function1<? super Character, ? extends K> keySelector)
  {
    ;
    














    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(destination, "destination");Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");CharSequence localCharSequence = $receiver; for (int i = 0; i < localCharSequence.length(); i++) { char element = localCharSequence.charAt(i);
      Object key = keySelector.invoke(Character.valueOf(element));
      Map $receiver$iv = destination;
      











































































































































































































































































































































































































      int $i$f$getOrPut;
      











































































































































































































































































































































































































      Object value$iv = $receiver$iv.get(key);
      int $i$a$1$getOrPut;
      Object answer$iv = new ArrayList();
      



























































































































































































































































































































































































































































































































































































































































































































































































































      $receiver$iv.put(key, answer$iv);List list = (List)(value$iv == null ? 
        answer$iv : 
        
        value$iv);list.add(Character.valueOf(element));
    }
    return destination;
  }
  



  @NotNull
  public static final <K, V, M extends Map<? super K, List<V>>> M groupByTo(@NotNull CharSequence $receiver, @NotNull M destination, @NotNull Function1<? super Character, ? extends K> keySelector, @NotNull Function1<? super Character, ? extends V> valueTransform)
  {
    ;
    


    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(destination, "destination");Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");Intrinsics.checkParameterIsNotNull(valueTransform, "valueTransform");CharSequence localCharSequence = $receiver; for (int i = 0; i < localCharSequence.length(); i++) { char element = localCharSequence.charAt(i);
      Object key = keySelector.invoke(Character.valueOf(element));
      Map $receiver$iv = destination;
      






































































































































































































































































































































































































      int $i$f$getOrPut;
      





































































































































































































































































































































































































      Object value$iv = $receiver$iv.get(key);
      int $i$a$2$getOrPut;
      Object answer$iv = new ArrayList();
      
















































































































































































































































































































































































































































































































































































































































































































































































































      $receiver$iv.put(key, answer$iv);List list = (List)(value$iv == null ? 
        answer$iv : 
        
        value$iv);list.add(valueTransform.invoke(Character.valueOf(element)));
    }
    return destination;
  }
  


  @SinceKotlin(version="1.1")
  @NotNull
  public static final <K> kotlin.collections.Grouping<Character, K> groupingBy(@NotNull CharSequence $receiver, @NotNull final Function1<? super Character, ? extends K> keySelector)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");(kotlin.collections.Grouping)new kotlin.collections.Grouping() { @NotNull
      public java.util.Iterator<Character> sourceIterator() { return (java.util.Iterator)StringsKt.iterator($this_groupingBy); }
      public K keyOf(char element) { return keySelector.invoke(Character.valueOf(element)); }
    };
  }
  





















  @NotNull
  public static final <R, C extends Collection<? super R>> C mapIndexedTo(@NotNull CharSequence $receiver, @NotNull C destination, @NotNull Function2<? super Integer, ? super Character, ? extends R> transform)
  {
    ;
    




















    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(destination, "destination");Intrinsics.checkParameterIsNotNull(transform, "transform");int index = 0;
    CharSequence localCharSequence = $receiver; for (int i = 0; i < localCharSequence.length(); i++) { char item = localCharSequence.charAt(i);
      index++;destination.add(transform.invoke(Integer.valueOf(index), Character.valueOf(item))); }
    return destination;
  }
  









  @NotNull
  public static final <R, C extends Collection<? super R>> C mapTo(@NotNull CharSequence $receiver, @NotNull C destination, @NotNull Function1<? super Character, ? extends R> transform)
  {
    ;
    








    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(destination, "destination");Intrinsics.checkParameterIsNotNull(transform, "transform");CharSequence localCharSequence = $receiver; for (int i = 0; i < localCharSequence.length(); i++) { char item = localCharSequence.charAt(i);
      destination.add(transform.invoke(Character.valueOf(item))); }
    return destination;
  }
  

  @NotNull
  public static final Iterable<kotlin.collections.IndexedValue<Character>> withIndex(@NotNull CharSequence $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");(Iterable)new kotlin.collections.IndexingIterable((kotlin.jvm.functions.Function0)new kotlin.jvm.internal.Lambda($receiver) { @NotNull
      public final kotlin.collections.CharIterator invoke() { return StringsKt.iterator($this_withIndex); }
    });
  }
  

  public static final boolean all(@NotNull CharSequence $receiver, @NotNull Function1<? super Character, Boolean> predicate)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");CharSequence localCharSequence = $receiver; for (int i = 0; i < localCharSequence.length(); i++) { char element = localCharSequence.charAt(i); if (!((Boolean)predicate.invoke(Character.valueOf(element))).booleanValue()) return false; }
    return true;
  }
  




  public static final boolean any(@NotNull CharSequence $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");CharSequence localCharSequence = $receiver;return (localCharSequence.length() == 0 ? 1 : 0) == 0;
  }
  


  public static final boolean any(@NotNull CharSequence $receiver, @NotNull Function1<? super Character, Boolean> predicate)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");CharSequence localCharSequence = $receiver; for (int i = 0; i < localCharSequence.length(); i++) { char element = localCharSequence.charAt(i); if (((Boolean)predicate.invoke(Character.valueOf(element))).booleanValue()) return true; }
    return false;
  }
  

  @InlineOnly
  private static final int count(@NotNull CharSequence $receiver)
  {
    ;
    return $receiver.length();
  }
  

  public static final int count(@NotNull CharSequence $receiver, @NotNull Function1<? super Character, Boolean> predicate)
  {
    ;
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");int count = 0;
    CharSequence localCharSequence = $receiver; for (int i = 0; i < localCharSequence.length(); i++) { char element = localCharSequence.charAt(i); if (((Boolean)predicate.invoke(Character.valueOf(element))).booleanValue()) count++; }
    return count;
  }
  

  public static final <R> R fold(@NotNull CharSequence $receiver, R initial, @NotNull Function2<? super R, ? super Character, ? extends R> operation)
  {
    ;
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(operation, "operation");Object accumulator = initial;
    CharSequence localCharSequence = $receiver; for (int i = 0; i < localCharSequence.length(); i++) { char element = localCharSequence.charAt(i);accumulator = operation.invoke(accumulator, Character.valueOf(element)); }
    return accumulator;
  }
  


  public static final <R> R foldIndexed(@NotNull CharSequence $receiver, R initial, @NotNull Function3<? super Integer, ? super R, ? super Character, ? extends R> operation)
  {
    ;
    

    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(operation, "operation");int index = 0;
    Object accumulator = initial;
    CharSequence localCharSequence = $receiver;int i = 0;char element = localCharSequence.charAt(i);accumulator = Integer.valueOf(index).invoke(???++, accumulator, Character.valueOf(element));
    return accumulator;
  }
  

  public static final <R> R foldRight(@NotNull CharSequence $receiver, R initial, @NotNull Function2<? super Character, ? super R, ? extends R> operation)
  {
    ;
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(operation, "operation");int index = StringsKt.getLastIndex($receiver);
    Object accumulator = initial;
    while (index >= 0) {
      accumulator = operation.invoke(Character.valueOf($receiver.charAt(index--)), accumulator);
    }
    return accumulator;
  }
  


  public static final <R> R foldRightIndexed(@NotNull CharSequence $receiver, R initial, @NotNull Function3<? super Integer, ? super Character, ? super R, ? extends R> operation)
  {
    ;
    

    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(operation, "operation");int index = StringsKt.getLastIndex($receiver);
    Object accumulator = initial;
    while (index >= 0) {
      accumulator = operation.invoke(Integer.valueOf(index), Character.valueOf($receiver.charAt(index)), accumulator);
      index--;
    }
    return accumulator;
  }
  

  public static final void forEach(@NotNull CharSequence $receiver, @NotNull Function1<? super Character, kotlin.Unit> action)
  {
    ;
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(action, "action");CharSequence localCharSequence = $receiver; for (int i = 0; i < localCharSequence.length(); i++) { char element = localCharSequence.charAt(i);action.invoke(Character.valueOf(element));
    }
  }
  

  public static final void forEachIndexed(@NotNull CharSequence $receiver, @NotNull Function2<? super Integer, ? super Character, kotlin.Unit> action)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(action, "action");int index = 0;
    CharSequence localCharSequence = $receiver; for (int i = 0; i < localCharSequence.length(); i++) { char item = localCharSequence.charAt(i);index++;action.invoke(Integer.valueOf(index), Character.valueOf(item));
    }
  }
  
  @Nullable
  public static final Character max(@NotNull CharSequence $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");CharSequence localCharSequence = $receiver; if ((localCharSequence.length() == 0 ? 1 : 0) != 0) return null;
    char max = $receiver.charAt(0);
    int i = 1;int j = StringsKt.getLastIndex($receiver); int i; for (i > j;; i++) {
      char e = $receiver.charAt(i);
      if (max < e) max = e;
      if (i == j) {
        break;
      }
    }
    return Character.valueOf(max);
  }
  

  @Nullable
  public static final <R extends Comparable<? super R>> Character maxBy(@NotNull CharSequence $receiver, @NotNull Function1<? super Character, ? extends R> selector)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(selector, "selector");CharSequence localCharSequence = $receiver; if ((localCharSequence.length() == 0 ? 1 : 0) != 0) return null;
    char maxElem = $receiver.charAt(0);
    Comparable maxValue = (Comparable)selector.invoke(Character.valueOf(maxElem));
    int i = 1;int j = StringsKt.getLastIndex($receiver); int i; for (i > j;; i++) {
      char e = $receiver.charAt(i);
      Comparable v = (Comparable)selector.invoke(Character.valueOf(e));
      if (maxValue.compareTo(v) < 0) {
        maxElem = e;
        maxValue = v;
      }
      if (i == j) {
        break;
      }
    }
    



    return Character.valueOf(maxElem);
  }
  

  @Nullable
  public static final Character maxWith(@NotNull CharSequence $receiver, @NotNull java.util.Comparator<? super Character> comparator)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(comparator, "comparator");CharSequence localCharSequence = $receiver; if ((localCharSequence.length() == 0 ? 1 : 0) != 0) return null;
    char max = $receiver.charAt(0);
    int i = 1;int j = StringsKt.getLastIndex($receiver); int i; for (i > j;; i++) {
      char e = $receiver.charAt(i);
      if (comparator.compare(Character.valueOf(max), Character.valueOf(e)) < 0) max = e;
      if (i == j) {
        break;
      }
    }
    return Character.valueOf(max);
  }
  

  @Nullable
  public static final Character min(@NotNull CharSequence $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");CharSequence localCharSequence = $receiver; if ((localCharSequence.length() == 0 ? 1 : 0) != 0) return null;
    char min = $receiver.charAt(0);
    int i = 1;int j = StringsKt.getLastIndex($receiver); int i; for (i > j;; i++) {
      char e = $receiver.charAt(i);
      if (min > e) min = e;
      if (i == j) {
        break;
      }
    }
    return Character.valueOf(min);
  }
  

  @Nullable
  public static final <R extends Comparable<? super R>> Character minBy(@NotNull CharSequence $receiver, @NotNull Function1<? super Character, ? extends R> selector)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(selector, "selector");CharSequence localCharSequence = $receiver; if ((localCharSequence.length() == 0 ? 1 : 0) != 0) return null;
    char minElem = $receiver.charAt(0);
    Comparable minValue = (Comparable)selector.invoke(Character.valueOf(minElem));
    int i = 1;int j = StringsKt.getLastIndex($receiver); int i; for (i > j;; i++) {
      char e = $receiver.charAt(i);
      Comparable v = (Comparable)selector.invoke(Character.valueOf(e));
      if (minValue.compareTo(v) > 0) {
        minElem = e;
        minValue = v;
      }
      if (i == j) {
        break;
      }
    }
    



    return Character.valueOf(minElem);
  }
  

  @Nullable
  public static final Character minWith(@NotNull CharSequence $receiver, @NotNull java.util.Comparator<? super Character> comparator)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(comparator, "comparator");CharSequence localCharSequence = $receiver; if ((localCharSequence.length() == 0 ? 1 : 0) != 0) return null;
    char min = $receiver.charAt(0);
    int i = 1;int j = StringsKt.getLastIndex($receiver); int i; for (i > j;; i++) {
      char e = $receiver.charAt(i);
      if (comparator.compare(Character.valueOf(min), Character.valueOf(e)) > 0) min = e;
      if (i == j) {
        break;
      }
    }
    return Character.valueOf(min);
  }
  




  public static final boolean none(@NotNull CharSequence $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");CharSequence localCharSequence = $receiver;return localCharSequence.length() == 0;
  }
  


  public static final boolean none(@NotNull CharSequence $receiver, @NotNull Function1<? super Character, Boolean> predicate)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");CharSequence localCharSequence = $receiver; for (int i = 0; i < localCharSequence.length(); i++) { char element = localCharSequence.charAt(i); if (((Boolean)predicate.invoke(Character.valueOf(element))).booleanValue()) return false; }
    return true;
  }
  
  @SinceKotlin(version="1.1")
  @NotNull
  public static final <S extends CharSequence> S onEach(@NotNull S $receiver, @NotNull Function1<? super Character, kotlin.Unit> action)
  {
    ;
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(action, "action");CharSequence localCharSequence1 = $receiver;CharSequence $receiver = localCharSequence1; int $i$a$1$apply; CharSequence localCharSequence2 = $receiver; for (int i = 0; i < localCharSequence2.length(); i++) { char element = localCharSequence2.charAt(i);action.invoke(Character.valueOf(element)); } return localCharSequence1;
  }
  

  public static final char reduce(@NotNull CharSequence $receiver, @NotNull Function2<? super Character, ? super Character, Character> operation)
  {
    ;
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(operation, "operation");CharSequence localCharSequence = $receiver; if ((localCharSequence.length() == 0 ? 1 : 0) != 0)
      throw ((Throwable)new UnsupportedOperationException("Empty char sequence can't be reduced."));
    char accumulator = $receiver.charAt(0);
    int i = 1;int j = StringsKt.getLastIndex($receiver); int index; for (i > j;; index++) {
      accumulator = ((Character)operation.invoke(Character.valueOf(accumulator), Character.valueOf($receiver.charAt(index)))).charValue();
      if (index == j)
        break;
    }
    return accumulator;
  }
  


  public static final char reduceIndexed(@NotNull CharSequence $receiver, @NotNull Function3<? super Integer, ? super Character, ? super Character, Character> operation)
  {
    ;
    

    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(operation, "operation");CharSequence localCharSequence = $receiver; if ((localCharSequence.length() == 0 ? 1 : 0) != 0)
      throw ((Throwable)new UnsupportedOperationException("Empty char sequence can't be reduced."));
    char accumulator = $receiver.charAt(0);
    int i = 1;int j = StringsKt.getLastIndex($receiver); int index; for (i > j;; index++) {
      accumulator = ((Character)operation.invoke(Integer.valueOf(index), Character.valueOf(accumulator), Character.valueOf($receiver.charAt(index)))).charValue();
      if (index == j)
        break;
    }
    return accumulator;
  }
  

  public static final char reduceRight(@NotNull CharSequence $receiver, @NotNull Function2<? super Character, ? super Character, Character> operation)
  {
    ;
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(operation, "operation");int index = StringsKt.getLastIndex($receiver);
    if (index < 0) throw ((Throwable)new UnsupportedOperationException("Empty char sequence can't be reduced."));
    char accumulator = $receiver.charAt(index--);
    while (index >= 0) {
      accumulator = ((Character)operation.invoke(Character.valueOf($receiver.charAt(index--)), Character.valueOf(accumulator))).charValue();
    }
    return accumulator;
  }
  


  public static final char reduceRightIndexed(@NotNull CharSequence $receiver, @NotNull Function3<? super Integer, ? super Character, ? super Character, Character> operation)
  {
    ;
    

    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(operation, "operation");int index = StringsKt.getLastIndex($receiver);
    if (index < 0) throw ((Throwable)new UnsupportedOperationException("Empty char sequence can't be reduced."));
    char accumulator = $receiver.charAt(index--);
    while (index >= 0) {
      accumulator = ((Character)operation.invoke(Integer.valueOf(index), Character.valueOf($receiver.charAt(index)), Character.valueOf(accumulator))).charValue();
      index--;
    }
    return accumulator;
  }
  

  public static final int sumBy(@NotNull CharSequence $receiver, @NotNull Function1<? super Character, Integer> selector)
  {
    ;
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(selector, "selector");int sum = 0;
    CharSequence localCharSequence = $receiver; for (int i = 0; i < localCharSequence.length(); i++) { char element = localCharSequence.charAt(i);
      sum += ((Number)selector.invoke(Character.valueOf(element))).intValue();
    }
    return sum;
  }
  

  public static final double sumByDouble(@NotNull CharSequence $receiver, @NotNull Function1<? super Character, Double> selector)
  {
    ;
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(selector, "selector");double sum = 0.0D;
    CharSequence localCharSequence = $receiver; for (int i = 0; i < localCharSequence.length(); i++) { char element = localCharSequence.charAt(i);
      sum += ((Number)selector.invoke(Character.valueOf(element))).doubleValue();
    }
    return sum;
  }
  







  @SinceKotlin(version="1.2")
  @NotNull
  public static final List<String> chunked(@NotNull CharSequence $receiver, int size)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");return StringsKt.windowed($receiver, size, size, true);
  }
  












  @SinceKotlin(version="1.2")
  @NotNull
  public static final <R> List<R> chunked(@NotNull CharSequence $receiver, int size, @NotNull Function1<? super CharSequence, ? extends R> transform)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(transform, "transform");return StringsKt.windowed($receiver, size, size, true, transform);
  }
  







  @SinceKotlin(version="1.2")
  @NotNull
  public static final kotlin.sequences.Sequence<String> chunkedSequence(@NotNull CharSequence $receiver, int size)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");return StringsKt.chunkedSequence($receiver, size, (Function1)chunkedSequence.1.INSTANCE);
  }
  












  @SinceKotlin(version="1.2")
  @NotNull
  public static final <R> kotlin.sequences.Sequence<R> chunkedSequence(@NotNull CharSequence $receiver, int size, @NotNull Function1<? super CharSequence, ? extends R> transform)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(transform, "transform");return StringsKt.windowedSequence($receiver, size, size, true, transform);
  }
  

  @NotNull
  public static final Pair<CharSequence, CharSequence> partition(@NotNull CharSequence $receiver, @NotNull Function1<? super Character, Boolean> predicate)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");StringBuilder first = new StringBuilder();
    StringBuilder second = new StringBuilder();
    CharSequence localCharSequence = $receiver; for (int i = 0; i < localCharSequence.length(); i++) { char element = localCharSequence.charAt(i);
      if (((Boolean)predicate.invoke(Character.valueOf(element))).booleanValue()) {
        first.append(element);
      } else {
        second.append(element);
      }
    }
    return new Pair(first, second);
  }
  

  @NotNull
  public static final Pair<String, String> partition(@NotNull String $receiver, @NotNull Function1<? super Character, Boolean> predicate)
  {
    ;
    
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");StringBuilder first = new StringBuilder();
    StringBuilder second = new StringBuilder();
    String str = $receiver;int j = str.length(); for (int i = 0; i < j; i++) { char element = str.charAt(i);
      if (((Boolean)predicate.invoke(Character.valueOf(element))).booleanValue()) {
        first.append(element);
      } else {
        second.append(element);
      }
    }
    return new Pair(first.toString(), second.toString());
  }
  













  @SinceKotlin(version="1.2")
  @NotNull
  public static final List<String> windowed(@NotNull CharSequence $receiver, int size, int step, boolean partialWindows)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");return StringsKt.windowed($receiver, size, step, partialWindows, (Function1)windowed.1.INSTANCE);
  }
  













































  @SinceKotlin(version="1.2")
  @NotNull
  public static final kotlin.sequences.Sequence<String> windowedSequence(@NotNull CharSequence $receiver, int size, int step, boolean partialWindows)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");return StringsKt.windowedSequence($receiver, size, step, partialWindows, (Function1)windowedSequence.1.INSTANCE);
  }
  















  @SinceKotlin(version="1.2")
  @NotNull
  public static final <R> kotlin.sequences.Sequence<R> windowedSequence(@NotNull CharSequence $receiver, final int size, int step, boolean partialWindows, @NotNull final Function1<? super CharSequence, ? extends R> transform)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(transform, "transform");kotlin.collections.SlidingWindowKt.checkWindowSizeStep(size, step);
    kotlin.ranges.IntProgression windows = RangesKt.step((kotlin.ranges.IntProgression)(partialWindows ? StringsKt.getIndices($receiver) : RangesKt.until(0, $receiver.length() - size + 1)), step);
    kotlin.sequences.SequencesKt.map(kotlin.collections.CollectionsKt.asSequence((Iterable)windows), (Function1)new kotlin.jvm.internal.Lambda($receiver) { public final R invoke(int index) { return transform.invoke($this_windowedSequence.subSequence(index, RangesKt.coerceAtMost(index + size, $this_windowedSequence.length()))); }
    });
  }
  







  @NotNull
  public static final <V> List<V> zip(@NotNull CharSequence $receiver, @NotNull CharSequence other, @NotNull Function2<? super Character, ? super Character, ? extends V> transform)
  {
    ;
    





    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(other, "other");Intrinsics.checkParameterIsNotNull(transform, "transform");int i = $receiver.length();int j = other.length();int length = Math.min(i, j);
    ArrayList list = new ArrayList(length);
    j = 0; int i; for (int k = length; j < k; i++) {
      list.add(transform.invoke(Character.valueOf($receiver.charAt(i)), Character.valueOf(other.charAt(i))));
    }
    return (List)list;
  }
  









  @SinceKotlin(version="1.2")
  @NotNull
  public static final <R> List<R> zipWithNext(@NotNull CharSequence $receiver, @NotNull Function2<? super Character, ? super Character, ? extends R> transform)
  {
    ;
    







    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(transform, "transform");int size = $receiver.length() - 1;
    if (size < 1) return kotlin.collections.CollectionsKt.emptyList();
    ArrayList result = new ArrayList(size);
    int i = 0; int index; for (int j = size; i < j; index++) {
      result.add(transform.invoke(Character.valueOf($receiver.charAt(index)), Character.valueOf($receiver.charAt(index + 1))));
    }
    return (List)result;
  }
  

  @NotNull
  public static final Iterable<Character> asIterable(@NotNull CharSequence $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0"); if (($receiver instanceof String)) { CharSequence localCharSequence = $receiver; if ((localCharSequence.length() == 0 ? 1 : 0) != 0) return (Iterable)kotlin.collections.CollectionsKt.emptyList(); }
    return (Iterable)new StringsKt___StringsKt.asIterable..inlined.Iterable.1($receiver);
  }
  

  @NotNull
  public static final kotlin.sequences.Sequence<Character> asSequence(@NotNull CharSequence $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0"); if (($receiver instanceof String)) { CharSequence localCharSequence = $receiver; if ((localCharSequence.length() == 0 ? 1 : 0) != 0) return kotlin.sequences.SequencesKt.emptySequence(); }
    return (kotlin.sequences.Sequence)new StringsKt___StringsKt.asSequence..inlined.Sequence.1($receiver);
  }
  
  @InlineOnly
  private static final Character find(@NotNull CharSequence $receiver, Function1<? super Character, Boolean> predicate)
  {
    ;
    CharSequence $receiver$iv = $receiver;
    











































































































































































































































































































































































































































































































































































































































































































































    int $i$f$firstOrNull;
    










































































































































































































































































































































































































































































































































































































































































































































    CharSequence localCharSequence1 = $receiver$iv; char element$iv; for (int i = 0; i < localCharSequence1.length(); i++) element$iv = localCharSequence1.charAt(i);
    return ((Boolean)predicate.invoke(Character.valueOf(element$iv))).booleanValue() ? Character.valueOf(element$iv) : null;
  }
  
  @InlineOnly
  private static final Character findLast(@NotNull CharSequence $receiver, Function1<? super Character, Boolean> predicate)
  {
    ;
    CharSequence $receiver$iv = $receiver;
    








































































































































































































































































































































































































































































































































































































































































































































    int $i$f$lastOrNull;
    







































































































































































































































































































































































































































































































































































































































































































































    int i = $receiver$iv.length();i--; int index$iv; char element$iv; for (int j = 0; i >= 0; index$iv--) {
      element$iv = $receiver$iv.charAt(index$iv);
    }
    
    return ((Boolean)predicate.invoke(Character.valueOf(element$iv))).booleanValue() ? Character.valueOf(element$iv) : null;
  }
  
  @NotNull
  public static final CharSequence filter(@NotNull CharSequence $receiver, @NotNull Function1<? super Character, Boolean> predicate)
  {
    ;
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");CharSequence localCharSequence1 = $receiver;Appendable destination$iv = (Appendable)new StringBuilder();
    





























































































































































































































































































































































































    int $i$f$filterTo;
    





























































































































































































































































































































































































    CharSequence $receiver$iv;
    




























































































































































































































































































































































































    int i = 0; int index$iv; for (int j = $receiver$iv.length(); i < j; index$iv++) {
      char element$iv = $receiver$iv.charAt(index$iv);
      if (((Boolean)predicate.invoke(Character.valueOf(element$iv))).booleanValue()) destination$iv.append(element$iv);
    }
    return (CharSequence)destination$iv;
  }
  
  @NotNull
  public static final CharSequence filterIndexed(@NotNull CharSequence $receiver, @NotNull Function2<? super Integer, ? super Character, Boolean> predicate)
  {
    ;
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");CharSequence localCharSequence1 = $receiver;Appendable destination$iv = (Appendable)new StringBuilder();
    



























































































































































































































































































































































































    int $i$f$filterIndexedTo;
    



























































































































































































































































































































































































    CharSequence $receiver$iv;
    


























































































































































































































































































































































































    CharSequence $receiver$iv$iv = $receiver$iv;
    int $i$f$forEachIndexed; int index$iv$iv = 0;
    CharSequence localCharSequence2 = $receiver$iv$iv; for (int i = 0; i < localCharSequence2.length();) { char item$iv$iv = localCharSequence2.charAt(i);int j = item$iv$iv;int index$iv = index$iv$iv++;
      int $i$a$1$forEachIndexed; char element$iv; if (((Boolean)predicate.invoke(Integer.valueOf(index$iv), Character.valueOf(element$iv))).booleanValue()) destination$iv.append(element$iv);
      i++;
    }
    return (CharSequence)destination$iv;
  }
  
  @NotNull
  public static final CharSequence filterNot(@NotNull CharSequence $receiver, @NotNull Function1<? super Character, Boolean> predicate)
  {
    ;
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(predicate, "predicate");CharSequence localCharSequence1 = $receiver;Appendable destination$iv = (Appendable)new StringBuilder();
    























































































































































































































































































































































































    int $i$f$filterNotTo;
    























































































































































































































































































































































































    CharSequence $receiver$iv;
    























































































































































































































































































































































































    CharSequence localCharSequence2 = $receiver$iv; for (int i = 0; i < localCharSequence2.length(); i++) { char element$iv = localCharSequence2.charAt(i); if (!((Boolean)predicate.invoke(Character.valueOf(element$iv))).booleanValue()) destination$iv.append(element$iv); }
    return (CharSequence)destination$iv;
  }
  
  @NotNull
  public static final <K, V> Map<K, V> associate(@NotNull CharSequence $receiver, @NotNull Function1<? super Character, ? extends Pair<? extends K, ? extends V>> transform)
  {
    ;
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(transform, "transform");int capacity = RangesKt.coerceAtLeast(kotlin.collections.MapsKt.mapCapacity($receiver.length()), 16);
    CharSequence localCharSequence1 = $receiver;Map destination$iv = (Map)new java.util.LinkedHashMap(capacity);
    


























































































































































































































































































































    int $i$f$associateTo;
    


























































































































































































































































































































    CharSequence $receiver$iv;
    


























































































































































































































































































































    CharSequence localCharSequence2 = $receiver$iv; for (int i = 0; i < localCharSequence2.length(); i++) { char element$iv = localCharSequence2.charAt(i);
      Map localMap1 = destination$iv;Pair localPair = (Pair)transform.invoke(Character.valueOf(element$iv));localMap1.put(localPair.getFirst(), localPair.getSecond());
    }
    return destination$iv;
  }
  
  @NotNull
  public static final <K> Map<K, Character> associateBy(@NotNull CharSequence $receiver, @NotNull Function1<? super Character, ? extends K> keySelector)
  {
    ;
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");int capacity = RangesKt.coerceAtLeast(kotlin.collections.MapsKt.mapCapacity($receiver.length()), 16);
    CharSequence localCharSequence1 = $receiver;Map destination$iv = (Map)new java.util.LinkedHashMap(capacity);
    























































































































































































































































































































    int $i$f$associateByTo;
    























































































































































































































































































































    CharSequence $receiver$iv;
    























































































































































































































































































































    CharSequence localCharSequence2 = $receiver$iv; for (int i = 0; i < localCharSequence2.length(); i++) { char element$iv = localCharSequence2.charAt(i);
      destination$iv.put(keySelector.invoke(Character.valueOf(element$iv)), Character.valueOf(element$iv));
    }
    return destination$iv;
  }
  
  @NotNull
  public static final <K, V> Map<K, V> associateBy(@NotNull CharSequence $receiver, @NotNull Function1<? super Character, ? extends K> keySelector, @NotNull Function1<? super Character, ? extends V> valueTransform)
  {
    ;
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");Intrinsics.checkParameterIsNotNull(valueTransform, "valueTransform");int capacity = RangesKt.coerceAtLeast(kotlin.collections.MapsKt.mapCapacity($receiver.length()), 16);
    CharSequence localCharSequence1 = $receiver;Map destination$iv = (Map)new java.util.LinkedHashMap(capacity);
    





















































































































































































































































































































    int $i$f$associateByTo;
    




















































































































































































































































































































    CharSequence $receiver$iv;
    




















































































































































































































































































































    CharSequence localCharSequence2 = $receiver$iv; for (int i = 0; i < localCharSequence2.length(); i++) { char element$iv = localCharSequence2.charAt(i);
      destination$iv.put(keySelector.invoke(Character.valueOf(element$iv)), valueTransform.invoke(Character.valueOf(element$iv)));
    }
    return destination$iv;
  }
  
  @SinceKotlin(version="1.3")
  @NotNull
  public static final <V> Map<Character, V> associateWith(@NotNull CharSequence $receiver, @NotNull Function1<? super Character, ? extends V> valueSelector)
  {
    ;
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(valueSelector, "valueSelector");java.util.LinkedHashMap result = new java.util.LinkedHashMap(RangesKt.coerceAtLeast(kotlin.collections.MapsKt.mapCapacity($receiver.length()), 16));
    CharSequence $receiver$iv = $receiver;
    





















































































































































































































































































































































































































































    int $i$f$associateWithTo;
    





















































































































































































































































































































































































































































    CharSequence localCharSequence1 = $receiver$iv; for (int i = 0; i < localCharSequence1.length(); i++) { char element$iv = localCharSequence1.charAt(i);
      ((Map)result).put(Character.valueOf(element$iv), valueSelector.invoke(Character.valueOf(element$iv)));
    }
    return (Map)result;
  }
  
  @NotNull
  public static final <R> List<R> flatMap(@NotNull CharSequence $receiver, @NotNull Function1<? super Character, ? extends Iterable<? extends R>> transform)
  {
    ;
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(transform, "transform");CharSequence localCharSequence1 = $receiver;Collection destination$iv = (Collection)new ArrayList();
    













































































































































































































































































    int $i$f$flatMapTo;
    













































































































































































































































































    CharSequence $receiver$iv;
    













































































































































































































































































    CharSequence localCharSequence2 = $receiver$iv; for (int i = 0; i < localCharSequence2.length(); i++) { char element$iv = localCharSequence2.charAt(i);
      Iterable list$iv = (Iterable)transform.invoke(Character.valueOf(element$iv));
      kotlin.collections.CollectionsKt.addAll(destination$iv, list$iv);
    }
    return (List)destination$iv;
  }
  
  @NotNull
  public static final <K> Map<K, List<Character>> groupBy(@NotNull CharSequence $receiver, @NotNull Function1<? super Character, ? extends K> keySelector)
  {
    ;
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");CharSequence localCharSequence1 = $receiver;Map destination$iv = (Map)new java.util.LinkedHashMap();
    







































































































































































































































































    int $i$f$groupByTo;
    







































































































































































































































































    CharSequence $receiver$iv;
    







































































































































































































































































    CharSequence localCharSequence2 = $receiver$iv; for (int i = 0; i < localCharSequence2.length(); i++) { char element$iv = localCharSequence2.charAt(i);
      Object key$iv = keySelector.invoke(Character.valueOf(element$iv));
      Map $receiver$iv$iv = destination$iv;
      int $i$f$getOrPut; Object value$iv$iv = $receiver$iv$iv.get(key$iv);
      int $i$a$1$getOrPut;
      Object answer$iv$iv = new ArrayList();
      


      $receiver$iv$iv.put(key$iv, answer$iv$iv);List list$iv = (List)(value$iv$iv == null ? 
        answer$iv$iv : 
        
        value$iv$iv);
      list$iv.add(Character.valueOf(element$iv));
    }
    return destination$iv;
  }
  
  @NotNull
  public static final <K, V> Map<K, List<V>> groupBy(@NotNull CharSequence $receiver, @NotNull Function1<? super Character, ? extends K> keySelector, @NotNull Function1<? super Character, ? extends V> valueTransform)
  {
    ;
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");Intrinsics.checkParameterIsNotNull(valueTransform, "valueTransform");CharSequence localCharSequence1 = $receiver;Map destination$iv = (Map)new java.util.LinkedHashMap();
    







































































































































































































































































    int $i$f$groupByTo;
    







































































































































































































































































    CharSequence $receiver$iv;
    







































































































































































































































































    CharSequence localCharSequence2 = $receiver$iv; for (int i = 0; i < localCharSequence2.length(); i++) { char element$iv = localCharSequence2.charAt(i);
      Object key$iv = keySelector.invoke(Character.valueOf(element$iv));
      Map $receiver$iv$iv = destination$iv;
      int $i$f$getOrPut; Object value$iv$iv = $receiver$iv$iv.get(key$iv);
      int $i$a$2$getOrPut;
      Object answer$iv$iv = new ArrayList();
      


      $receiver$iv$iv.put(key$iv, answer$iv$iv);List list$iv = (List)(value$iv$iv == null ? 
        answer$iv$iv : 
        
        value$iv$iv);
      list$iv.add(valueTransform.invoke(Character.valueOf(element$iv)));
    }
    return destination$iv;
  }
  
  @NotNull
  public static final <R> List<R> map(@NotNull CharSequence $receiver, @NotNull Function1<? super Character, ? extends R> transform)
  {
    ;
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(transform, "transform");CharSequence localCharSequence1 = $receiver;Collection destination$iv = (Collection)new ArrayList($receiver.length());
    





























































































































































































































































    int $i$f$mapTo;
    





























































































































































































































































    CharSequence $receiver$iv;
    





























































































































































































































































    CharSequence localCharSequence2 = $receiver$iv; for (int i = 0; i < localCharSequence2.length(); i++) { char item$iv = localCharSequence2.charAt(i);
      destination$iv.add(transform.invoke(Character.valueOf(item$iv))); }
    return (List)destination$iv;
  }
  
  @NotNull
  public static final <R> List<R> mapIndexed(@NotNull CharSequence $receiver, @NotNull Function2<? super Integer, ? super Character, ? extends R> transform)
  {
    ;
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(transform, "transform");CharSequence localCharSequence1 = $receiver;Collection destination$iv = (Collection)new ArrayList($receiver.length());
    



























































































































































































































































    int $i$f$mapIndexedTo;
    



























































































































































































































































    CharSequence $receiver$iv;
    


























































































































































































































































    int index$iv = 0;
    CharSequence localCharSequence2 = $receiver$iv; for (int i = 0; i < localCharSequence2.length(); i++) { char item$iv = localCharSequence2.charAt(i);
      index$iv++;destination$iv.add(transform.invoke(Integer.valueOf(index$iv), Character.valueOf(item$iv))); }
    return (List)destination$iv;
  }
  
  @NotNull
  public static final List<Pair<Character, Character>> zip(@NotNull CharSequence $receiver, @NotNull CharSequence other)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");Intrinsics.checkParameterIsNotNull(other, "other");CharSequence $receiver$iv = $receiver;
    




























































































    int $i$f$zip;
    



























































































    int i = $receiver$iv.length();int j = other.length();int length$iv = Math.min(i, j);
    ArrayList list$iv = new ArrayList(length$iv);
    j = 0; for (int k = length$iv; j < k;) { int i$iv;
      int m = other.charAt(i$iv);int n = $receiver$iv.charAt(i$iv);ArrayList localArrayList1 = list$iv;
      int $i$a$1$zip;
      char c1;
      char c2;
      Pair localPair = kotlin.TuplesKt.to(Character.valueOf(c1), Character.valueOf(c2));localArrayList1.add(localPair);
      



























































































































































































      i$iv++;
    }
    
    return (List)list$iv;
  }
  
  @SinceKotlin(version="1.2")
  @NotNull
  public static final List<Pair<Character, Character>> zipWithNext(@NotNull CharSequence $receiver)
  {
    Intrinsics.checkParameterIsNotNull($receiver, "receiver$0");CharSequence $receiver$iv = $receiver;
    

















































































    int $i$f$zipWithNext;
    
















































































    int size$iv = $receiver$iv.length() - 1;
    
    ArrayList result$iv = new ArrayList(size$iv);
    int i = 0; for (int j = size$iv; i < j;) { int index$iv;
      int k = $receiver$iv.charAt(index$iv + 1);int m = $receiver$iv.charAt(index$iv);ArrayList localArrayList1 = result$iv;
      int $i$a$1$zipWithNext;
      char a;
      char b;
      Pair localPair = kotlin.TuplesKt.to(Character.valueOf(a), Character.valueOf(b));localArrayList1.add(localPair);
      






































































































































































      index$iv++;
    }
    
    return size$iv < 1 ? kotlin.collections.CollectionsKt.emptyList() : (List)result$iv;
  }
  
  /* Error */
  @NotNull
  public static final <R> List<R> mapIndexedNotNull(@NotNull CharSequence $receiver, @NotNull Function2<? super Integer, ? super Character, ? extends R> transform)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc 83
    //   3: invokestatic 89	kotlin/jvm/internal/Intrinsics:checkParameterIsNotNull	(Ljava/lang/Object;Ljava/lang/String;)V
    //   6: aload_1
    //   7: ldc_w 358
    //   10: invokestatic 89	kotlin/jvm/internal/Intrinsics:checkParameterIsNotNull	(Ljava/lang/Object;Ljava/lang/String;)V
    //   13: aload_0
    //   14: astore_3
    //   15: new 436	java/util/ArrayList
    //   18: dup
    //   19: invokespecial 457	java/util/ArrayList:<init>	()V
    //   22: checkcast 406	java/util/Collection
    //   25: astore 4
    //   27: aload_3
    //   28: astore 5
    //   30: iconst_0
    //   31: istore 6
    //   33: aload 5
    //   35: astore 7
    //   37: iconst_0
    //   38: istore 8
    //   40: iload 8
    //   42: aload 7
    //   44: invokeinterface 60 1 0
    //   49: if_icmpge +71 -> 120
    //   52: aload 7
    //   54: iload 8
    //   56: invokeinterface 14 2 0
    //   61: istore 9
    //   63: iload 6
    //   65: iinc 6 1
    //   68: iload 9
    //   70: istore 10
    //   72: istore 11
    //   74: aload_1
    //   75: iload 11
    //   77: invokestatic 33	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   80: iload 10
    //   82: invokestatic 63	java/lang/Character:valueOf	(C)Ljava/lang/Character;
    //   85: invokeinterface 251 3 0
    //   90: dup
    //   91: ifnull +22 -> 113
    //   94: astore 12
    //   96: aload 12
    //   98: astore 13
    //   100: aload 4
    //   102: aload 13
    //   104: invokeinterface 410 2 0
    //   109: pop
    //   110: goto +4 -> 114
    //   113: pop
    //   114: iinc 8 1
    //   117: goto -77 -> 40
    //   120: nop
    //   121: aload 4
    //   123: checkcast 434	java/util/List
    //   126: areturn
    // Line number table:
    //   Java source line #840	-> byte code offset #13
    //   Java source line #1592	-> byte code offset #27
    //   Java source line #1593	-> byte code offset #30
    //   Java source line #1594	-> byte code offset #33
    //   Java source line #1592	-> byte code offset #74
    //   Java source line #1592	-> byte code offset #100
    //   Java source line #1592	-> byte code offset #110
    //   Java source line #1592	-> byte code offset #114
    //   Java source line #1595	-> byte code offset #120
    //   Java source line #1596	-> byte code offset #121
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	127	0	$receiver	CharSequence
    //   0	127	1	transform	Function2
    //   0	127	2	$i$f$mapIndexedNotNull	int
    //   27	96	3	$receiver$iv	CharSequence
    //   27	96	4	destination$iv	Collection
    //   30	91	5	$receiver$iv$iv	CharSequence
    //   33	88	6	index$iv$iv	int
    //   63	54	9	item$iv$iv	char
    //   74	40	10	element$iv	char
    //   74	40	11	index$iv	int
    //   100	9	13	it$iv	Object
    //   100	9	14	$i$a$1$let	int
    //   74	40	15	$i$a$1$forEachIndexed	int
    //   30	91	16	$i$f$forEachIndexed	int
    //   27	96	17	$i$f$mapIndexedNotNullTo	int
  }
  
  /* Error */
  @NotNull
  public static final <R, C extends Collection<? super R>> C mapIndexedNotNullTo(@NotNull CharSequence $receiver, @NotNull C destination, @NotNull Function2<? super Integer, ? super Character, ? extends R> transform)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc 83
    //   3: invokestatic 89	kotlin/jvm/internal/Intrinsics:checkParameterIsNotNull	(Ljava/lang/Object;Ljava/lang/String;)V
    //   6: aload_1
    //   7: ldc_w 266
    //   10: invokestatic 89	kotlin/jvm/internal/Intrinsics:checkParameterIsNotNull	(Ljava/lang/Object;Ljava/lang/String;)V
    //   13: aload_2
    //   14: ldc_w 358
    //   17: invokestatic 89	kotlin/jvm/internal/Intrinsics:checkParameterIsNotNull	(Ljava/lang/Object;Ljava/lang/String;)V
    //   20: aload_0
    //   21: astore 4
    //   23: iconst_0
    //   24: istore 5
    //   26: aload 4
    //   28: astore 6
    //   30: iconst_0
    //   31: istore 7
    //   33: iload 7
    //   35: aload 6
    //   37: invokeinterface 60 1 0
    //   42: if_icmpge +70 -> 112
    //   45: aload 6
    //   47: iload 7
    //   49: invokeinterface 14 2 0
    //   54: istore 8
    //   56: iload 5
    //   58: iinc 5 1
    //   61: iload 8
    //   63: istore 9
    //   65: istore 10
    //   67: aload_2
    //   68: iload 10
    //   70: invokestatic 33	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   73: iload 9
    //   75: invokestatic 63	java/lang/Character:valueOf	(C)Ljava/lang/Character;
    //   78: invokeinterface 251 3 0
    //   83: dup
    //   84: ifnull +21 -> 105
    //   87: astore 11
    //   89: aload 11
    //   91: astore 12
    //   93: aload_1
    //   94: aload 12
    //   96: invokeinterface 410 2 0
    //   101: pop
    //   102: goto +4 -> 106
    //   105: pop
    //   106: iinc 7 1
    //   109: goto -76 -> 33
    //   112: nop
    //   113: aload_1
    //   114: areturn
    // Line number table:
    //   Java source line #850	-> byte code offset #20
    //   Java source line #1597	-> byte code offset #23
    //   Java source line #1598	-> byte code offset #26
    //   Java source line #850	-> byte code offset #67
    //   Java source line #850	-> byte code offset #93
    //   Java source line #850	-> byte code offset #102
    //   Java source line #850	-> byte code offset #106
    //   Java source line #1599	-> byte code offset #112
    //   Java source line #851	-> byte code offset #113
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	115	0	$receiver	CharSequence
    //   0	115	1	destination	Collection
    //   0	115	2	transform	Function2
    //   0	115	3	$i$f$mapIndexedNotNullTo	int
    //   23	90	4	$receiver$iv	CharSequence
    //   26	87	5	index$iv	int
    //   56	53	8	item$iv	char
    //   67	39	9	element	char
    //   67	39	10	index	int
    //   93	8	12	it	Object
    //   93	8	13	$i$a$1$let	int
    //   67	39	14	$i$a$1$forEachIndexed	int
    //   23	90	15	$i$f$forEachIndexed	int
  }
  
  /* Error */
  @NotNull
  public static final <R> List<R> mapNotNull(@NotNull CharSequence $receiver, @NotNull Function1<? super Character, ? extends R> transform)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc 83
    //   3: invokestatic 89	kotlin/jvm/internal/Intrinsics:checkParameterIsNotNull	(Ljava/lang/Object;Ljava/lang/String;)V
    //   6: aload_1
    //   7: ldc_w 358
    //   10: invokestatic 89	kotlin/jvm/internal/Intrinsics:checkParameterIsNotNull	(Ljava/lang/Object;Ljava/lang/String;)V
    //   13: aload_0
    //   14: astore_3
    //   15: new 436	java/util/ArrayList
    //   18: dup
    //   19: invokespecial 457	java/util/ArrayList:<init>	()V
    //   22: checkcast 406	java/util/Collection
    //   25: astore 4
    //   27: aload_3
    //   28: astore 5
    //   30: aload 5
    //   32: astore 6
    //   34: iconst_0
    //   35: istore 7
    //   37: iload 7
    //   39: aload 6
    //   41: invokeinterface 60 1 0
    //   46: if_icmpge +59 -> 105
    //   49: aload 6
    //   51: iload 7
    //   53: invokeinterface 14 2 0
    //   58: istore 8
    //   60: iload 8
    //   62: istore 9
    //   64: aload_1
    //   65: iload 9
    //   67: invokestatic 63	java/lang/Character:valueOf	(C)Ljava/lang/Character;
    //   70: invokeinterface 39 2 0
    //   75: dup
    //   76: ifnull +22 -> 98
    //   79: astore 10
    //   81: aload 10
    //   83: astore 11
    //   85: aload 4
    //   87: aload 11
    //   89: invokeinterface 410 2 0
    //   94: pop
    //   95: goto +4 -> 99
    //   98: pop
    //   99: iinc 7 1
    //   102: goto -65 -> 37
    //   105: nop
    //   106: aload 4
    //   108: checkcast 434	java/util/List
    //   111: areturn
    // Line number table:
    //   Java source line #872	-> byte code offset #13
    //   Java source line #1600	-> byte code offset #27
    //   Java source line #1601	-> byte code offset #30
    //   Java source line #1600	-> byte code offset #64
    //   Java source line #1600	-> byte code offset #85
    //   Java source line #1600	-> byte code offset #95
    //   Java source line #1600	-> byte code offset #99
    //   Java source line #1602	-> byte code offset #105
    //   Java source line #1603	-> byte code offset #106
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	112	0	$receiver	CharSequence
    //   0	112	1	transform	Function1
    //   0	112	2	$i$f$mapNotNull	int
    //   27	81	3	$receiver$iv	CharSequence
    //   27	81	4	destination$iv	Collection
    //   30	76	5	$receiver$iv$iv	CharSequence
    //   60	42	8	element$iv$iv	char
    //   64	35	9	element$iv	char
    //   85	9	11	it$iv	Object
    //   85	9	12	$i$a$1$let	int
    //   64	35	13	$i$a$1$forEach	int
    //   30	76	14	$i$f$forEach	int
    //   27	81	15	$i$f$mapNotNullTo	int
  }
  
  /* Error */
  @NotNull
  public static final <R, C extends Collection<? super R>> C mapNotNullTo(@NotNull CharSequence $receiver, @NotNull C destination, @NotNull Function1<? super Character, ? extends R> transform)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc 83
    //   3: invokestatic 89	kotlin/jvm/internal/Intrinsics:checkParameterIsNotNull	(Ljava/lang/Object;Ljava/lang/String;)V
    //   6: aload_1
    //   7: ldc_w 266
    //   10: invokestatic 89	kotlin/jvm/internal/Intrinsics:checkParameterIsNotNull	(Ljava/lang/Object;Ljava/lang/String;)V
    //   13: aload_2
    //   14: ldc_w 358
    //   17: invokestatic 89	kotlin/jvm/internal/Intrinsics:checkParameterIsNotNull	(Ljava/lang/Object;Ljava/lang/String;)V
    //   20: aload_0
    //   21: astore 4
    //   23: aload 4
    //   25: astore 5
    //   27: iconst_0
    //   28: istore 6
    //   30: iload 6
    //   32: aload 5
    //   34: invokeinterface 60 1 0
    //   39: if_icmpge +58 -> 97
    //   42: aload 5
    //   44: iload 6
    //   46: invokeinterface 14 2 0
    //   51: istore 7
    //   53: iload 7
    //   55: istore 8
    //   57: aload_2
    //   58: iload 8
    //   60: invokestatic 63	java/lang/Character:valueOf	(C)Ljava/lang/Character;
    //   63: invokeinterface 39 2 0
    //   68: dup
    //   69: ifnull +21 -> 90
    //   72: astore 9
    //   74: aload 9
    //   76: astore 10
    //   78: aload_1
    //   79: aload 10
    //   81: invokeinterface 410 2 0
    //   86: pop
    //   87: goto +4 -> 91
    //   90: pop
    //   91: iinc 6 1
    //   94: goto -64 -> 30
    //   97: nop
    //   98: aload_1
    //   99: areturn
    // Line number table:
    //   Java source line #880	-> byte code offset #20
    //   Java source line #1604	-> byte code offset #23
    //   Java source line #880	-> byte code offset #57
    //   Java source line #880	-> byte code offset #78
    //   Java source line #880	-> byte code offset #87
    //   Java source line #880	-> byte code offset #91
    //   Java source line #1605	-> byte code offset #97
    //   Java source line #881	-> byte code offset #98
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	100	0	$receiver	CharSequence
    //   0	100	1	destination	Collection
    //   0	100	2	transform	Function1
    //   0	100	3	$i$f$mapNotNullTo	int
    //   23	75	4	$receiver$iv	CharSequence
    //   53	41	7	element$iv	char
    //   57	34	8	element	char
    //   78	8	10	it	Object
    //   78	8	11	$i$a$1$let	int
    //   57	34	12	$i$a$1$forEach	int
    //   23	75	13	$i$f$forEach	int
  }
  
  /* Error */
  @SinceKotlin(version="1.2")
  @NotNull
  public static final <R> List<R> windowed(@NotNull CharSequence $receiver, int size, int step, boolean partialWindows, @NotNull Function1<? super CharSequence, ? extends R> transform)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc 83
    //   3: invokestatic 89	kotlin/jvm/internal/Intrinsics:checkParameterIsNotNull	(Ljava/lang/Object;Ljava/lang/String;)V
    //   6: aload 4
    //   8: ldc_w 358
    //   11: invokestatic 89	kotlin/jvm/internal/Intrinsics:checkParameterIsNotNull	(Ljava/lang/Object;Ljava/lang/String;)V
    //   14: iload_1
    //   15: iload_2
    //   16: invokestatic 680	kotlin/collections/SlidingWindowKt:checkWindowSizeStep	(II)V
    //   19: aload_0
    //   20: invokeinterface 60 1 0
    //   25: istore 5
    //   27: new 436	java/util/ArrayList
    //   30: dup
    //   31: iload 5
    //   33: iload_2
    //   34: iadd
    //   35: iconst_1
    //   36: isub
    //   37: iload_2
    //   38: idiv
    //   39: invokespecial 437	java/util/ArrayList:<init>	(I)V
    //   42: astore 6
    //   44: iconst_0
    //   45: istore 7
    //   47: iload 7
    //   49: iload 5
    //   51: if_icmpge +67 -> 118
    //   54: iload 7
    //   56: iload_1
    //   57: iadd
    //   58: istore 8
    //   60: iload 8
    //   62: iload 5
    //   64: if_icmple +18 -> 82
    //   67: iload_3
    //   68: ifeq +50 -> 118
    //   71: iload 5
    //   73: goto +11 -> 84
    //   76: nop
    //   77: nop
    //   78: athrow
    //   79: nop
    //   80: nop
    //   81: athrow
    //   82: iload 8
    //   84: istore 9
    //   86: aload 6
    //   88: aload 4
    //   90: aload_0
    //   91: iload 7
    //   93: iload 9
    //   95: invokeinterface 192 3 0
    //   100: invokeinterface 39 2 0
    //   105: invokevirtual 681	java/util/ArrayList:add	(Ljava/lang/Object;)Z
    //   108: pop
    //   109: iload 7
    //   111: iload_2
    //   112: iadd
    //   113: istore 7
    //   115: goto -68 -> 47
    //   118: aload 6
    //   120: checkcast 434	java/util/List
    //   123: areturn
    // Line number table:
    //   Java source line #1355	-> byte code offset #14
    //   Java source line #1356	-> byte code offset #19
    //   Java source line #1357	-> byte code offset #27
    //   Java source line #1358	-> byte code offset #44
    //   Java source line #1359	-> byte code offset #47
    //   Java source line #1360	-> byte code offset #54
    //   Java source line #1361	-> byte code offset #60
    //   Java source line #1362	-> byte code offset #86
    //   Java source line #1363	-> byte code offset #109
    //   Java source line #1359	-> byte code offset #115
    //   Java source line #1365	-> byte code offset #118
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	124	0	$receiver	CharSequence
    //   0	124	1	size	int
    //   0	124	2	step	int
    //   0	124	3	partialWindows	boolean
    //   0	124	4	transform	Function1
    //   27	97	5	thisSize	int
    //   44	80	6	result	ArrayList
    //   47	77	7	index	int
    //   60	55	8	end	int
    //   86	29	9	coercedEnd	int
  }
  
  public StringsKt___StringsKt() {}
}
