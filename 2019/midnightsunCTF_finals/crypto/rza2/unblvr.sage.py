
# This file was *autogenerated* from the file unblvr.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_65537 = Integer(65537); _sage_const_512 = Integer(512); _sage_const_0p5 = RealNumber('0.5'); _sage_const_235 = Integer(235); _sage_const_12568593503732225284833930665556838287412199439692821417647372971869231723559992154443706678410038339647264823124946805716114186285024175170040286493705539280834058460961400557745983656762142889655126327977159776509025806614615683229732063597008220981903454189924787333897642661119487550976064177525965960903757425676552365701751129959682193371999227133565308776511273796468549993234547730548169945552741777405821627017605337784463424463117997971328 = Integer(12568593503732225284833930665556838287412199439692821417647372971869231723559992154443706678410038339647264823124946805716114186285024175170040286493705539280834058460961400557745983656762142889655126327977159776509025806614615683229732063597008220981903454189924787333897642661119487550976064177525965960903757425676552365701751129959682193371999227133565308776511273796468549993234547730548169945552741777405821627017605337784463424463117997971328)
a = randint(_sage_const_0 , _sage_const_2 **_sage_const_235 )
p = next_prime(a * randint(_sage_const_0 , _sage_const_2 **_sage_const_512 ), proof=False)
q = next_prime(p + randint(_sage_const_0 , _sage_const_2 **_sage_const_512 ), proof=False)

N = 118173998641659433141031218423093267548048945830460552160732748274571974743297930821423113390029083098858035838064885829588967199550126084897009304331836294104589302387252278933370240317467378376797843379485665856003112996215247651060003047081838833325054418881162956647931078011461049685774070539302432802113792476309961767049580409488915273417272971605423056480946448420246170538977427027687185230659802277819960185028241326766028592105200802992171L
a = 47702774091583083413514954181005338733744246354146014100833529117112767L
e = _sage_const_65537 
c = _sage_const_12568593503732225284833930665556838287412199439692821417647372971869231723559992154443706678410038339647264823124946805716114186285024175170040286493705539280834058460961400557745983656762142889655126327977159776509025806614615683229732063597008220981903454189924787333897642661119487550976064177525965960903757425676552365701751129959682193371999227133565308776511273796468549993234547730548169945552741777405821627017605337784463424463117997971328 

#next_prime(a * RAND) * next_prime(p + RAND)

# mid = isqrt(n)
# mid = mid - (mid%a)
# for i in xrange(100000):
    # print i
    # if gcd(next_prime(mid, proof=False), n) != 1:
        # print i
        # print gcd(next_prime(mid), n)
        # break
    # else:
        # mid -= a


hidden = _sage_const_512 
tmp = isqrt((N)/(a))
q_approx = isqrt(N) - _sage_const_2 **_sage_const_512 
F = PolynomialRing(Zmod(N), implementation='NTL', names=('x',)); (x,) = F._first_ngens(1)
f = x - q_approx
roots = f.small_roots(X=_sage_const_2 **hidden, beta=_sage_const_0p5 )
print(roots)
for delta in roots:
    print('delta', delta)
    print('q_approx - delta', q_approx-delta)
    q = q_approx-delta
    p = int(N)/int(q)
    d = inverse_mod(_sage_const_65537 , (p-_sage_const_1 )*(q-_sage_const_1 ))
    print("d", d)
    decrypted = hex(int(pow(c,d,N)))
    print('flag =', decrypted[_sage_const_2 :-_sage_const_1 ].decode("hex"))

