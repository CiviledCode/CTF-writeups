import memory env_memory;

global g_a:int = 5247008;
export global data_end:int = 4120;

export table indirect_function_table:funcref(min: 7, max: 7);

data d_bbbbbbbbbbbbbbbbsaltplk3UQgi(offset: 1024) = 
  "bbbbbbbbbbbbbbbb\00salt\00%p\0a\00\00\00\00\00\00\00\9fl\df#\f4k:3*\ad"
  "\e3;+\ea\0cU\9b\13Q\f7\00\00\00\00\00\00\00\00\00\00\00\00g\c6isQ\ffJ\ec"
  ")\cd\ba\ab\f2\fb\e3F|\c2T\f8Hash incorrect\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00c|w{\f2ko\c50\01g+\fe\d7\abv\ca\82\c9}\faYG\f0\ad\d4\a2\af"
  "\9c\a4r\c0\b7\fd\93&6?\f7\cc4\a5\e5\f1q\d81\15\04\c7#\c3\18\96\05\9a\07"
  "\12\80\e2\eb'\b2u\09\83,\1a\1bnZ\a0R;\d6\b3)\e3/\84S\d1\00\ed \fc\b1[j"
  "\cb\be9JLX\cf\d0\ef\aa\fbCM3\85E\f9\02\7fP<\9f\a8Q\a3@\8f\92\9d8\f5\bc"
  "\b6\da!\10\ff\f3\d2\cd\0c\13\ec_\97D\17\c4\a7~=d]\19s`\81O\dc"*\90\88F"
  "\ee\b8\14\de^\0b\db\e02:\0aI\06$\\c2\d3\acb\91\95\e4y\e7\c87m\8d\d5N\a9"
  "lV\f4\eaez\ae\08\bax%.\1c\a6\b4\c6\e8\ddt\1fK\bd\8b\8ap>\b5fH\03\f6\0e"
  "a5W\b9\86\c1\1d\9e\e1\f8\98\11i\d9\8e\94\9b\1e\87\e9\ceU(\df\8c\a1\89\0d"
  "\bf\e6BhA\99-\0f\b0T\bb\16\8d\01\02\04\08\10 @\80\1b6-+   0X0x\00(null"
  ")\00\00\00\00\00\11\00\0a\00\11\11\11\00\00\00\00\05\00\00\00\00\00\00"
  "\09\00\00\00\00\0b\00\00\00\00\00\00\00\00\11\00\0f\0a\11\11\11\03\0a\07"
  "\00\01\00\09\0b\0b\00\00\09\06\0b\00\00\0b\00\06\11\00\00\00\11\11\11\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0b\00\00\00\00\00\00\00\00"
  "\11\00\0a\0a\11\11\11\00\0a\00\00\02\00\09\0b\00\00\00\09\00\0b\00\00\0b"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\0c\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\0c\00\00\00\00\09"
  "\0c\00\00\00\00\00\0c\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\0d"
  "\00\00\00\04\0d\00\00\00\00\09\0e\00\00\00\00\00\0e\00\00\0e\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00"
  "\00\00\00\00\00\00\00\00\00\0f\00\00\00\00\0f\00\00\00\00\09\10\00\00\00"
  "\00\00\10\00\00\10\00\00\12\00\00\00\12\12\12\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\12\12\12\00"
  "\00\00\00\00\00\09\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0b\00\00\00\00\00\00"
  "\00\00\00\00\00\0a\00\00\00\00\0a\00\00\00\00\09\0b\00\00\00\00\00\0b\00"
  "\00\0b\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\0c\00\00\00"
  "\00\09\0c\00\00\00\00\00\0c\00\00\0c\00\000123456789ABCDEF-0X+0X 0X-0x"
  "+0x 0x\00inf\00INF\00nan\00NAN\00.\00\00\00\00 \09\00\00";
data d_10009zKAV_XItg3P(offset: 1952) = 
  "10.0.0.9\00\00\00\00\00\00\00\00\fc\a7\9c\e0\0c\8a\bazK\fbA\06\19\e8V_"
  "X\c8\fe\89\b9I^}\ef\ee\b1\f9\0f:\10\f3,\9c\e7\ac\f5\99$\c5t\c5\b1\a3;["
  "g(\fd\1f\b0\003\00\00\00\00\00\00\00\00\00\00\00\80\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\f0\09\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  " \10P\00\00\00\00\00\05\00\00\00\00\00\00\00\00\00\00\00\04\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\05\00\00\00\06"
  "\00\00\00\18\0c\00\00\00\04\00\00\00\00\00\00\00\00\00\00\01\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\0a\ff\ff\ff\ff\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00 \09\00\00";
data d_c(offset: 2496) = 
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00";

import function env_sys_munmap(a:int, b:int):int;

import function env_sys_mmap2(a:int, b:int, c:int, d:int, e:int, f:int):int;

import function env_emscripten_resize_heap(a:int):int;

import function env_emscripten_memcpy_big(a:int, b:int, c:int):int;

import function wasi_snapshot_preview1_fd_write(a:int, b:int, c:int, d:int):int;

import function env_setTempRet0(a:int);

export function wasm_call_ctors() {
}

function f_h(a:int, b:int, c:int) {
  var d:int = g_a;
  var e:int = 160;
  var f:int = d - e;
  var g:int_ptr = f;
  g_a = f;
  var h:int = 0;
  g[39] = a;
  g[38] = b;
  g[37] = c;
  var i:int = g[39];
  var j:int = f_sc(i);
  var k:int = f;
  g[36] = k;
  var l:int = 2;
  var m:int = j << l;
  var n:int = 15;
  var o:int = m + n;
  var p:int = -16;
  var q:int = o & p;
  var r:int = f;
  var s:int = r - q;
  f = s;
  g_a = f;
  g[35] = j;
  g[34] = h;
  g[33] = h;
  loop L_b {
    var t:int = g[33];
    var u:int = g[39];
    var v:int = f_sc(u);
    var w:int = t;
    var x:int = v;
    var y:int = w < x;
    var z:int = 1;
    var aa:int = y & z;
    if (eqz(aa)) goto B_a;
    loop L_d {
      var ba:int = 46;
      var ca:int = g[38];
      var da:int = g[34];
      var ea:ubyte_ptr = ca + da;
      var fa:int = ea[0];
      var ga:int = 24;
      var ha:int = fa << ga;
      var ia:int = ha >> ga;
      var ja:int = ia;
      var ka:int = ba;
      var la:int = ja == ka;
      var ma:int = 1;
      var na:int = la & ma;
      if (eqz(na)) goto B_c;
      var oa:int = g[34];
      var pa:int = 1;
      var qa:int = oa + pa;
      g[34] = qa;
      continue L_d;
    }
    unreachable;
    label B_c:
    var ra:int = 0;
    var sa:int = g[38];
    var ta:int = f_sc(sa);
    var ua:int = 1;
    var va:int = ta + ua;
    var wa:int = malloc(va);
    g[32] = wa;
    g[31] = ra;
    loop L_f {
      var xa:int = g[31];
      var ya:int = g[38];
      var za:int = f_sc(ya);
      var ab:int = xa;
      var bb:int = za;
      var cb:int = ab < bb;
      var db:int = 1;
      var eb:int = cb & db;
      if (eqz(eb)) goto B_e;
      var fb:int = g[31];
      var gb:int = g[34];
      var hb:int = fb;
      var ib:int = gb;
      var jb:int = hb == ib;
      var kb:int = 1;
      var lb:int = jb & kb;
      if (eqz(lb)) goto B_h;
      var mb:int = g[39];
      var nb:int = g[33];
      var ob:int = g[39];
      var pb:int = f_sc(ob);
      var qb:int = nb % pb;
      var rb:ubyte_ptr = mb + qb;
      var sb:int = rb[0];
      var tb:int = g[32];
      var ub:int = g[31];
      var vb:byte_ptr = tb + ub;
      vb[0] = sb;
      goto B_g;
      label B_h:
      var wb:int = g[38];
      var xb:int = g[31];
      var yb:ubyte_ptr = wb + xb;
      var zb:int = yb[0];
      var ac:int = g[32];
      var bc:int = g[31];
      var cc:byte_ptr = ac + bc;
      cc[0] = zb;
      label B_g:
      var dc:int = g[31];
      var ec:int = 1;
      var fc:int = dc + ec;
      g[31] = fc;
      continue L_f;
    }
    unreachable;
    label B_e:
    var gc:int = 0;
    var hc:int = g[32];
    var ic:int = g[38];
    var jc:int = f_sc(ic);
    var kc:byte_ptr = hc + jc;
    kc[0] = gc;
    var lc:int = g[32];
    var mc:int = g[33];
    var nc:int = 2;
    var oc:int = mc << nc;
    var pc:int_ptr = s + oc;
    pc[0] = lc;
    var qc:int = g[34];
    var rc:int = 1;
    var sc:int = qc + rc;
    g[34] = sc;
    var tc:int = g[34];
    var uc:int = g[38];
    var vc:int = f_sc(uc);
    var wc:int = tc % vc;
    g[34] = wc;
    var xc:int = g[33];
    var yc:int = 1;
    var zc:int = xc + yc;
    g[33] = zc;
    continue L_b;
  }
  unreachable;
  label B_a:
  var ad:int = 0;
  var bd:int = 1041;
  g[30] = bd;
  var cd:int = g[39];
  var dd:int = f_sc(cd);
  var ed:int = 5;
  var fd:int = dd << ed;
  var gd:int = malloc(fd);
  g[29] = gd;
  g[34] = ad;
  g[28] = ad;
  loop L_j {
    var hd:int = g[28];
    var id:int = g[39];
    var jd:int = f_sc(id);
    var kd:int = hd;
    var ld:int = jd;
    var md:int = kd < ld;
    var nd:int = 1;
    var od:int = md & nd;
    if (eqz(od)) goto B_i;
    var pd:int = 0;
    var lg:long = 1024L;
    var qd:int = 8;
    var rd:int = 1;
    var sd:int = 32;
    var td:int = malloc(sd);
    g[27] = td;
    var ud:int = g[28];
    var vd:int = 2;
    var wd:int = ud << vd;
    var xd:int_ptr = s + wd;
    var yd:int = xd[0];
    var zd:int = g[28];
    var ae:int = 2;
    var be:int = zd << ae;
    var ce:int_ptr = s + be;
    var de:int = ce[0];
    var ee:int = f_sc(de);
    var fe:int = g[30];
    var ge:int = g[30];
    var he:int = f_sc(ge);
    var ie:int = g[27];
    f_m(yd, ee, fe, he, lg, qd, rd, ie, sd);
    g[26] = pd;
    loop L_l {
      var je:int = 32;
      var ke:int = g[26];
      var le:int = ke;
      var me:int = je;
      var ne:int = le < me;
      var oe:int = 1;
      var pe:int = ne & oe;
      if (eqz(pe)) goto B_k;
      var qe:int = g[27];
      var re:int = g[26];
      var se:ubyte_ptr = qe + re;
      var te:int = se[0];
      var ue:int = g[29];
      var ve:int = g[34];
      var we:byte_ptr = ue + ve;
      we[0] = te;
      var xe:int = g[34];
      var ye:int = 1;
      var ze:int = xe + ye;
      g[34] = ze;
      var af:int = g[26];
      var bf:int = 1;
      var cf:int = af + bf;
      g[26] = cf;
      continue L_l;
    }
    unreachable;
    label B_k:
    var df:int = g[27];
    free(df);
    var ef:int = g[28];
    var ff:int = 1;
    var gf:int = ef + ff;
    g[28] = gf;
    continue L_j;
  }
  unreachable;
  label B_i:
  var hf:int = 0;
  var if:int = 8;
  var jf:int = g + if;
  var kf:int = jf;
  f_ja(kf);
  var lf:int = g[29];
  var mf:int = g[39];
  var nf:int = f_sc(mf);
  var of:int = 5;
  var pf:int = nf << of;
  f_ka(kf, lf, pf);
  var qf:int = g[37];
  f_la(qf, kf);
  g[1] = hf;
  loop L_n {
    var rf:int = g[1];
    var sf:int = g[39];
    var tf:int = f_sc(sf);
    var uf:int = rf;
    var vf:int = tf;
    var wf:int = uf < vf;
    var xf:int = 1;
    var yf:int = wf & xf;
    if (eqz(yf)) goto B_m;
    var zf:int = g[1];
    var ag:int = 2;
    var bg:int = zf << ag;
    var cg:int_ptr = s + bg;
    var dg:int = cg[0];
    free(dg);
    var eg:int = g[1];
    var fg:int = 1;
    var gg:int = eg + fg;
    g[1] = gg;
    continue L_n;
  }
  unreachable;
  label B_m:
  var hg:int = g[29];
  free(hg);
  var ig:int = g[36];
  f = ig;
  var jg:int = 160;
  var kg:int = g + jg;
  g_a = kg;
}

function f_i(a:int, b:int, c:int, d:int) {
  var e:int = g_a;
  var f:int = 32;
  var g:int_ptr = e - f;
  var h:int = 0;
  g[7] = a;
  g[6] = b;
  g[5] = c;
  g[4] = d;
  g[3] = h;
  loop L_b {
    var i:int = g[3];
    var j:int = g[6];
    var k:int = i;
    var l:int = j;
    var m:int = k < l;
    var n:int = 1;
    var o:int = m & n;
    if (eqz(o)) goto B_a;
    var p:int = g[7];
    var q:int = g[3];
    var r:ubyte_ptr = p + q;
    var s:int = r[0];
    var t:int = 255;
    var u:int = s & t;
    var v:int = g[5];
    var w:int = g[3];
    var x:ubyte_ptr = v + w;
    var y:int = x[0];
    var z:int = 255;
    var aa:int = y & z;
    var ba:int = u ^ aa;
    var ca:int = g[4];
    var da:int = g[3];
    var ea:byte_ptr = ca + da;
    ea[0] = ba;
    var fa:int = g[3];
    var ga:int = 1;
    var ha:int = fa + ga;
    g[3] = ha;
    continue L_b;
  }
  unreachable;
  label B_a:
}

function f_j(a:int, b:int, c:int):int {
  var d:int = g_a;
  var e:int = 32;
  var f:int = d - e;
  var g:int = 0;
  var h:int = 1;
  f[7]:int = a;
  f[6]:int = b;
  f[5]:int = c;
  f[19]:byte = h;
  f[3]:int = g;
  loop L_b {
    var i:int = f[3]:int;
    var j:int = f[5]:int;
    var k:int = i;
    var l:int = j;
    var m:int = k < l;
    var n:int = 1;
    var o:int = m & n;
    if (eqz(o)) goto B_a;
    var p:int = 0;
    var q:int = f[7]:int;
    var r:int = f[3]:int;
    var s:ubyte_ptr = q + r;
    var t:int = s[0];
    var u:int = 255;
    var v:int = t & u;
    var w:int = f[6]:int;
    var x:int = f[3]:int;
    var y:ubyte_ptr = w + x;
    var z:int = y[0];
    var aa:int = 255;
    var ba:int = z & aa;
    var ca:int = v;
    var da:int = ba;
    var ea:int = ca == da;
    var fa:int = 1;
    var ga:int = ea & fa;
    var ha:int = f[19]:ubyte;
    var ia:int = 1;
    var ja:int = ha & ia;
    var ka:int = ja & ga;
    var la:int = ka;
    var ma:int = p;
    var na:int = la != ma;
    var oa:int = 1;
    var pa:int = na & oa;
    f[19]:byte = pa;
    var qa:int = f[3]:int;
    var ra:int = 1;
    var sa:int = qa + ra;
    f[3]:int = sa;
    continue L_b;
  }
  unreachable;
  label B_a:
  var ta:int = f[19]:ubyte;
  var ua:int = 1;
  var va:int = ta & ua;
  return va;
}

export function breakTheSkull(a:int):int {
  var b:int = g_a;
  var c:int = 16;
  var d:int_ptr = b - c;
  g_a = d;
  var e:int = 1952;
  d[3] = a;
  d[2] = e;
  var f:int = 1;
  d[0] = f;
  var g:int = 1046;
  f_pc(g, d);
  var h:int = 1;
  var i:int_ptr = 0;
  i[624] = h;
  var j:int_ptr = 0;
  var k:int = j[624];
  var l:int = d[3];
  var m:int = d[2];
  var n:int = call_indirect(l, m, k);
  var o:int = 16;
  var p:int = d + o;
  g_a = p;
  return n;
}

function f_l(a:int, b:int):int {
  var c:int = g_a;
  var d:int = 288;
  var e:int_ptr = c - d;
  g_a = e;
  var f:int = 20;
  var g:int = 240;
  var h:int = e + g;
  var i:long_ptr = h;
  var j:int = 208;
  var k:int = e + j;
  var l:long_ptr = k;
  e[70] = a;
  e[69] = b;
  var m:int = malloc(f);
  e[68] = m;
  var n:int = e[70];
  var o:int = e[69];
  var p:int = e[68];
  f_h(n, o, p);
  var q:int = 16;
  var r:int_ptr = i + q;
  var s:int = 0;
  var t:int = s[268]:int;
  r[0] = t;
  var u:int = 8;
  var v:long_ptr = i + u;
  var mb:long = s[133]:long;
  v[0] = mb;
  var nb:long = s[132]:long;
  i[0] = nb;
  var w:int = 16;
  var x:int_ptr = l + w;
  var y:int = 0;
  var z:int = y[276]:int;
  x[0] = z;
  var aa:int = 8;
  var ba:long_ptr = l + aa;
  var ob:long = y[137]:long;
  ba[0] = ob;
  var pb:long = y[136]:long;
  l[0] = pb;
  var ca:int = malloc(f);
  e[51] = ca;
  var da:int = e[68];
  var ea:int = e[51];
  f_i(da, f, l, ea);
  var fa:int = e[51];
  var ga:int = f_j(i, fa, f);
  var ha:int = 1;
  var ia:int = ga & ha;
  if (ia) goto B_b;
  var ja:int = 1108;
  e[71] = ja;
  goto B_a;
  label B_b:
  var ka:int = 0;
  var la:int = 8;
  var ma:int = e + la;
  var na:int = ma;
  var oa:int = 1024;
  var pa:int = e[68];
  f_na(na, pa, oa);
  var qa:int_ptr = 0;
  var ra:int = qa[505];
  var sa:int = malloc(ra);
  e[1] = sa;
  var ta:int = e[1];
  var ua:int_ptr = 0;
  var va:int = ua[505];
  var wa:int = 1;
  var xa:int = va + wa;
  var ya:int = 1968;
  f_ic(ta, ya, xa);
  var za:int = e[1];
  var ab:int_ptr = 0;
  var bb:int = ab[505];
  f_ta(na, za, bb);
  var cb:int = e[1];
  var db:int_ptr = 0;
  var eb:int = db[505];
  var fb:byte_ptr = cb + eb;
  fb[0] = ka;
  var gb:int = e[51];
  free(gb);
  var hb:int = e[68];
  free(hb);
  var ib:int = e[1];
  e[71] = ib;
  label B_a:
  var jb:int = e[71];
  var kb:int = 288;
  var lb:int = e + kb;
  g_a = lb;
  return jb;
}

function f_m(a:int, b:int, c:int, d:int, e:long, f:int, g:int, h:int, i:int):int {
  var j:int = g_a;
  var k:int = 80;
  var l:int = j - k;
  g_a = l;
  var nf:long = 1073741824L;
  l[18]:int = a;
  l[17]:int = b;
  l[16]:int = c;
  l[15]:int = d;
  l[6]:long = e;
  l[11]:int = f;
  l[10]:int = g;
  l[9]:int = h;
  l[8]:int = i;
  var m:int = l[11]:int;
  var n:int = m;
  var of:long = i64_extend_i32_u(n);
  var o:int = l[10]:int;
  var p:int = o;
  var pf:long = i64_extend_i32_u(p);
  var qf:long = of * pf;
  var rf:long = qf;
  var sf:long = nf;
  var q:int = rf >= sf;
  var r:int = 1;
  var s:int = q & r;
  if (eqz(s)) goto B_c;
  var t:int = 22;
  var u:int_ptr = errno_location();
  u[0] = t;
  goto B_b;
  label B_c:
  var v:int = l[11]:int;
  if (eqz(v)) goto B_e;
  var w:int = l[10]:int;
  if (w) goto B_d;
  label B_e:
  var x:int = 28;
  var y:int_ptr = errno_location();
  y[0] = x;
  goto B_b;
  label B_d:
  var tf:long = 0L;
  var uf:long = l[6]:long;
  var vf:long = l[6]:long;
  var wf:long = 1L;
  var xf:long = vf - wf;
  var yf:long = uf & xf;
  var zf:long = yf;
  var ag:long = tf;
  var z:int = zf != ag;
  var aa:int = 1;
  var ba:int = z & aa;
  if (ba) goto B_g;
  var bg:long = 2L;
  var cg:long = l[6]:long;
  var dg:long = cg;
  var eg:long = bg;
  var ca:int = dg < eg;
  var da:int = 1;
  var ea:int = ca & da;
  if (eqz(ea)) goto B_f;
  label B_g:
  var fa:int = 28;
  var ga:int_ptr = errno_location();
  ga[0] = fa;
  goto B_b;
  label B_f:
  var ha:int = 33554431;
  var ia:int = l[11]:int;
  var ja:int = l[10]:int;
  var ka:int = ha / ja;
  var la:int = ia;
  var ma:int = ka;
  var na:int = la > ma;
  var oa:int = 1;
  var pa:int = na & oa;
  if (pa) goto B_i;
  var qa:int = 16777215;
  var ra:int = l[11]:int;
  var sa:int = ra;
  var ta:int = qa;
  var ua:int = sa > ta;
  var va:int = 1;
  var wa:int = ua & va;
  if (wa) goto B_i;
  var xa:int = 33554431;
  var fg:long = l[6]:long;
  var ya:int = l[11]:int;
  var za:int = xa / ya;
  var ab:int = za;
  var gg:long = i64_extend_i32_u(ab);
  var hg:long = fg;
  var ig:long = gg;
  var bb:int = hg > ig;
  var cb:int = 1;
  var db:int = bb & cb;
  if (eqz(db)) goto B_h;
  label B_i:
  var eb:int = 48;
  var fb:int_ptr = errno_location();
  fb[0] = eb;
  goto B_b;
  label B_h:
  var gb:int = 0;
  var hb:int = l[11]:int;
  var ib:int = 7;
  var jb:int = hb << ib;
  var kb:int = l[10]:int;
  var lb:int = jb * kb;
  var mb:int = 63;
  var nb:int = lb + mb;
  var ob:int = malloc(nb);
  l[7]:int = ob;
  var pb:int = ob;
  var qb:int = gb;
  var rb:int = pb == qb;
  var sb:int = 1;
  var tb:int = rb & sb;
  if (eqz(tb)) goto B_j;
  goto B_b;
  label B_j:
  var ub:int = 0;
  var vb:int = l[7]:int;
  var wb:int = 63;
  var xb:int = vb + wb;
  var yb:int = -64;
  var zb:int = xb & yb;
  l[4]:int = zb;
  var ac:int = l[11]:int;
  var bc:int = 8;
  var cc:int = ac << bc;
  var dc:int = 64;
  var ec:int = cc + dc;
  var fc:int = 63;
  var gc:int = ec + fc;
  var hc:int = malloc(gc);
  l[5]:int = hc;
  var ic:int = hc;
  var jc:int = ub;
  var kc:int = ic == jc;
  var lc:int = 1;
  var mc:int = kc & lc;
  if (eqz(mc)) goto B_l;
  goto B_k;
  label B_l:
  var nc:int = -1;
  var oc:int = 0;
  var pc:int = 3;
  var qc:int = 34;
  var jg:long = 0L;
  var rc:int = l[5]:int;
  var sc:int = 63;
  var tc:int = rc + sc;
  var uc:int = -64;
  var vc:int = tc & uc;
  l[2]:int = vc;
  var wc:int = l[11]:int;
  var xc:int = 7;
  var yc:int = wc << xc;
  var zc:int = yc;
  var kg:long = i64_extend_i32_u(zc);
  var lg:long = l[6]:long;
  var mg:long = kg * lg;
  var ad:int = i32_wrap_i64(mg);
  var bd:int = f_za(oc, ad, pc, qc, nc, jg);
  l[6]:int = bd;
  var cd:int = bd;
  var dd:int = nc;
  var ed:int = cd == dd;
  var fd:int = 1;
  var gd:int = ed & fd;
  if (eqz(gd)) goto B_n;
  goto B_m;
  label B_n:
  var hd:int = 0;
  var ng:long = 1L;
  var id:int = l[6]:int;
  l[3]:int = id;
  var jd:int = l[18]:int;
  var kd:int = l[17]:int;
  var ld:int = l[16]:int;
  var md:int = l[15]:int;
  var nd:int = l[4]:int;
  var od:int = l[10]:int;
  var pd:int = 7;
  var qd:int = od << pd;
  var rd:int = l[11]:int;
  var sd:int = qd * rd;
  f_ga(jd, kd, ld, md, ng, nd, sd);
  l[1]:int = hd;
  loop L_p {
    var td:int = l[1]:int;
    var ud:int = l[10]:int;
    var vd:int = td;
    var wd:int = ud;
    var xd:int = vd < wd;
    var yd:int = 1;
    var zd:int = xd & yd;
    if (eqz(zd)) goto B_o;
    var ae:int = l[4]:int;
    var be:int = l[1]:int;
    var ce:int = 7;
    var de:int = be << ce;
    var ee:int = l[11]:int;
    var fe:int = de * ee;
    var ge:int = ae + fe;
    var he:int = l[11]:int;
    var og:long = l[6]:long;
    var ie:int = l[3]:int;
    var je:int = l[2]:int;
    f_n(ge, he, og, ie, je);
    var ke:int = l[1]:int;
    var le:int = 1;
    var me:int = ke + le;
    l[1]:int = me;
    continue L_p;
  }
  unreachable;
  label B_o:
  var pg:long = 1L;
  var ne:int = l[18]:int;
  var oe:int = l[17]:int;
  var pe:int = l[4]:int;
  var qe:int = l[10]:int;
  var re:int = 7;
  var se:int = qe << re;
  var te:int = l[11]:int;
  var ue:int = se * te;
  var ve:int = l[9]:int;
  var we:int = l[8]:int;
  f_ga(ne, oe, pe, ue, pg, ve, we);
  var xe:int = l[6]:int;
  var ye:int = l[11]:int;
  var ze:int = 7;
  var af:int = ye << ze;
  var bf:int = af;
  var qg:long = i64_extend_i32_u(bf);
  var rg:long = l[6]:long;
  var sg:long = qg * rg;
  var cf:int = i32_wrap_i64(sg);
  var df:int = f_ya(xe, cf);
  if (eqz(df)) goto B_q;
  goto B_m;
  label B_q:
  var ef:int = 0;
  var ff:int = l[5]:int;
  free(ff);
  var gf:int = l[7]:int;
  free(gf);
  l[19]:int = ef;
  goto B_a;
  label B_m:
  var hf:int = l[5]:int;
  free(hf);
  label B_k:
  var if:int = l[7]:int;
  free(if);
  label B_b:
  var jf:int = -1;
  l[19]:int = jf;
  label B_a:
  var kf:int = l[19]:int;
  var lf:int = 80;
  var mf:int = l + lf;
  g_a = mf;
  return kf;
}

function f_n(a:int, b:int, c:long, d:int, e:int) {
  var f:int = g_a;
  var g:int = 64;
  var h:int = f - g;
  g_a = h;
  var i:int = 0;
  h[15]:int = a;
  h[14]:int = b;
  h[6]:long = c;
  h[11]:int = d;
  h[10]:int = e;
  var j:int = h[10]:int;
  h[9]:int = j;
  var k:int = h[10]:int;
  var l:int = h[14]:int;
  var m:int = 5;
  var n:int = l << m;
  var o:int = 2;
  var p:int = n << o;
  var q:int = k + p;
  h[8]:int = q;
  var r:int = h[10]:int;
  var s:int = h[14]:int;
  var t:int = 6;
  var u:int = s << t;
  var v:int = 2;
  var w:int = u << v;
  var x:int = r + w;
  h[7]:int = x;
  h[1]:int = i;
  loop L_b {
    var y:int = h[1]:int;
    var z:int = h[14]:int;
    var aa:int = 5;
    var ba:int = z << aa;
    var ca:int = y;
    var da:int = ba;
    var ea:int = ca < da;
    var fa:int = 1;
    var ga:int = ea & fa;
    if (eqz(ga)) goto B_a;
    var ha:int = h[15]:int;
    var ia:int = h[1]:int;
    var ja:int = 2;
    var ka:int = ia << ja;
    var la:int = ha + ka;
    var ma:int = f_o(la);
    var na:int = h[9]:int;
    var oa:int = h[1]:int;
    var pa:int = 2;
    var qa:int = oa << pa;
    var ra:int_ptr = na + qa;
    ra[0] = ma;
    var sa:int = h[1]:int;
    var ta:int = 1;
    var ua:int = sa + ta;
    h[1]:int = ua;
    continue L_b;
  }
  unreachable;
  label B_a:
  var ve:long = 0L;
  h[2]:long = ve;
  loop L_d {
    var we:long = h[2]:long;
    var xe:long = h[6]:long;
    var ye:long = we;
    var ze:long = xe;
    var va:int = ye < ze;
    var wa:int = 1;
    var xa:int = va & wa;
    if (eqz(xa)) goto B_c;
    var ya:int = h[11]:int;
    var af:long = h[2]:long;
    var za:int = h[14]:int;
    var ab:int = 5;
    var bb:int = za << ab;
    var cb:int = bb;
    var bf:long = i64_extend_i32_u(cb);
    var cf:long = af * bf;
    var db:int = i32_wrap_i64(cf);
    var eb:int = 2;
    var fb:int = db << eb;
    var gb:int = ya + fb;
    var hb:int = h[9]:int;
    var ib:int = h[14]:int;
    var jb:int = 7;
    var kb:int = ib << jb;
    f_p(gb, hb, kb);
    var lb:int = h[9]:int;
    var mb:int = h[8]:int;
    var nb:int = h[7]:int;
    var ob:int = h[14]:int;
    f_q(lb, mb, nb, ob);
    var pb:int = h[11]:int;
    var df:long = h[2]:long;
    var ef:long = 1L;
    var ff:long = df + ef;
    var qb:int = h[14]:int;
    var rb:int = 5;
    var sb:int = qb << rb;
    var tb:int = sb;
    var gf:long = i64_extend_i32_u(tb);
    var hf:long = ff * gf;
    var ub:int = i32_wrap_i64(hf);
    var vb:int = 2;
    var wb:int = ub << vb;
    var xb:int = pb + wb;
    var yb:int = h[8]:int;
    var zb:int = h[14]:int;
    var ac:int = 7;
    var bc:int = zb << ac;
    f_p(xb, yb, bc);
    var cc:int = h[8]:int;
    var dc:int = h[9]:int;
    var ec:int = h[7]:int;
    var fc:int = h[14]:int;
    f_q(cc, dc, ec, fc);
    var if:long = h[2]:long;
    var jf:long = 2L;
    var kf:long = if + jf;
    h[2]:long = kf;
    continue L_d;
  }
  unreachable;
  label B_c:
  var lf:long = 0L;
  h[2]:long = lf;
  loop L_f {
    var mf:long = h[2]:long;
    var nf:long = h[6]:long;
    var of:long = mf;
    var pf:long = nf;
    var gc:int = of < pf;
    var hc:int = 1;
    var ic:int = gc & hc;
    if (eqz(ic)) goto B_e;
    var jc:int = h[9]:int;
    var kc:int = h[14]:int;
    var qf:long = f_r(jc, kc);
    var rf:long = h[6]:long;
    var sf:long = 1L;
    var tf:long = rf - sf;
    var uf:long = qf & tf;
    h[1]:long = uf;
    var lc:int = h[9]:int;
    var mc:int = h[11]:int;
    var vf:long = h[1]:long;
    var nc:int = h[14]:int;
    var oc:int = 5;
    var pc:int = nc << oc;
    var qc:int = pc;
    var wf:long = i64_extend_i32_u(qc);
    var xf:long = vf * wf;
    var rc:int = i32_wrap_i64(xf);
    var sc:int = 2;
    var tc:int = rc << sc;
    var uc:int = mc + tc;
    var vc:int = h[14]:int;
    var wc:int = 7;
    var xc:int = vc << wc;
    f_s(lc, uc, xc);
    var yc:int = h[9]:int;
    var zc:int = h[8]:int;
    var ad:int = h[7]:int;
    var bd:int = h[14]:int;
    f_q(yc, zc, ad, bd);
    var cd:int = h[8]:int;
    var dd:int = h[14]:int;
    var yf:long = f_r(cd, dd);
    var zf:long = h[6]:long;
    var ag:long = 1L;
    var bg:long = zf - ag;
    var cg:long = yf & bg;
    h[1]:long = cg;
    var ed:int = h[8]:int;
    var fd:int = h[11]:int;
    var dg:long = h[1]:long;
    var gd:int = h[14]:int;
    var hd:int = 5;
    var id:int = gd << hd;
    var jd:int = id;
    var eg:long = i64_extend_i32_u(jd);
    var fg:long = dg * eg;
    var kd:int = i32_wrap_i64(fg);
    var ld:int = 2;
    var md:int = kd << ld;
    var nd:int = fd + md;
    var od:int = h[14]:int;
    var pd:int = 7;
    var qd:int = od << pd;
    f_s(ed, nd, qd);
    var rd:int = h[8]:int;
    var sd:int = h[9]:int;
    var td:int = h[7]:int;
    var ud:int = h[14]:int;
    f_q(rd, sd, td, ud);
    var gg:long = h[2]:long;
    var hg:long = 2L;
    var ig:long = gg + hg;
    h[2]:long = ig;
    continue L_f;
  }
  unreachable;
  label B_e:
  var vd:int = 0;
  h[1]:int = vd;
  loop L_h {
    var wd:int = h[1]:int;
    var xd:int = h[14]:int;
    var yd:int = 5;
    var zd:int = xd << yd;
    var ae:int = wd;
    var be:int = zd;
    var ce:int = ae < be;
    var de:int = 1;
    var ee:int = ce & de;
    if (eqz(ee)) goto B_g;
    var fe:int = h[15]:int;
    var ge:int = h[1]:int;
    var he:int = 2;
    var ie:int = ge << he;
    var je:int = fe + ie;
    var ke:int = h[9]:int;
    var le:int = h[1]:int;
    var me:int = 2;
    var ne:int = le << me;
    var oe:int_ptr = ke + ne;
    var pe:int = oe[0];
    f(je, pe);
    var qe:int = h[1]:int;
    var re:int = 1;
    var se:int = qe + re;
    h[1]:int = se;
    continue L_h;
  }
  unreachable;
  label B_g:
  var te:int = 64;
  var ue:int = h + te;
  g_a = ue;
}

function f_o(a:int):int {
  var b:int = g_a;
  var c:int = 16;
  var d:int_ptr = b - c;
  d[3] = a;
  var e:int = d[3];
  d[2] = e;
  var f:ubyte_ptr = d[2];
  var g:int = f[0];
  var h:int = 255;
  var i:int = g & h;
  var j:ubyte_ptr = d[2];
  var k:int = j[1];
  var l:int = 255;
  var m:int = k & l;
  var n:int = 8;
  var o:int = m << n;
  var p:int = i + o;
  var q:ubyte_ptr = d[2];
  var r:int = q[2];
  var s:int = 255;
  var t:int = r & s;
  var u:int = 16;
  var v:int = t << u;
  var w:int = p + v;
  var x:ubyte_ptr = d[2];
  var y:int = x[3];
  var z:int = 255;
  var aa:int = y & z;
  var ba:int = 24;
  var ca:int = aa << ba;
  var da:int = w + ca;
  return da;
}

function f_p(a:int, b:int, c:int) {
  var d:int = g_a;
  var e:int = 32;
  var f:int_ptr = d - e;
  var g:int = 0;
  f[7] = a;
  f[6] = b;
  f[5] = c;
  var h:int = f[7];
  f[4] = h;
  var i:int = f[6];
  f[3] = i;
  var j:int = f[5];
  var k:int = 2;
  var l:int = j >> k;
  f[2] = l;
  f[1] = g;
  loop L_b {
    var m:int = f[1];
    var n:int = f[2];
    var o:int = m;
    var p:int = n;
    var q:int = o < p;
    var r:int = 1;
    var s:int = q & r;
    if (eqz(s)) goto B_a;
    var t:int = f[3];
    var u:int = f[1];
    var v:int = 2;
    var w:int = u << v;
    var x:int_ptr = t + w;
    var y:int = x[0];
    var z:int = f[4];
    var aa:int = f[1];
    var ba:int = 2;
    var ca:int = aa << ba;
    var da:int_ptr = z + ca;
    da[0] = y;
    var ea:int = f[1];
    var fa:int = 1;
    var ga:int = ea + fa;
    f[1] = ga;
    continue L_b;
  }
  unreachable;
  label B_a:
}

function f_q(a:int, b:int, c:int, d:int) {
  var e:int = g_a;
  var f:int = 32;
  var g:int_ptr = e - f;
  g_a = g;
  var h:int = 0;
  var i:int = 64;
  g[7] = a;
  g[6] = b;
  g[5] = c;
  g[4] = d;
  var j:int = g[5];
  var k:int = g[7];
  var l:int = g[4];
  var m:int = 1;
  var n:int = l << m;
  var o:int = 1;
  var p:int = n - o;
  var q:int = 4;
  var r:int = p << q;
  var s:int = 2;
  var t:int = r << s;
  var u:int = k + t;
  f_p(j, u, i);
  g[3] = h;
  loop L_b {
    var v:int = g[3];
    var w:int = g[4];
    var x:int = 1;
    var y:int = w << x;
    var z:int = v;
    var aa:int = y;
    var ba:int = z < aa;
    var ca:int = 1;
    var da:int = ba & ca;
    if (eqz(da)) goto B_a;
    var ea:int = 64;
    var fa:int = g[5];
    var ga:int = g[7];
    var ha:int = g[3];
    var ia:int = 4;
    var ja:int = ha << ia;
    var ka:int = 2;
    var la:int = ja << ka;
    var ma:int = ga + la;
    f_s(fa, ma, ea);
    var na:int = g[5];
    f_u(na);
    var oa:int = g[6];
    var pa:int = g[3];
    var qa:int = 3;
    var ra:int = pa << qa;
    var sa:int = 2;
    var ta:int = ra << sa;
    var ua:int = oa + ta;
    var va:int = g[5];
    f_p(ua, va, ea);
    var wa:int = g[5];
    var xa:int = g[7];
    var ya:int = g[3];
    var za:int = 4;
    var ab:int = ya << za;
    var bb:int = 16;
    var cb:int = ab + bb;
    var db:int = 2;
    var eb:int = cb << db;
    var fb:int = xa + eb;
    f_s(wa, fb, ea);
    var gb:int = g[5];
    f_u(gb);
    var hb:int = g[6];
    var ib:int = g[3];
    var jb:int = 3;
    var kb:int = ib << jb;
    var lb:int = g[4];
    var mb:int = 4;
    var nb:int = lb << mb;
    var ob:int = kb + nb;
    var pb:int = 2;
    var qb:int = ob << pb;
    var rb:int = hb + qb;
    var sb:int = g[5];
    f_p(rb, sb, ea);
    var tb:int = g[3];
    var ub:int = 2;
    var vb:int = tb + ub;
    g[3] = vb;
    continue L_b;
  }
  unreachable;
  label B_a:
  var wb:int = 32;
  var xb:int = g + wb;
  g_a = xb;
}

function f_r(a:int, b:int):long {
  var c:int = g_a;
  var d:int = 16;
  var e:int_ptr = c - d;
  e[3] = a;
  e[2] = b;
  var f:int = e[3];
  var g:int = e[2];
  var h:int = 1;
  var i:int = g << h;
  var j:int = 1;
  var k:int = i - j;
  var l:int = 6;
  var m:int = k << l;
  var n:int = f + m;
  e[1] = n;
  var o:int_ptr = e[1];
  var p:int = o[1];
  var q:int = p;
  var u:long = i64_extend_i32_u(q);
  var v:long = 32L;
  var w:long = u << v;
  var r:int_ptr = e[1];
  var s:int = r[0];
  var t:int = s;
  var x:long = i64_extend_i32_u(t);
  var y:long = w + x;
  return y;
}

function f_s(a:int, b:int, c:int) {
  var d:int = g_a;
  var e:int = 32;
  var f:int_ptr = d - e;
  var g:int = 0;
  f[7] = a;
  f[6] = b;
  f[5] = c;
  var h:int = f[7];
  f[4] = h;
  var i:int = f[6];
  f[3] = i;
  var j:int = f[5];
  var k:int = 2;
  var l:int = j >> k;
  f[2] = l;
  f[1] = g;
  loop L_b {
    var m:int = f[1];
    var n:int = f[2];
    var o:int = m;
    var p:int = n;
    var q:int = o < p;
    var r:int = 1;
    var s:int = q & r;
    if (eqz(s)) goto B_a;
    var t:int = f[3];
    var u:int = f[1];
    var v:int = 2;
    var w:int = u << v;
    var x:int_ptr = t + w;
    var y:int = x[0];
    var z:int = f[4];
    var aa:int = f[1];
    var ba:int = 2;
    var ca:int = aa << ba;
    var da:int_ptr = z + ca;
    var ea:int = da[0];
    var fa:int = ea ^ y;
    da[0] = fa;
    var ga:int = f[1];
    var ha:int = 1;
    var ia:int = ga + ha;
    f[1] = ia;
    continue L_b;
  }
  unreachable;
  label B_a:
}

function f(a:int, b:int) {
  var c:int = g_a;
  var d:int = 16;
  var e:int_ptr = c - d;
  e[3] = a;
  e[2] = b;
  var f:int = e[3];
  e[1] = f;
  var g:int = e[2];
  var h:int = 255;
  var i:int = g & h;
  var j:byte_ptr = e[1];
  j[0] = i;
  var k:int = e[2];
  var l:int = 8;
  var m:int = k >> l;
  var n:int = 255;
  var o:int = m & n;
  var p:byte_ptr = e[1];
  p[1] = o;
  var q:int = e[2];
  var r:int = 16;
  var s:int = q >> r;
  var t:int = 255;
  var u:int = s & t;
  var v:byte_ptr = e[1];
  v[2] = u;
  var w:int = e[2];
  var x:int = 24;
  var y:int = w >> x;
  var z:int = 255;
  var aa:int = y & z;
  var ba:byte_ptr = e[1];
  ba[3] = aa;
}

function f_u(a:int) {
  var b:int = g_a;
  var c:int = 96;
  var d:int_ptr = b - c;
  g_a = d;
  var e:int = 0;
  var f:int = 64;
  var g:int = 16;
  var h:int = d + g;
  var i:int = h;
  d[23] = a;
  var j:int = d[23];
  f_p(i, j, f);
  d[3] = e;
  loop L_b {
    var k:int = 8;
    var l:int = d[3];
    var m:int = l;
    var n:int = k;
    var o:int = m < n;
    var p:int = 1;
    var q:int = o & p;
    if (eqz(q)) goto B_a;
    var r:int = d[4];
    var s:int = d[16];
    var t:int = r + s;
    var u:int = 7;
    var v:int = t << u;
    var w:int = d[4];
    var x:int = d[16];
    var y:int = w + x;
    var z:int = 25;
    var aa:int = y >> z;
    var ba:int = v | aa;
    var ca:int = d[8];
    var da:int = ca ^ ba;
    d[8] = da;
    var ea:int = d[8];
    var fa:int = d[4];
    var ga:int = ea + fa;
    var ha:int = 9;
    var ia:int = ga << ha;
    var ja:int = d[8];
    var ka:int = d[4];
    var la:int = ja + ka;
    var ma:int = 23;
    var na:int = la >> ma;
    var oa:int = ia | na;
    var pa:int = d[12];
    var qa:int = pa ^ oa;
    d[12] = qa;
    var ra:int = d[12];
    var sa:int = d[8];
    var ta:int = ra + sa;
    var ua:int = 13;
    var va:int = ta << ua;
    var wa:int = d[12];
    var xa:int = d[8];
    var ya:int = wa + xa;
    var za:int = 19;
    var ab:int = ya >> za;
    var bb:int = va | ab;
    var cb:int = d[16];
    var db:int = cb ^ bb;
    d[16] = db;
    var eb:int = d[16];
    var fb:int = d[12];
    var gb:int = eb + fb;
    var hb:int = 18;
    var ib:int = gb << hb;
    var jb:int = d[16];
    var kb:int = d[12];
    var lb:int = jb + kb;
    var mb:int = 14;
    var nb:int = lb >> mb;
    var ob:int = ib | nb;
    var pb:int = d[4];
    var qb:int = pb ^ ob;
    d[4] = qb;
    var rb:int = d[9];
    var sb:int = d[5];
    var tb:int = rb + sb;
    var ub:int = 7;
    var vb:int = tb << ub;
    var wb:int = d[9];
    var xb:int = d[5];
    var yb:int = wb + xb;
    var zb:int = 25;
    var ac:int = yb >> zb;
    var bc:int = vb | ac;
    var cc:int = d[13];
    var dc:int = cc ^ bc;
    d[13] = dc;
    var ec:int = d[13];
    var fc:int = d[9];
    var gc:int = ec + fc;
    var hc:int = 9;
    var ic:int = gc << hc;
    var jc:int = d[13];
    var kc:int = d[9];
    var lc:int = jc + kc;
    var mc:int = 23;
    var nc:int = lc >> mc;
    var oc:int = ic | nc;
    var pc:int = d[17];
    var qc:int = pc ^ oc;
    d[17] = qc;
    var rc:int = d[17];
    var sc:int = d[13];
    var tc:int = rc + sc;
    var uc:int = 13;
    var vc:int = tc << uc;
    var wc:int = d[17];
    var xc:int = d[13];
    var yc:int = wc + xc;
    var zc:int = 19;
    var ad:int = yc >> zc;
    var bd:int = vc | ad;
    var cd:int = d[5];
    var dd:int = cd ^ bd;
    d[5] = dd;
    var ed:int = d[5];
    var fd:int = d[17];
    var gd:int = ed + fd;
    var hd:int = 18;
    var id:int = gd << hd;
    var jd:int = d[5];
    var kd:int = d[17];
    var ld:int = jd + kd;
    var md:int = 14;
    var nd:int = ld >> md;
    var od:int = id | nd;
    var pd:int = d[9];
    var qd:int = pd ^ od;
    d[9] = qd;
    var rd:int = d[14];
    var sd:int = d[10];
    var td:int = rd + sd;
    var ud:int = 7;
    var vd:int = td << ud;
    var wd:int = d[14];
    var xd:int = d[10];
    var yd:int = wd + xd;
    var zd:int = 25;
    var ae:int = yd >> zd;
    var be:int = vd | ae;
    var ce:int = d[18];
    var de:int = ce ^ be;
    d[18] = de;
    var ee:int = d[18];
    var fe:int = d[14];
    var ge:int = ee + fe;
    var he:int = 9;
    var ie:int = ge << he;
    var je:int = d[18];
    var ke:int = d[14];
    var le:int = je + ke;
    var me:int = 23;
    var ne:int = le >> me;
    var oe:int = ie | ne;
    var pe:int = d[6];
    var qe:int = pe ^ oe;
    d[6] = qe;
    var re:int = d[6];
    var se:int = d[18];
    var te:int = re + se;
    var ue:int = 13;
    var ve:int = te << ue;
    var we:int = d[6];
    var xe:int = d[18];
    var ye:int = we + xe;
    var ze:int = 19;
    var af:int = ye >> ze;
    var bf:int = ve | af;
    var cf:int = d[10];
    var df:int = cf ^ bf;
    d[10] = df;
    var ef:int = d[10];
    var ff:int = d[6];
    var gf:int = ef + ff;
    var hf:int = 18;
    var if:int = gf << hf;
    var jf:int = d[10];
    var kf:int = d[6];
    var lf:int = jf + kf;
    var mf:int = 14;
    var nf:int = lf >> mf;
    var of:int = if | nf;
    var pf:int = d[14];
    var qf:int = pf ^ of;
    d[14] = qf;
    var rf:int = d[19];
    var sf:int = d[15];
    var tf:int = rf + sf;
    var uf:int = 7;
    var vf:int = tf << uf;
    var wf:int = d[19];
    var xf:int = d[15];
    var yf:int = wf + xf;
    var zf:int = 25;
    var ag:int = yf >> zf;
    var bg:int = vf | ag;
    var cg:int = d[7];
    var dg:int = cg ^ bg;
    d[7] = dg;
    var eg:int = d[7];
    var fg:int = d[19];
    var gg:int = eg + fg;
    var hg:int = 9;
    var ig:int = gg << hg;
    var jg:int = d[7];
    var kg:int = d[19];
    var lg:int = jg + kg;
    var mg:int = 23;
    var ng:int = lg >> mg;
    var og:int = ig | ng;
    var pg:int = d[11];
    var qg:int = pg ^ og;
    d[11] = qg;
    var rg:int = d[11];
    var sg:int = d[7];
    var tg:int = rg + sg;
    var ug:int = 13;
    var vg:int = tg << ug;
    var wg:int = d[11];
    var xg:int = d[7];
    var yg:int = wg + xg;
    var zg:int = 19;
    var ah:int = yg >> zg;
    var bh:int = vg | ah;
    var ch:int = d[15];
    var dh:int = ch ^ bh;
    d[15] = dh;
    var eh:int = d[15];
    var fh:int = d[11];
    var gh:int = eh + fh;
    var hh:int = 18;
    var ih:int = gh << hh;
    var jh:int = d[15];
    var kh:int = d[11];
    var lh:int = jh + kh;
    var mh:int = 14;
    var nh:int = lh >> mh;
    var oh:int = ih | nh;
    var ph:int = d[19];
    var qh:int = ph ^ oh;
    d[19] = qh;
    var rh:int = d[4];
    var sh:int = d[7];
    var th:int = rh + sh;
    var uh:int = 7;
    var vh:int = th << uh;
    var wh:int = d[4];
    var xh:int = d[7];
    var yh:int = wh + xh;
    var zh:int = 25;
    var ai:int = yh >> zh;
    var bi:int = vh | ai;
    var ci:int = d[5];
    var di:int = ci ^ bi;
    d[5] = di;
    var ei:int = d[5];
    var fi:int = d[4];
    var gi:int = ei + fi;
    var hi:int = 9;
    var ii:int = gi << hi;
    var ji:int = d[5];
    var ki:int = d[4];
    var li:int = ji + ki;
    var mi:int = 23;
    var ni:int = li >> mi;
    var oi:int = ii | ni;
    var pi:int = d[6];
    var qi:int = pi ^ oi;
    d[6] = qi;
    var ri:int = d[6];
    var si:int = d[5];
    var ti:int = ri + si;
    var ui:int = 13;
    var vi:int = ti << ui;
    var wi:int = d[6];
    var xi:int = d[5];
    var yi:int = wi + xi;
    var zi:int = 19;
    var aj:int = yi >> zi;
    var bj:int = vi | aj;
    var cj:int = d[7];
    var dj:int = cj ^ bj;
    d[7] = dj;
    var ej:int = d[7];
    var fj:int = d[6];
    var gj:int = ej + fj;
    var hj:int = 18;
    var ij:int = gj << hj;
    var jj:int = d[7];
    var kj:int = d[6];
    var lj:int = jj + kj;
    var mj:int = 14;
    var nj:int = lj >> mj;
    var oj:int = ij | nj;
    var pj:int = d[4];
    var qj:int = pj ^ oj;
    d[4] = qj;
    var rj:int = d[9];
    var sj:int = d[8];
    var tj:int = rj + sj;
    var uj:int = 7;
    var vj:int = tj << uj;
    var wj:int = d[9];
    var xj:int = d[8];
    var yj:int = wj + xj;
    var zj:int = 25;
    var ak:int = yj >> zj;
    var bk:int = vj | ak;
    var ck:int = d[10];
    var dk:int = ck ^ bk;
    d[10] = dk;
    var ek:int = d[10];
    var fk:int = d[9];
    var gk:int = ek + fk;
    var hk:int = 9;
    var ik:int = gk << hk;
    var jk:int = d[10];
    var kk:int = d[9];
    var lk:int = jk + kk;
    var mk:int = 23;
    var nk:int = lk >> mk;
    var ok:int = ik | nk;
    var pk:int = d[11];
    var qk:int = pk ^ ok;
    d[11] = qk;
    var rk:int = d[11];
    var sk:int = d[10];
    var tk:int = rk + sk;
    var uk:int = 13;
    var vk:int = tk << uk;
    var wk:int = d[11];
    var xk:int = d[10];
    var yk:int = wk + xk;
    var zk:int = 19;
    var al:int = yk >> zk;
    var bl:int = vk | al;
    var cl:int = d[8];
    var dl:int = cl ^ bl;
    d[8] = dl;
    var el:int = d[8];
    var fl:int = d[11];
    var gl:int = el + fl;
    var hl:int = 18;
    var il:int = gl << hl;
    var jl:int = d[8];
    var kl:int = d[11];
    var ll:int = jl + kl;
    var ml:int = 14;
    var nl:int = ll >> ml;
    var ol:int = il | nl;
    var pl:int = d[9];
    var ql:int = pl ^ ol;
    d[9] = ql;
    var rl:int = d[14];
    var sl:int = d[13];
    var tl:int = rl + sl;
    var ul:int = 7;
    var vl:int = tl << ul;
    var wl:int = d[14];
    var xl:int = d[13];
    var yl:int = wl + xl;
    var zl:int = 25;
    var am:int = yl >> zl;
    var bm:int = vl | am;
    var cm:int = d[15];
    var dm:int = cm ^ bm;
    d[15] = dm;
    var em:int = d[15];
    var fm:int = d[14];
    var gm:int = em + fm;
    var hm:int = 9;
    var im:int = gm << hm;
    var jm:int = d[15];
    var km:int = d[14];
    var lm:int = jm + km;
    var mm:int = 23;
    var nm:int = lm >> mm;
    var om:int = im | nm;
    var pm:int = d[12];
    var qm:int = pm ^ om;
    d[12] = qm;
    var rm:int = d[12];
    var sm:int = d[15];
    var tm:int = rm + sm;
    var um:int = 13;
    var vm:int = tm << um;
    var wm:int = d[12];
    var xm:int = d[15];
    var ym:int = wm + xm;
    var zm:int = 19;
    var an:int = ym >> zm;
    var bn:int = vm | an;
    var cn:int = d[13];
    var dn:int = cn ^ bn;
    d[13] = dn;
    var en:int = d[13];
    var fn:int = d[12];
    var gn:int = en + fn;
    var hn:int = 18;
    var in:int = gn << hn;
    var jn:int = d[13];
    var kn:int = d[12];
    var ln:int = jn + kn;
    var mn:int = 14;
    var nn:int = ln >> mn;
    var on:int = in | nn;
    var pn:int = d[14];
    var qn:int = pn ^ on;
    d[14] = qn;
    var rn:int = d[19];
    var sn:int = d[18];
    var tn:int = rn + sn;
    var un:int = 7;
    var vn:int = tn << un;
    var wn:int = d[19];
    var xn:int = d[18];
    var yn:int = wn + xn;
    var zn:int = 25;
    var ao:int = yn >> zn;
    var bo:int = vn | ao;
    var co:int = d[16];
    var do:int = co ^ bo;
    d[16] = do;
    var eo:int = d[16];
    var fo:int = d[19];
    var go:int = eo + fo;
    var ho:int = 9;
    var io:int = go << ho;
    var jo:int = d[16];
    var ko:int = d[19];
    var lo:int = jo + ko;
    var mo:int = 23;
    var no:int = lo >> mo;
    var oo:int = io | no;
    var po:int = d[17];
    var qo:int = po ^ oo;
    d[17] = qo;
    var ro:int = d[17];
    var so:int = d[16];
    var to:int = ro + so;
    var uo:int = 13;
    var vo:int = to << uo;
    var wo:int = d[17];
    var xo:int = d[16];
    var yo:int = wo + xo;
    var zo:int = 19;
    var ap:int = yo >> zo;
    var bp:int = vo | ap;
    var cp:int = d[18];
    var dp:int = cp ^ bp;
    d[18] = dp;
    var ep:int = d[18];
    var fp:int = d[17];
    var gp:int = ep + fp;
    var hp:int = 18;
    var ip:int = gp << hp;
    var jp:int = d[18];
    var kp:int = d[17];
    var lp:int = jp + kp;
    var mp:int = 14;
    var np:int = lp >> mp;
    var op:int = ip | np;
    var pp:int = d[19];
    var qp:int = pp ^ op;
    d[19] = qp;
    var rp:int = d[3];
    var sp:int = 2;
    var tp:int = rp + sp;
    d[3] = tp;
    continue L_b;
  }
  unreachable;
  label B_a:
  var up:int = 0;
  d[3] = up;
  loop L_d {
    var vp:int = 16;
    var wp:int = d[3];
    var xp:int = wp;
    var yp:int = vp;
    var zp:int = xp < yp;
    var aq:int = 1;
    var bq:int = zp & aq;
    if (eqz(bq)) goto B_c;
    var cq:int = 16;
    var dq:int = d + cq;
    var eq:int = dq;
    var fq:int = d[3];
    var gq:int = 2;
    var hq:int = fq << gq;
    var iq:int_ptr = eq + hq;
    var jq:int = iq[0];
    var kq:int = d[23];
    var lq:int = d[3];
    var mq:int = 2;
    var nq:int = lq << mq;
    var oq:int_ptr = kq + nq;
    var pq:int = oq[0];
    var qq:int = pq + jq;
    oq[0] = qq;
    var rq:int = d[3];
    var sq:int = 1;
    var tq:int = rq + sq;
    d[3] = tq;
    continue L_d;
  }
  unreachable;
  label B_c:
  var uq:int = 96;
  var vq:int = d + uq;
  g_a = vq;
}

function f_v(a:int) {
  var b:int = g_a;
  var c:int = 16;
  var d:int_ptr = b - c;
  var e:int = 1541459225;
  var f:int = 528734635;
  var g:int = -1694144372;
  var h:int = 1359893119;
  var i:int = -1521486534;
  var j:int = 1013904242;
  var k:int = -1150833019;
  var l:int = 1779033703;
  var m:int = 0;
  d[3] = a;
  var n:int_ptr = d[3];
  n[9] = m;
  var o:int_ptr = d[3];
  o[8] = m;
  var p:int_ptr = d[3];
  p[0] = l;
  var q:int_ptr = d[3];
  q[1] = k;
  var r:int_ptr = d[3];
  r[2] = j;
  var s:int_ptr = d[3];
  s[3] = i;
  var t:int_ptr = d[3];
  t[4] = h;
  var u:int_ptr = d[3];
  u[5] = g;
  var v:int_ptr = d[3];
  v[6] = f;
  var w:int_ptr = d[3];
  w[7] = e;
}

function f_w(a:int, b:int, c:int) {
  var d:int = g_a;
  var e:int = 32;
  var f:int_ptr = d - e;
  g_a = f;
  f[7] = a;
  f[6] = b;
  f[5] = c;
  var g:int = f[6];
  f[1] = g;
  var h:int_ptr = f[7];
  var i:int = h[9];
  var j:int = 3;
  var k:int = i >> j;
  var l:int = 63;
  var m:int = k & l;
  f[2] = m;
  var n:int = f[5];
  var o:int = 3;
  var p:int = n << o;
  f[4] = p;
  var q:int = f[5];
  var r:int = 29;
  var s:int = q >> r;
  f[3] = s;
  var t:int = f[4];
  var u:int_ptr = f[7];
  var v:int = u[9];
  var w:int = v + t;
  u[9] = w;
  var x:int = f[4];
  var y:int = w;
  var z:int = x;
  var aa:int = y < z;
  var ba:int = 1;
  var ca:int = aa & ba;
  if (eqz(ca)) goto B_a;
  var da:int_ptr = f[7];
  var ea:int = da[8];
  var fa:int = 1;
  var ga:int = ea + fa;
  da[8] = ga;
  label B_a:
  var ha:int = 64;
  var ia:int = f[3];
  var ja:int_ptr = f[7];
  var ka:int = ja[8];
  var la:int = ka + ia;
  ja[8] = la;
  var ma:int = f[5];
  var na:int = f[2];
  var oa:int = ha - na;
  var pa:int = ma;
  var qa:int = oa;
  var ra:int = pa < qa;
  var sa:int = 1;
  var ta:int = ra & sa;
  if (eqz(ta)) goto B_c;
  var ua:int = f[7];
  var va:int = 40;
  var wa:int = ua + va;
  var xa:int = f[2];
  var ya:int = wa + xa;
  var za:int = f[1];
  var ab:int = f[5];
  f_ic(ya, za, ab);
  goto B_b;
  label B_c:
  var bb:int = 64;
  var cb:int = f[7];
  var db:int = 40;
  var eb:int = cb + db;
  var fb:int = f[2];
  var gb:int = eb + fb;
  var hb:int = f[1];
  var ib:int = f[2];
  var jb:int = bb - ib;
  f_ic(gb, hb, jb);
  var kb:int = f[7];
  var lb:int = f[7];
  var mb:int = 40;
  var nb:int = lb + mb;
  f_x(kb, nb);
  var ob:int = f[2];
  var pb:int = bb - ob;
  var qb:int = f[1];
  var rb:int = qb + pb;
  f[1] = rb;
  var sb:int = f[2];
  var tb:int = bb - sb;
  var ub:int = f[5];
  var vb:int = ub - tb;
  f[5] = vb;
  loop L_e {
    var wb:int = 64;
    var xb:int = f[5];
    var yb:int = xb;
    var zb:int = wb;
    var ac:int = yb >= zb;
    var bc:int = 1;
    var cc:int = ac & bc;
    if (eqz(cc)) goto B_d;
    var dc:int = f[7];
    var ec:int = f[1];
    f_x(dc, ec);
    var fc:int = f[1];
    var gc:int = 64;
    var hc:int = fc + gc;
    f[1] = hc;
    var ic:int = f[5];
    var jc:int = 64;
    var kc:int = ic - jc;
    f[5] = kc;
    continue L_e;
  }
  unreachable;
  label B_d:
  var lc:int = f[7];
  var mc:int = 40;
  var nc:int = lc + mc;
  var oc:int = f[1];
  var pc:int = f[5];
  f_ic(nc, oc, pc);
  label B_b:
  var qc:int = 32;
  var rc:int = f + qc;
  g_a = rc;
}

function f_x(a:int, b:int) {
  var c:int = g_a;
  var d:int = 320;
  var e:int_ptr = c - d;
  g_a = e;
  var f:int = 16;
  var g:int = 64;
  var h:int = 48;
  var i:int = e + h;
  var j:int = i;
  e[79] = a;
  e[78] = b;
  var k:int = e[78];
  f_y(j, k, g);
  e[1] = f;
  loop L_b {
    var l:int = 64;
    var m:int = e[1];
    var n:int = m;
    var o:int = l;
    var p:int = n < o;
    var q:int = 1;
    var r:int = p & q;
    if (eqz(r)) goto B_a;
    var s:int = 48;
    var t:int = e + s;
    var u:int = t;
    var v:int = e[1];
    var w:int = 2;
    var x:int = v - w;
    var y:int = 2;
    var z:int = x << y;
    var aa:int_ptr = u + z;
    var ba:int = aa[0];
    var ca:int = 17;
    var da:int = ba >> ca;
    var ea:int = e[1];
    var fa:int = 2;
    var ga:int = ea - fa;
    var ha:int = 2;
    var ia:int = ga << ha;
    var ja:int_ptr = u + ia;
    var ka:int = ja[0];
    var la:int = 15;
    var ma:int = ka << la;
    var na:int = da | ma;
    var oa:int = e[1];
    var pa:int = 2;
    var qa:int = oa - pa;
    var ra:int = 2;
    var sa:int = qa << ra;
    var ta:int_ptr = u + sa;
    var ua:int = ta[0];
    var va:int = 19;
    var wa:int = ua >> va;
    var xa:int = e[1];
    var ya:int = 2;
    var za:int = xa - ya;
    var ab:int = 2;
    var bb:int = za << ab;
    var cb:int_ptr = u + bb;
    var db:int = cb[0];
    var eb:int = 13;
    var fb:int = db << eb;
    var gb:int = wa | fb;
    var hb:int = na ^ gb;
    var ib:int = e[1];
    var jb:int = 2;
    var kb:int = ib - jb;
    var lb:int = 2;
    var mb:int = kb << lb;
    var nb:int_ptr = u + mb;
    var ob:int = nb[0];
    var pb:int = 10;
    var qb:int = ob >> pb;
    var rb:int = hb ^ qb;
    var sb:int = e[1];
    var tb:int = 7;
    var ub:int = sb - tb;
    var vb:int = 2;
    var wb:int = ub << vb;
    var xb:int_ptr = u + wb;
    var yb:int = xb[0];
    var zb:int = rb + yb;
    var ac:int = e[1];
    var bc:int = 15;
    var cc:int = ac - bc;
    var dc:int = 2;
    var ec:int = cc << dc;
    var fc:int_ptr = u + ec;
    var gc:int = fc[0];
    var hc:int = 7;
    var ic:int = gc >> hc;
    var jc:int = e[1];
    var kc:int = 15;
    var lc:int = jc - kc;
    var mc:int = 2;
    var nc:int = lc << mc;
    var oc:int_ptr = u + nc;
    var pc:int = oc[0];
    var qc:int = 25;
    var rc:int = pc << qc;
    var sc:int = ic | rc;
    var tc:int = e[1];
    var uc:int = 15;
    var vc:int = tc - uc;
    var wc:int = 2;
    var xc:int = vc << wc;
    var yc:int_ptr = u + xc;
    var zc:int = yc[0];
    var ad:int = 18;
    var bd:int = zc >> ad;
    var cd:int = e[1];
    var dd:int = 15;
    var ed:int = cd - dd;
    var fd:int = 2;
    var gd:int = ed << fd;
    var hd:int_ptr = u + gd;
    var id:int = hd[0];
    var jd:int = 14;
    var kd:int = id << jd;
    var ld:int = bd | kd;
    var md:int = sc ^ ld;
    var nd:int = e[1];
    var od:int = 15;
    var pd:int = nd - od;
    var qd:int = 2;
    var rd:int = pd << qd;
    var sd:int_ptr = u + rd;
    var td:int = sd[0];
    var ud:int = 3;
    var vd:int = td >> ud;
    var wd:int = md ^ vd;
    var xd:int = zb + wd;
    var yd:int = e[1];
    var zd:int = 16;
    var ae:int = yd - zd;
    var be:int = 2;
    var ce:int = ae << be;
    var de:int_ptr = u + ce;
    var ee:int = de[0];
    var fe:int = xd + ee;
    var ge:int = e[1];
    var he:int = 2;
    var ie:int = ge << he;
    var je:int_ptr = u + ie;
    je[0] = fe;
    var ke:int = e[1];
    var le:int = 1;
    var me:int = ke + le;
    e[1] = me;
    continue L_b;
  }
  unreachable;
  label B_a:
  var ne:int = 0;
  var oe:int = 16;
  var pe:int = e + oe;
  var qe:long_ptr@4 = pe;
  var re:long_ptr@4 = e[79];
  var elg:long = re[0];
  qe[0] = elg;
  var se:int = 24;
  var te:long_ptr@4 = qe + se;
  var ue:long_ptr@4 = re + se;
  var flg:long = ue[0];
  te[0] = flg;
  var ve:int = 16;
  var we:long_ptr@4 = qe + ve;
  var xe:long_ptr@4 = re + ve;
  var glg:long = xe[0];
  we[0] = glg;
  var ye:int = 8;
  var ze:long_ptr@4 = qe + ye;
  var af:long_ptr@4 = re + ye;
  var hlg:long = af[0];
  ze[0] = hlg;
  var bf:int = e[11];
  var cf:int = e[8];
  var df:int = 6;
  var ef:int = cf >> df;
  var ff:int = e[8];
  var gf:int = 26;
  var hf:int = ff << gf;
  var if:int = ef | hf;
  var jf:int = e[8];
  var kf:int = 11;
  var lf:int = jf >> kf;
  var mf:int = e[8];
  var nf:int = 21;
  var of:int = mf << nf;
  var pf:int = lf | of;
  var qf:int = if ^ pf;
  var rf:int = e[8];
  var sf:int = 25;
  var tf:int = rf >> sf;
  var uf:int = e[8];
  var vf:int = 7;
  var wf:int = uf << vf;
  var xf:int = tf | wf;
  var yf:int = qf ^ xf;
  var zf:int = bf + yf;
  var ag:int = e[8];
  var bg:int = e[9];
  var cg:int = e[10];
  var dg:int = bg ^ cg;
  var eg:int = ag & dg;
  var fg:int = e[10];
  var gg:int = eg ^ fg;
  var hg:int = zf + gg;
  var ig:int = e[12];
  var jg:int = hg + ig;
  var kg:int = 1116352408;
  var lg:int = jg + kg;
  e[3] = lg;
  var mg:int = e[4];
  var ng:int = 2;
  var og:int = mg >> ng;
  var pg:int = e[4];
  var qg:int = 30;
  var rg:int = pg << qg;
  var sg:int = og | rg;
  var tg:int = e[4];
  var ug:int = 13;
  var vg:int = tg >> ug;
  var wg:int = e[4];
  var xg:int = 19;
  var yg:int = wg << xg;
  var zg:int = vg | yg;
  var ah:int = sg ^ zg;
  var bh:int = e[4];
  var ch:int = 22;
  var dh:int = bh >> ch;
  var eh:int = e[4];
  var fh:int = 10;
  var gh:int = eh << fh;
  var hh:int = dh | gh;
  var ih:int = ah ^ hh;
  var jh:int = e[4];
  var kh:int = e[5];
  var lh:int = e[6];
  var mh:int = kh | lh;
  var nh:int = jh & mh;
  var oh:int = e[5];
  var ph:int = e[6];
  var qh:int = oh & ph;
  var rh:int = nh | qh;
  var sh:int = ih + rh;
  e[2] = sh;
  var th:int = e[3];
  var uh:int = e[7];
  var vh:int = uh + th;
  e[7] = vh;
  var wh:int = e[3];
  var xh:int = e[2];
  var yh:int = wh + xh;
  e[11] = yh;
  var zh:int = e[10];
  var ai:int = e[7];
  var bi:int = 6;
  var ci:int = ai >> bi;
  var di:int = e[7];
  var ei:int = 26;
  var fi:int = di << ei;
  var gi:int = ci | fi;
  var hi:int = e[7];
  var ii:int = 11;
  var ji:int = hi >> ii;
  var ki:int = e[7];
  var li:int = 21;
  var mi:int = ki << li;
  var ni:int = ji | mi;
  var oi:int = gi ^ ni;
  var pi:int = e[7];
  var qi:int = 25;
  var ri:int = pi >> qi;
  var si:int = e[7];
  var ti:int = 7;
  var ui:int = si << ti;
  var vi:int = ri | ui;
  var wi:int = oi ^ vi;
  var xi:int = zh + wi;
  var yi:int = e[7];
  var zi:int = e[8];
  var aj:int = e[9];
  var bj:int = zi ^ aj;
  var cj:int = yi & bj;
  var dj:int = e[9];
  var ej:int = cj ^ dj;
  var fj:int = xi + ej;
  var gj:int = e[13];
  var hj:int = fj + gj;
  var ij:int = 1899447441;
  var jj:int = hj + ij;
  e[3] = jj;
  var kj:int = e[11];
  var lj:int = 2;
  var mj:int = kj >> lj;
  var nj:int = e[11];
  var oj:int = 30;
  var pj:int = nj << oj;
  var qj:int = mj | pj;
  var rj:int = e[11];
  var sj:int = 13;
  var tj:int = rj >> sj;
  var uj:int = e[11];
  var vj:int = 19;
  var wj:int = uj << vj;
  var xj:int = tj | wj;
  var yj:int = qj ^ xj;
  var zj:int = e[11];
  var ak:int = 22;
  var bk:int = zj >> ak;
  var ck:int = e[11];
  var dk:int = 10;
  var ek:int = ck << dk;
  var fk:int = bk | ek;
  var gk:int = yj ^ fk;
  var hk:int = e[11];
  var ik:int = e[4];
  var jk:int = e[5];
  var kk:int = ik | jk;
  var lk:int = hk & kk;
  var mk:int = e[4];
  var nk:int = e[5];
  var ok:int = mk & nk;
  var pk:int = lk | ok;
  var qk:int = gk + pk;
  e[2] = qk;
  var rk:int = e[3];
  var sk:int = e[6];
  var tk:int = sk + rk;
  e[6] = tk;
  var uk:int = e[3];
  var vk:int = e[2];
  var wk:int = uk + vk;
  e[10] = wk;
  var xk:int = e[9];
  var yk:int = e[6];
  var zk:int = 6;
  var al:int = yk >> zk;
  var bl:int = e[6];
  var cl:int = 26;
  var dl:int = bl << cl;
  var el:int = al | dl;
  var fl:int = e[6];
  var gl:int = 11;
  var hl:int = fl >> gl;
  var il:int = e[6];
  var jl:int = 21;
  var kl:int = il << jl;
  var ll:int = hl | kl;
  var ml:int = el ^ ll;
  var nl:int = e[6];
  var ol:int = 25;
  var pl:int = nl >> ol;
  var ql:int = e[6];
  var rl:int = 7;
  var sl:int = ql << rl;
  var tl:int = pl | sl;
  var ul:int = ml ^ tl;
  var vl:int = xk + ul;
  var wl:int = e[6];
  var xl:int = e[7];
  var yl:int = e[8];
  var zl:int = xl ^ yl;
  var am:int = wl & zl;
  var bm:int = e[8];
  var cm:int = am ^ bm;
  var dm:int = vl + cm;
  var em:int = e[14];
  var fm:int = dm + em;
  var gm:int = -1245643825;
  var hm:int = fm + gm;
  e[3] = hm;
  var im:int = e[10];
  var jm:int = 2;
  var km:int = im >> jm;
  var lm:int = e[10];
  var mm:int = 30;
  var nm:int = lm << mm;
  var om:int = km | nm;
  var pm:int = e[10];
  var qm:int = 13;
  var rm:int = pm >> qm;
  var sm:int = e[10];
  var tm:int = 19;
  var um:int = sm << tm;
  var vm:int = rm | um;
  var wm:int = om ^ vm;
  var xm:int = e[10];
  var ym:int = 22;
  var zm:int = xm >> ym;
  var an:int = e[10];
  var bn:int = 10;
  var cn:int = an << bn;
  var dn:int = zm | cn;
  var en:int = wm ^ dn;
  var fn:int = e[10];
  var gn:int = e[11];
  var hn:int = e[4];
  var in:int = gn | hn;
  var jn:int = fn & in;
  var kn:int = e[11];
  var ln:int = e[4];
  var mn:int = kn & ln;
  var nn:int = jn | mn;
  var on:int = en + nn;
  e[2] = on;
  var pn:int = e[3];
  var qn:int = e[5];
  var rn:int = qn + pn;
  e[5] = rn;
  var sn:int = e[3];
  var tn:int = e[2];
  var un:int = sn + tn;
  e[9] = un;
  var vn:int = e[8];
  var wn:int = e[5];
  var xn:int = 6;
  var yn:int = wn >> xn;
  var zn:int = e[5];
  var ao:int = 26;
  var bo:int = zn << ao;
  var co:int = yn | bo;
  var do:int = e[5];
  var eo:int = 11;
  var fo:int = do >> eo;
  var go:int = e[5];
  var ho:int = 21;
  var io:int = go << ho;
  var jo:int = fo | io;
  var ko:int = co ^ jo;
  var lo:int = e[5];
  var mo:int = 25;
  var no:int = lo >> mo;
  var oo:int = e[5];
  var po:int = 7;
  var qo:int = oo << po;
  var ro:int = no | qo;
  var so:int = ko ^ ro;
  var to:int = vn + so;
  var uo:int = e[5];
  var vo:int = e[6];
  var wo:int = e[7];
  var xo:int = vo ^ wo;
  var yo:int = uo & xo;
  var zo:int = e[7];
  var ap:int = yo ^ zo;
  var bp:int = to + ap;
  var cp:int = e[15];
  var dp:int = bp + cp;
  var ep:int = -373957723;
  var fp:int = dp + ep;
  e[3] = fp;
  var gp:int = e[9];
  var hp:int = 2;
  var ip:int = gp >> hp;
  var jp:int = e[9];
  var kp:int = 30;
  var lp:int = jp << kp;
  var mp:int = ip | lp;
  var np:int = e[9];
  var op:int = 13;
  var pp:int = np >> op;
  var qp:int = e[9];
  var rp:int = 19;
  var sp:int = qp << rp;
  var tp:int = pp | sp;
  var up:int = mp ^ tp;
  var vp:int = e[9];
  var wp:int = 22;
  var xp:int = vp >> wp;
  var yp:int = e[9];
  var zp:int = 10;
  var aq:int = yp << zp;
  var bq:int = xp | aq;
  var cq:int = up ^ bq;
  var dq:int = e[9];
  var eq:int = e[10];
  var fq:int = e[11];
  var gq:int = eq | fq;
  var hq:int = dq & gq;
  var iq:int = e[10];
  var jq:int = e[11];
  var kq:int = iq & jq;
  var lq:int = hq | kq;
  var mq:int = cq + lq;
  e[2] = mq;
  var nq:int = e[3];
  var oq:int = e[4];
  var pq:int = oq + nq;
  e[4] = pq;
  var qq:int = e[3];
  var rq:int = e[2];
  var sq:int = qq + rq;
  e[8] = sq;
  var tq:int = e[7];
  var uq:int = e[4];
  var vq:int = 6;
  var wq:int = uq >> vq;
  var xq:int = e[4];
  var yq:int = 26;
  var zq:int = xq << yq;
  var ar:int = wq | zq;
  var br:int = e[4];
  var cr:int = 11;
  var dr:int = br >> cr;
  var er:int = e[4];
  var fr:int = 21;
  var gr:int = er << fr;
  var hr:int = dr | gr;
  var ir:int = ar ^ hr;
  var jr:int = e[4];
  var kr:int = 25;
  var lr:int = jr >> kr;
  var mr:int = e[4];
  var nr:int = 7;
  var or:int = mr << nr;
  var pr:int = lr | or;
  var qr:int = ir ^ pr;
  var rr:int = tq + qr;
  var sr:int = e[4];
  var tr:int = e[5];
  var ur:int = e[6];
  var vr:int = tr ^ ur;
  var wr:int = sr & vr;
  var xr:int = e[6];
  var yr:int = wr ^ xr;
  var zr:int = rr + yr;
  var as:int = e[16];
  var bs:int = zr + as;
  var cs:int = 961987163;
  var ds:int = bs + cs;
  e[3] = ds;
  var es:int = e[8];
  var fs:int = 2;
  var gs:int = es >> fs;
  var hs:int = e[8];
  var is:int = 30;
  var js:int = hs << is;
  var ks:int = gs | js;
  var ls:int = e[8];
  var ms:int = 13;
  var ns:int = ls >> ms;
  var os:int = e[8];
  var ps:int = 19;
  var qs:int = os << ps;
  var rs:int = ns | qs;
  var ss:int = ks ^ rs;
  var ts:int = e[8];
  var us:int = 22;
  var vs:int = ts >> us;
  var ws:int = e[8];
  var xs:int = 10;
  var ys:int = ws << xs;
  var zs:int = vs | ys;
  var at:int = ss ^ zs;
  var bt:int = e[8];
  var ct:int = e[9];
  var dt:int = e[10];
  var et:int = ct | dt;
  var ft:int = bt & et;
  var gt:int = e[9];
  var ht:int = e[10];
  var it:int = gt & ht;
  var jt:int = ft | it;
  var kt:int = at + jt;
  e[2] = kt;
  var lt:int = e[3];
  var mt:int = e[11];
  var nt:int = mt + lt;
  e[11] = nt;
  var ot:int = e[3];
  var pt:int = e[2];
  var qt:int = ot + pt;
  e[7] = qt;
  var rt:int = e[6];
  var st:int = e[11];
  var tt:int = 6;
  var ut:int = st >> tt;
  var vt:int = e[11];
  var wt:int = 26;
  var xt:int = vt << wt;
  var yt:int = ut | xt;
  var zt:int = e[11];
  var au:int = 11;
  var bu:int = zt >> au;
  var cu:int = e[11];
  var du:int = 21;
  var eu:int = cu << du;
  var fu:int = bu | eu;
  var gu:int = yt ^ fu;
  var hu:int = e[11];
  var iu:int = 25;
  var ju:int = hu >> iu;
  var ku:int = e[11];
  var lu:int = 7;
  var mu:int = ku << lu;
  var nu:int = ju | mu;
  var ou:int = gu ^ nu;
  var pu:int = rt + ou;
  var qu:int = e[11];
  var ru:int = e[4];
  var su:int = e[5];
  var tu:int = ru ^ su;
  var uu:int = qu & tu;
  var vu:int = e[5];
  var wu:int = uu ^ vu;
  var xu:int = pu + wu;
  var yu:int = e[17];
  var zu:int = xu + yu;
  var av:int = 1508970993;
  var bv:int = zu + av;
  e[3] = bv;
  var cv:int = e[7];
  var dv:int = 2;
  var ev:int = cv >> dv;
  var fv:int = e[7];
  var gv:int = 30;
  var hv:int = fv << gv;
  var iv:int = ev | hv;
  var jv:int = e[7];
  var kv:int = 13;
  var lv:int = jv >> kv;
  var mv:int = e[7];
  var nv:int = 19;
  var ov:int = mv << nv;
  var pv:int = lv | ov;
  var qv:int = iv ^ pv;
  var rv:int = e[7];
  var sv:int = 22;
  var tv:int = rv >> sv;
  var uv:int = e[7];
  var vv:int = 10;
  var wv:int = uv << vv;
  var xv:int = tv | wv;
  var yv:int = qv ^ xv;
  var zv:int = e[7];
  var aw:int = e[8];
  var bw:int = e[9];
  var cw:int = aw | bw;
  var dw:int = zv & cw;
  var ew:int = e[8];
  var fw:int = e[9];
  var gw:int = ew & fw;
  var hw:int = dw | gw;
  var iw:int = yv + hw;
  e[2] = iw;
  var jw:int = e[3];
  var kw:int = e[10];
  var lw:int = kw + jw;
  e[10] = lw;
  var mw:int = e[3];
  var nw:int = e[2];
  var ow:int = mw + nw;
  e[6] = ow;
  var pw:int = e[5];
  var qw:int = e[10];
  var rw:int = 6;
  var sw:int = qw >> rw;
  var tw:int = e[10];
  var uw:int = 26;
  var vw:int = tw << uw;
  var ww:int = sw | vw;
  var xw:int = e[10];
  var yw:int = 11;
  var zw:int = xw >> yw;
  var ax:int = e[10];
  var bx:int = 21;
  var cx:int = ax << bx;
  var dx:int = zw | cx;
  var ex:int = ww ^ dx;
  var fx:int = e[10];
  var gx:int = 25;
  var hx:int = fx >> gx;
  var ix:int = e[10];
  var jx:int = 7;
  var kx:int = ix << jx;
  var lx:int = hx | kx;
  var mx:int = ex ^ lx;
  var nx:int = pw + mx;
  var ox:int = e[10];
  var px:int = e[11];
  var qx:int = e[4];
  var rx:int = px ^ qx;
  var sx:int = ox & rx;
  var tx:int = e[4];
  var ux:int = sx ^ tx;
  var vx:int = nx + ux;
  var wx:int = e[18];
  var xx:int = vx + wx;
  var yx:int = -1841331548;
  var zx:int = xx + yx;
  e[3] = zx;
  var ay:int = e[6];
  var by:int = 2;
  var cy:int = ay >> by;
  var dy:int = e[6];
  var ey:int = 30;
  var fy:int = dy << ey;
  var gy:int = cy | fy;
  var hy:int = e[6];
  var iy:int = 13;
  var jy:int = hy >> iy;
  var ky:int = e[6];
  var ly:int = 19;
  var my:int = ky << ly;
  var ny:int = jy | my;
  var oy:int = gy ^ ny;
  var py:int = e[6];
  var qy:int = 22;
  var ry:int = py >> qy;
  var sy:int = e[6];
  var ty:int = 10;
  var uy:int = sy << ty;
  var vy:int = ry | uy;
  var wy:int = oy ^ vy;
  var xy:int = e[6];
  var yy:int = e[7];
  var zy:int = e[8];
  var az:int = yy | zy;
  var bz:int = xy & az;
  var cz:int = e[7];
  var dz:int = e[8];
  var ez:int = cz & dz;
  var fz:int = bz | ez;
  var gz:int = wy + fz;
  e[2] = gz;
  var hz:int = e[3];
  var iz:int = e[9];
  var jz:int = iz + hz;
  e[9] = jz;
  var kz:int = e[3];
  var lz:int = e[2];
  var mz:int = kz + lz;
  e[5] = mz;
  var nz:int = e[4];
  var oz:int = e[9];
  var pz:int = 6;
  var qz:int = oz >> pz;
  var rz:int = e[9];
  var sz:int = 26;
  var tz:int = rz << sz;
  var uz:int = qz | tz;
  var vz:int = e[9];
  var wz:int = 11;
  var xz:int = vz >> wz;
  var yz:int = e[9];
  var zz:int = 21;
  var aaa:int = yz << zz;
  var baa:int = xz | aaa;
  var caa:int = uz ^ baa;
  var daa:int = e[9];
  var eaa:int = 25;
  var faa:int = daa >> eaa;
  var gaa:int = e[9];
  var haa:int = 7;
  var iaa:int = gaa << haa;
  var jaa:int = faa | iaa;
  var kaa:int = caa ^ jaa;
  var laa:int = nz + kaa;
  var maa:int = e[9];
  var naa:int = e[10];
  var oaa:int = e[11];
  var paa:int = naa ^ oaa;
  var qaa:int = maa & paa;
  var raa:int = e[11];
  var saa:int = qaa ^ raa;
  var taa:int = laa + saa;
  var uaa:int = e[19];
  var vaa:int = taa + uaa;
  var waa:int = -1424204075;
  var xaa:int = vaa + waa;
  e[3] = xaa;
  var yaa:int = e[5];
  var zaa:int = 2;
  var aba:int = yaa >> zaa;
  var bba:int = e[5];
  var cba:int = 30;
  var dba:int = bba << cba;
  var eba:int = aba | dba;
  var fba:int = e[5];
  var gba:int = 13;
  var hba:int = fba >> gba;
  var iba:int = e[5];
  var jba:int = 19;
  var kba:int = iba << jba;
  var lba:int = hba | kba;
  var mba:int = eba ^ lba;
  var nba:int = e[5];
  var oba:int = 22;
  var pba:int = nba >> oba;
  var qba:int = e[5];
  var rba:int = 10;
  var sba:int = qba << rba;
  var tba:int = pba | sba;
  var uba:int = mba ^ tba;
  var vba:int = e[5];
  var wba:int = e[6];
  var xba:int = e[7];
  var yba:int = wba | xba;
  var zba:int = vba & yba;
  var aca:int = e[6];
  var bca:int = e[7];
  var cca:int = aca & bca;
  var dca:int = zba | cca;
  var eca:int = uba + dca;
  e[2] = eca;
  var fca:int = e[3];
  var gca:int = e[8];
  var hca:int = gca + fca;
  e[8] = hca;
  var ica:int = e[3];
  var jca:int = e[2];
  var kca:int = ica + jca;
  e[4] = kca;
  var lca:int = e[11];
  var mca:int = e[8];
  var nca:int = 6;
  var oca:int = mca >> nca;
  var pca:int = e[8];
  var qca:int = 26;
  var rca:int = pca << qca;
  var sca:int = oca | rca;
  var tca:int = e[8];
  var uca:int = 11;
  var vca:int = tca >> uca;
  var wca:int = e[8];
  var xca:int = 21;
  var yca:int = wca << xca;
  var zca:int = vca | yca;
  var ada:int = sca ^ zca;
  var bda:int = e[8];
  var cda:int = 25;
  var dda:int = bda >> cda;
  var eda:int = e[8];
  var fda:int = 7;
  var gda:int = eda << fda;
  var hda:int = dda | gda;
  var ida:int = ada ^ hda;
  var jda:int = lca + ida;
  var kda:int = e[8];
  var lda:int = e[9];
  var mda:int = e[10];
  var nda:int = lda ^ mda;
  var oda:int = kda & nda;
  var pda:int = e[10];
  var qda:int = oda ^ pda;
  var rda:int = jda + qda;
  var sda:int = e[20];
  var tda:int = rda + sda;
  var uda:int = -670586216;
  var vda:int = tda + uda;
  e[3] = vda;
  var wda:int = e[4];
  var xda:int = 2;
  var yda:int = wda >> xda;
  var zda:int = e[4];
  var aea:int = 30;
  var bea:int = zda << aea;
  var cea:int = yda | bea;
  var dea:int = e[4];
  var eea:int = 13;
  var fea:int = dea >> eea;
  var gea:int = e[4];
  var hea:int = 19;
  var iea:int = gea << hea;
  var jea:int = fea | iea;
  var kea:int = cea ^ jea;
  var lea:int = e[4];
  var mea:int = 22;
  var nea:int = lea >> mea;
  var oea:int = e[4];
  var pea:int = 10;
  var qea:int = oea << pea;
  var rea:int = nea | qea;
  var sea:int = kea ^ rea;
  var tea:int = e[4];
  var uea:int = e[5];
  var vea:int = e[6];
  var wea:int = uea | vea;
  var xea:int = tea & wea;
  var yea:int = e[5];
  var zea:int = e[6];
  var afa:int = yea & zea;
  var bfa:int = xea | afa;
  var cfa:int = sea + bfa;
  e[2] = cfa;
  var dfa:int = e[3];
  var efa:int = e[7];
  var ffa:int = efa + dfa;
  e[7] = ffa;
  var gfa:int = e[3];
  var hfa:int = e[2];
  var ifa:int = gfa + hfa;
  e[11] = ifa;
  var jfa:int = e[10];
  var kfa:int = e[7];
  var lfa:int = 6;
  var mfa:int = kfa >> lfa;
  var nfa:int = e[7];
  var ofa:int = 26;
  var pfa:int = nfa << ofa;
  var qfa:int = mfa | pfa;
  var rfa:int = e[7];
  var sfa:int = 11;
  var tfa:int = rfa >> sfa;
  var ufa:int = e[7];
  var vfa:int = 21;
  var wfa:int = ufa << vfa;
  var xfa:int = tfa | wfa;
  var yfa:int = qfa ^ xfa;
  var zfa:int = e[7];
  var aga:int = 25;
  var bga:int = zfa >> aga;
  var cga:int = e[7];
  var dga:int = 7;
  var ega:int = cga << dga;
  var fga:int = bga | ega;
  var gga:int = yfa ^ fga;
  var hga:int = jfa + gga;
  var iga:int = e[7];
  var jga:int = e[8];
  var kga:int = e[9];
  var lga:int = jga ^ kga;
  var mga:int = iga & lga;
  var nga:int = e[9];
  var oga:int = mga ^ nga;
  var pga:int = hga + oga;
  var qga:int = e[21];
  var rga:int = pga + qga;
  var sga:int = 310598401;
  var tga:int = rga + sga;
  e[3] = tga;
  var uga:int = e[11];
  var vga:int = 2;
  var wga:int = uga >> vga;
  var xga:int = e[11];
  var yga:int = 30;
  var zga:int = xga << yga;
  var aha:int = wga | zga;
  var bha:int = e[11];
  var cha:int = 13;
  var dha:int = bha >> cha;
  var eha:int = e[11];
  var fha:int = 19;
  var gha:int = eha << fha;
  var hha:int = dha | gha;
  var iha:int = aha ^ hha;
  var jha:int = e[11];
  var kha:int = 22;
  var lha:int = jha >> kha;
  var mha:int = e[11];
  var nha:int = 10;
  var oha:int = mha << nha;
  var pha:int = lha | oha;
  var qha:int = iha ^ pha;
  var rha:int = e[11];
  var sha:int = e[4];
  var tha:int = e[5];
  var uha:int = sha | tha;
  var vha:int = rha & uha;
  var wha:int = e[4];
  var xha:int = e[5];
  var yha:int = wha & xha;
  var zha:int = vha | yha;
  var aia:int = qha + zha;
  e[2] = aia;
  var bia:int = e[3];
  var cia:int = e[6];
  var dia:int = cia + bia;
  e[6] = dia;
  var eia:int = e[3];
  var fia:int = e[2];
  var gia:int = eia + fia;
  e[10] = gia;
  var hia:int = e[9];
  var iia:int = e[6];
  var jia:int = 6;
  var kia:int = iia >> jia;
  var lia:int = e[6];
  var mia:int = 26;
  var nia:int = lia << mia;
  var oia:int = kia | nia;
  var pia:int = e[6];
  var qia:int = 11;
  var ria:int = pia >> qia;
  var sia:int = e[6];
  var tia:int = 21;
  var uia:int = sia << tia;
  var via:int = ria | uia;
  var wia:int = oia ^ via;
  var xia:int = e[6];
  var yia:int = 25;
  var zia:int = xia >> yia;
  var aja:int = e[6];
  var bja:int = 7;
  var cja:int = aja << bja;
  var dja:int = zia | cja;
  var eja:int = wia ^ dja;
  var fja:int = hia + eja;
  var gja:int = e[6];
  var hja:int = e[7];
  var ija:int = e[8];
  var jja:int = hja ^ ija;
  var kja:int = gja & jja;
  var lja:int = e[8];
  var mja:int = kja ^ lja;
  var nja:int = fja + mja;
  var oja:int = e[22];
  var pja:int = nja + oja;
  var qja:int = 607225278;
  var rja:int = pja + qja;
  e[3] = rja;
  var sja:int = e[10];
  var tja:int = 2;
  var uja:int = sja >> tja;
  var vja:int = e[10];
  var wja:int = 30;
  var xja:int = vja << wja;
  var yja:int = uja | xja;
  var zja:int = e[10];
  var aka:int = 13;
  var bka:int = zja >> aka;
  var cka:int = e[10];
  var dka:int = 19;
  var eka:int = cka << dka;
  var fka:int = bka | eka;
  var gka:int = yja ^ fka;
  var hka:int = e[10];
  var ika:int = 22;
  var jka:int = hka >> ika;
  var kka:int = e[10];
  var lka:int = 10;
  var mka:int = kka << lka;
  var nka:int = jka | mka;
  var oka:int = gka ^ nka;
  var pka:int = e[10];
  var qka:int = e[11];
  var rka:int = e[4];
  var ska:int = qka | rka;
  var tka:int = pka & ska;
  var uka:int = e[11];
  var vka:int = e[4];
  var wka:int = uka & vka;
  var xka:int = tka | wka;
  var yka:int = oka + xka;
  e[2] = yka;
  var zka:int = e[3];
  var ala:int = e[5];
  var bla:int = ala + zka;
  e[5] = bla;
  var cla:int = e[3];
  var dla:int = e[2];
  var ela:int = cla + dla;
  e[9] = ela;
  var fla:int = e[8];
  var gla:int = e[5];
  var hla:int = 6;
  var ila:int = gla >> hla;
  var jla:int = e[5];
  var kla:int = 26;
  var lla:int = jla << kla;
  var mla:int = ila | lla;
  var nla:int = e[5];
  var ola:int = 11;
  var pla:int = nla >> ola;
  var qla:int = e[5];
  var rla:int = 21;
  var sla:int = qla << rla;
  var tla:int = pla | sla;
  var ula:int = mla ^ tla;
  var vla:int = e[5];
  var wla:int = 25;
  var xla:int = vla >> wla;
  var yla:int = e[5];
  var zla:int = 7;
  var ama:int = yla << zla;
  var bma:int = xla | ama;
  var cma:int = ula ^ bma;
  var dma:int = fla + cma;
  var ema:int = e[5];
  var fma:int = e[6];
  var gma:int = e[7];
  var hma:int = fma ^ gma;
  var ima:int = ema & hma;
  var jma:int = e[7];
  var kma:int = ima ^ jma;
  var lma:int = dma + kma;
  var mma:int = e[23];
  var nma:int = lma + mma;
  var oma:int = 1426881987;
  var pma:int = nma + oma;
  e[3] = pma;
  var qma:int = e[9];
  var rma:int = 2;
  var sma:int = qma >> rma;
  var tma:int = e[9];
  var uma:int = 30;
  var vma:int = tma << uma;
  var wma:int = sma | vma;
  var xma:int = e[9];
  var yma:int = 13;
  var zma:int = xma >> yma;
  var ana:int = e[9];
  var bna:int = 19;
  var cna:int = ana << bna;
  var dna:int = zma | cna;
  var ena:int = wma ^ dna;
  var fna:int = e[9];
  var gna:int = 22;
  var hna:int = fna >> gna;
  var ina:int = e[9];
  var jna:int = 10;
  var kna:int = ina << jna;
  var lna:int = hna | kna;
  var mna:int = ena ^ lna;
  var nna:int = e[9];
  var ona:int = e[10];
  var pna:int = e[11];
  var qna:int = ona | pna;
  var rna:int = nna & qna;
  var sna:int = e[10];
  var tna:int = e[11];
  var una:int = sna & tna;
  var vna:int = rna | una;
  var wna:int = mna + vna;
  e[2] = wna;
  var xna:int = e[3];
  var yna:int = e[4];
  var zna:int = yna + xna;
  e[4] = zna;
  var aoa:int = e[3];
  var boa:int = e[2];
  var coa:int = aoa + boa;
  e[8] = coa;
  var doa:int = e[7];
  var eoa:int = e[4];
  var foa:int = 6;
  var goa:int = eoa >> foa;
  var hoa:int = e[4];
  var ioa:int = 26;
  var joa:int = hoa << ioa;
  var koa:int = goa | joa;
  var loa:int = e[4];
  var moa:int = 11;
  var noa:int = loa >> moa;
  var ooa:int = e[4];
  var poa:int = 21;
  var qoa:int = ooa << poa;
  var roa:int = noa | qoa;
  var soa:int = koa ^ roa;
  var toa:int = e[4];
  var uoa:int = 25;
  var voa:int = toa >> uoa;
  var woa:int = e[4];
  var xoa:int = 7;
  var yoa:int = woa << xoa;
  var zoa:int = voa | yoa;
  var apa:int = soa ^ zoa;
  var bpa:int = doa + apa;
  var cpa:int = e[4];
  var dpa:int = e[5];
  var epa:int = e[6];
  var fpa:int = dpa ^ epa;
  var gpa:int = cpa & fpa;
  var hpa:int = e[6];
  var ipa:int = gpa ^ hpa;
  var jpa:int = bpa + ipa;
  var kpa:int = e[24];
  var lpa:int = jpa + kpa;
  var mpa:int = 1925078388;
  var npa:int = lpa + mpa;
  e[3] = npa;
  var opa:int = e[8];
  var ppa:int = 2;
  var qpa:int = opa >> ppa;
  var rpa:int = e[8];
  var spa:int = 30;
  var tpa:int = rpa << spa;
  var upa:int = qpa | tpa;
  var vpa:int = e[8];
  var wpa:int = 13;
  var xpa:int = vpa >> wpa;
  var ypa:int = e[8];
  var zpa:int = 19;
  var aqa:int = ypa << zpa;
  var bqa:int = xpa | aqa;
  var cqa:int = upa ^ bqa;
  var dqa:int = e[8];
  var eqa:int = 22;
  var fqa:int = dqa >> eqa;
  var gqa:int = e[8];
  var hqa:int = 10;
  var iqa:int = gqa << hqa;
  var jqa:int = fqa | iqa;
  var kqa:int = cqa ^ jqa;
  var lqa:int = e[8];
  var mqa:int = e[9];
  var nqa:int = e[10];
  var oqa:int = mqa | nqa;
  var pqa:int = lqa & oqa;
  var qqa:int = e[9];
  var rqa:int = e[10];
  var sqa:int = qqa & rqa;
  var tqa:int = pqa | sqa;
  var uqa:int = kqa + tqa;
  e[2] = uqa;
  var vqa:int = e[3];
  var wqa:int = e[11];
  var xqa:int = wqa + vqa;
  e[11] = xqa;
  var yqa:int = e[3];
  var zqa:int = e[2];
  var ara:int = yqa + zqa;
  e[7] = ara;
  var bra:int = e[6];
  var cra:int = e[11];
  var dra:int = 6;
  var era:int = cra >> dra;
  var fra:int = e[11];
  var gra:int = 26;
  var hra:int = fra << gra;
  var ira:int = era | hra;
  var jra:int = e[11];
  var kra:int = 11;
  var lra:int = jra >> kra;
  var mra:int = e[11];
  var nra:int = 21;
  var ora:int = mra << nra;
  var pra:int = lra | ora;
  var qra:int = ira ^ pra;
  var rra:int = e[11];
  var sra:int = 25;
  var tra:int = rra >> sra;
  var ura:int = e[11];
  var vra:int = 7;
  var wra:int = ura << vra;
  var xra:int = tra | wra;
  var yra:int = qra ^ xra;
  var zra:int = bra + yra;
  var asa:int = e[11];
  var bsa:int = e[4];
  var csa:int = e[5];
  var dsa:int = bsa ^ csa;
  var esa:int = asa & dsa;
  var fsa:int = e[5];
  var gsa:int = esa ^ fsa;
  var hsa:int = zra + gsa;
  var isa:int = e[25];
  var jsa:int = hsa + isa;
  var ksa:int = -2132889090;
  var lsa:int = jsa + ksa;
  e[3] = lsa;
  var msa:int = e[7];
  var nsa:int = 2;
  var osa:int = msa >> nsa;
  var psa:int = e[7];
  var qsa:int = 30;
  var rsa:int = psa << qsa;
  var ssa:int = osa | rsa;
  var tsa:int = e[7];
  var usa:int = 13;
  var vsa:int = tsa >> usa;
  var wsa:int = e[7];
  var xsa:int = 19;
  var ysa:int = wsa << xsa;
  var zsa:int = vsa | ysa;
  var ata:int = ssa ^ zsa;
  var bta:int = e[7];
  var cta:int = 22;
  var dta:int = bta >> cta;
  var eta:int = e[7];
  var fta:int = 10;
  var gta:int = eta << fta;
  var hta:int = dta | gta;
  var ita:int = ata ^ hta;
  var jta:int = e[7];
  var kta:int = e[8];
  var lta:int = e[9];
  var mta:int = kta | lta;
  var nta:int = jta & mta;
  var ota:int = e[8];
  var pta:int = e[9];
  var qta:int = ota & pta;
  var rta:int = nta | qta;
  var sta:int = ita + rta;
  e[2] = sta;
  var tta:int = e[3];
  var uta:int = e[10];
  var vta:int = uta + tta;
  e[10] = vta;
  var wta:int = e[3];
  var xta:int = e[2];
  var yta:int = wta + xta;
  e[6] = yta;
  var zta:int = e[5];
  var aua:int = e[10];
  var bua:int = 6;
  var cua:int = aua >> bua;
  var dua:int = e[10];
  var eua:int = 26;
  var fua:int = dua << eua;
  var gua:int = cua | fua;
  var hua:int = e[10];
  var iua:int = 11;
  var jua:int = hua >> iua;
  var kua:int = e[10];
  var lua:int = 21;
  var mua:int = kua << lua;
  var nua:int = jua | mua;
  var oua:int = gua ^ nua;
  var pua:int = e[10];
  var qua:int = 25;
  var rua:int = pua >> qua;
  var sua:int = e[10];
  var tua:int = 7;
  var uua:int = sua << tua;
  var vua:int = rua | uua;
  var wua:int = oua ^ vua;
  var xua:int = zta + wua;
  var yua:int = e[10];
  var zua:int = e[11];
  var ava:int = e[4];
  var bva:int = zua ^ ava;
  var cva:int = yua & bva;
  var dva:int = e[4];
  var eva:int = cva ^ dva;
  var fva:int = xua + eva;
  var gva:int = e[26];
  var hva:int = fva + gva;
  var iva:int = -1680079193;
  var jva:int = hva + iva;
  e[3] = jva;
  var kva:int = e[6];
  var lva:int = 2;
  var mva:int = kva >> lva;
  var nva:int = e[6];
  var ova:int = 30;
  var pva:int = nva << ova;
  var qva:int = mva | pva;
  var rva:int = e[6];
  var sva:int = 13;
  var tva:int = rva >> sva;
  var uva:int = e[6];
  var vva:int = 19;
  var wva:int = uva << vva;
  var xva:int = tva | wva;
  var yva:int = qva ^ xva;
  var zva:int = e[6];
  var awa:int = 22;
  var bwa:int = zva >> awa;
  var cwa:int = e[6];
  var dwa:int = 10;
  var ewa:int = cwa << dwa;
  var fwa:int = bwa | ewa;
  var gwa:int = yva ^ fwa;
  var hwa:int = e[6];
  var iwa:int = e[7];
  var jwa:int = e[8];
  var kwa:int = iwa | jwa;
  var lwa:int = hwa & kwa;
  var mwa:int = e[7];
  var nwa:int = e[8];
  var owa:int = mwa & nwa;
  var pwa:int = lwa | owa;
  var qwa:int = gwa + pwa;
  e[2] = qwa;
  var rwa:int = e[3];
  var swa:int = e[9];
  var twa:int = swa + rwa;
  e[9] = twa;
  var uwa:int = e[3];
  var vwa:int = e[2];
  var wwa:int = uwa + vwa;
  e[5] = wwa;
  var xwa:int = e[4];
  var ywa:int = e[9];
  var zwa:int = 6;
  var axa:int = ywa >> zwa;
  var bxa:int = e[9];
  var cxa:int = 26;
  var dxa:int = bxa << cxa;
  var exa:int = axa | dxa;
  var fxa:int = e[9];
  var gxa:int = 11;
  var hxa:int = fxa >> gxa;
  var ixa:int = e[9];
  var jxa:int = 21;
  var kxa:int = ixa << jxa;
  var lxa:int = hxa | kxa;
  var mxa:int = exa ^ lxa;
  var nxa:int = e[9];
  var oxa:int = 25;
  var pxa:int = nxa >> oxa;
  var qxa:int = e[9];
  var rxa:int = 7;
  var sxa:int = qxa << rxa;
  var txa:int = pxa | sxa;
  var uxa:int = mxa ^ txa;
  var vxa:int = xwa + uxa;
  var wxa:int = e[9];
  var xxa:int = e[10];
  var yxa:int = e[11];
  var zxa:int = xxa ^ yxa;
  var aya:int = wxa & zxa;
  var bya:int = e[11];
  var cya:int = aya ^ bya;
  var dya:int = vxa + cya;
  var eya:int = e[27];
  var fya:int = dya + eya;
  var gya:int = -1046744716;
  var hya:int = fya + gya;
  e[3] = hya;
  var iya:int = e[5];
  var jya:int = 2;
  var kya:int = iya >> jya;
  var lya:int = e[5];
  var mya:int = 30;
  var nya:int = lya << mya;
  var oya:int = kya | nya;
  var pya:int = e[5];
  var qya:int = 13;
  var rya:int = pya >> qya;
  var sya:int = e[5];
  var tya:int = 19;
  var uya:int = sya << tya;
  var vya:int = rya | uya;
  var wya:int = oya ^ vya;
  var xya:int = e[5];
  var yya:int = 22;
  var zya:int = xya >> yya;
  var aza:int = e[5];
  var bza:int = 10;
  var cza:int = aza << bza;
  var dza:int = zya | cza;
  var eza:int = wya ^ dza;
  var fza:int = e[5];
  var gza:int = e[6];
  var hza:int = e[7];
  var iza:int = gza | hza;
  var jza:int = fza & iza;
  var kza:int = e[6];
  var lza:int = e[7];
  var mza:int = kza & lza;
  var nza:int = jza | mza;
  var oza:int = eza + nza;
  e[2] = oza;
  var pza:int = e[3];
  var qza:int = e[8];
  var rza:int = qza + pza;
  e[8] = rza;
  var sza:int = e[3];
  var tza:int = e[2];
  var uza:int = sza + tza;
  e[4] = uza;
  var vza:int = e[11];
  var wza:int = e[8];
  var xza:int = 6;
  var yza:int = wza >> xza;
  var zza:int = e[8];
  var aab:int = 26;
  var bab:int = zza << aab;
  var cab:int = yza | bab;
  var dab:int = e[8];
  var eab:int = 11;
  var fab:int = dab >> eab;
  var gab:int = e[8];
  var hab:int = 21;
  var iab:int = gab << hab;
  var jab:int = fab | iab;
  var kab:int = cab ^ jab;
  var lab:int = e[8];
  var mab:int = 25;
  var nab:int = lab >> mab;
  var oab:int = e[8];
  var pab:int = 7;
  var qab:int = oab << pab;
  var rab:int = nab | qab;
  var sab:int = kab ^ rab;
  var tab:int = vza + sab;
  var uab:int = e[8];
  var vab:int = e[9];
  var wab:int = e[10];
  var xab:int = vab ^ wab;
  var yab:int = uab & xab;
  var zab:int = e[10];
  var abb:int = yab ^ zab;
  var bbb:int = tab + abb;
  var cbb:int = e[28];
  var dbb:int = bbb + cbb;
  var ebb:int = -459576895;
  var fbb:int = dbb + ebb;
  e[3] = fbb;
  var gbb:int = e[4];
  var hbb:int = 2;
  var ibb:int = gbb >> hbb;
  var jbb:int = e[4];
  var kbb:int = 30;
  var lbb:int = jbb << kbb;
  var mbb:int = ibb | lbb;
  var nbb:int = e[4];
  var obb:int = 13;
  var pbb:int = nbb >> obb;
  var qbb:int = e[4];
  var rbb:int = 19;
  var sbb:int = qbb << rbb;
  var tbb:int = pbb | sbb;
  var ubb:int = mbb ^ tbb;
  var vbb:int = e[4];
  var wbb:int = 22;
  var xbb:int = vbb >> wbb;
  var ybb:int = e[4];
  var zbb:int = 10;
  var acb:int = ybb << zbb;
  var bcb:int = xbb | acb;
  var ccb:int = ubb ^ bcb;
  var dcb:int = e[4];
  var ecb:int = e[5];
  var fcb:int = e[6];
  var gcb:int = ecb | fcb;
  var hcb:int = dcb & gcb;
  var icb:int = e[5];
  var jcb:int = e[6];
  var kcb:int = icb & jcb;
  var lcb:int = hcb | kcb;
  var mcb:int = ccb + lcb;
  e[2] = mcb;
  var ncb:int = e[3];
  var ocb:int = e[7];
  var pcb:int = ocb + ncb;
  e[7] = pcb;
  var qcb:int = e[3];
  var rcb:int = e[2];
  var scb:int = qcb + rcb;
  e[11] = scb;
  var tcb:int = e[10];
  var ucb:int = e[7];
  var vcb:int = 6;
  var wcb:int = ucb >> vcb;
  var xcb:int = e[7];
  var ycb:int = 26;
  var zcb:int = xcb << ycb;
  var adb:int = wcb | zcb;
  var bdb:int = e[7];
  var cdb:int = 11;
  var ddb:int = bdb >> cdb;
  var edb:int = e[7];
  var fdb:int = 21;
  var gdb:int = edb << fdb;
  var hdb:int = ddb | gdb;
  var idb:int = adb ^ hdb;
  var jdb:int = e[7];
  var kdb:int = 25;
  var ldb:int = jdb >> kdb;
  var mdb:int = e[7];
  var ndb:int = 7;
  var odb:int = mdb << ndb;
  var pdb:int = ldb | odb;
  var qdb:int = idb ^ pdb;
  var rdb:int = tcb + qdb;
  var sdb:int = e[7];
  var tdb:int = e[8];
  var udb:int = e[9];
  var vdb:int = tdb ^ udb;
  var wdb:int = sdb & vdb;
  var xdb:int = e[9];
  var ydb:int = wdb ^ xdb;
  var zdb:int = rdb + ydb;
  var aeb:int = e[29];
  var beb:int = zdb + aeb;
  var ceb:int = -272742522;
  var deb:int = beb + ceb;
  e[3] = deb;
  var eeb:int = e[11];
  var feb:int = 2;
  var geb:int = eeb >> feb;
  var heb:int = e[11];
  var ieb:int = 30;
  var jeb:int = heb << ieb;
  var keb:int = geb | jeb;
  var leb:int = e[11];
  var meb:int = 13;
  var neb:int = leb >> meb;
  var oeb:int = e[11];
  var peb:int = 19;
  var qeb:int = oeb << peb;
  var reb:int = neb | qeb;
  var seb:int = keb ^ reb;
  var teb:int = e[11];
  var ueb:int = 22;
  var veb:int = teb >> ueb;
  var web:int = e[11];
  var xeb:int = 10;
  var yeb:int = web << xeb;
  var zeb:int = veb | yeb;
  var afb:int = seb ^ zeb;
  var bfb:int = e[11];
  var cfb:int = e[4];
  var dfb:int = e[5];
  var efb:int = cfb | dfb;
  var ffb:int = bfb & efb;
  var gfb:int = e[4];
  var hfb:int = e[5];
  var ifb:int = gfb & hfb;
  var jfb:int = ffb | ifb;
  var kfb:int = afb + jfb;
  e[2] = kfb;
  var lfb:int = e[3];
  var mfb:int = e[6];
  var nfb:int = mfb + lfb;
  e[6] = nfb;
  var ofb:int = e[3];
  var pfb:int = e[2];
  var qfb:int = ofb + pfb;
  e[10] = qfb;
  var rfb:int = e[9];
  var sfb:int = e[6];
  var tfb:int = 6;
  var ufb:int = sfb >> tfb;
  var vfb:int = e[6];
  var wfb:int = 26;
  var xfb:int = vfb << wfb;
  var yfb:int = ufb | xfb;
  var zfb:int = e[6];
  var agb:int = 11;
  var bgb:int = zfb >> agb;
  var cgb:int = e[6];
  var dgb:int = 21;
  var egb:int = cgb << dgb;
  var fgb:int = bgb | egb;
  var ggb:int = yfb ^ fgb;
  var hgb:int = e[6];
  var igb:int = 25;
  var jgb:int = hgb >> igb;
  var kgb:int = e[6];
  var lgb:int = 7;
  var mgb:int = kgb << lgb;
  var ngb:int = jgb | mgb;
  var ogb:int = ggb ^ ngb;
  var pgb:int = rfb + ogb;
  var qgb:int = e[6];
  var rgb:int = e[7];
  var sgb:int = e[8];
  var tgb:int = rgb ^ sgb;
  var ugb:int = qgb & tgb;
  var vgb:int = e[8];
  var wgb:int = ugb ^ vgb;
  var xgb:int = pgb + wgb;
  var ygb:int = e[30];
  var zgb:int = xgb + ygb;
  var ahb:int = 264347078;
  var bhb:int = zgb + ahb;
  e[3] = bhb;
  var chb:int = e[10];
  var dhb:int = 2;
  var ehb:int = chb >> dhb;
  var fhb:int = e[10];
  var ghb:int = 30;
  var hhb:int = fhb << ghb;
  var ihb:int = ehb | hhb;
  var jhb:int = e[10];
  var khb:int = 13;
  var lhb:int = jhb >> khb;
  var mhb:int = e[10];
  var nhb:int = 19;
  var ohb:int = mhb << nhb;
  var phb:int = lhb | ohb;
  var qhb:int = ihb ^ phb;
  var rhb:int = e[10];
  var shb:int = 22;
  var thb:int = rhb >> shb;
  var uhb:int = e[10];
  var vhb:int = 10;
  var whb:int = uhb << vhb;
  var xhb:int = thb | whb;
  var yhb:int = qhb ^ xhb;
  var zhb:int = e[10];
  var aib:int = e[11];
  var bib:int = e[4];
  var cib:int = aib | bib;
  var dib:int = zhb & cib;
  var eib:int = e[11];
  var fib:int = e[4];
  var gib:int = eib & fib;
  var hib:int = dib | gib;
  var iib:int = yhb + hib;
  e[2] = iib;
  var jib:int = e[3];
  var kib:int = e[5];
  var lib:int = kib + jib;
  e[5] = lib;
  var mib:int = e[3];
  var nib:int = e[2];
  var oib:int = mib + nib;
  e[9] = oib;
  var pib:int = e[8];
  var qib:int = e[5];
  var rib:int = 6;
  var sib:int = qib >> rib;
  var tib:int = e[5];
  var uib:int = 26;
  var vib:int = tib << uib;
  var wib:int = sib | vib;
  var xib:int = e[5];
  var yib:int = 11;
  var zib:int = xib >> yib;
  var ajb:int = e[5];
  var bjb:int = 21;
  var cjb:int = ajb << bjb;
  var djb:int = zib | cjb;
  var ejb:int = wib ^ djb;
  var fjb:int = e[5];
  var gjb:int = 25;
  var hjb:int = fjb >> gjb;
  var ijb:int = e[5];
  var jjb:int = 7;
  var kjb:int = ijb << jjb;
  var ljb:int = hjb | kjb;
  var mjb:int = ejb ^ ljb;
  var njb:int = pib + mjb;
  var ojb:int = e[5];
  var pjb:int = e[6];
  var qjb:int = e[7];
  var rjb:int = pjb ^ qjb;
  var sjb:int = ojb & rjb;
  var tjb:int = e[7];
  var ujb:int = sjb ^ tjb;
  var vjb:int = njb + ujb;
  var wjb:int = e[31];
  var xjb:int = vjb + wjb;
  var yjb:int = 604807628;
  var zjb:int = xjb + yjb;
  e[3] = zjb;
  var akb:int = e[9];
  var bkb:int = 2;
  var ckb:int = akb >> bkb;
  var dkb:int = e[9];
  var ekb:int = 30;
  var fkb:int = dkb << ekb;
  var gkb:int = ckb | fkb;
  var hkb:int = e[9];
  var ikb:int = 13;
  var jkb:int = hkb >> ikb;
  var kkb:int = e[9];
  var lkb:int = 19;
  var mkb:int = kkb << lkb;
  var nkb:int = jkb | mkb;
  var okb:int = gkb ^ nkb;
  var pkb:int = e[9];
  var qkb:int = 22;
  var rkb:int = pkb >> qkb;
  var skb:int = e[9];
  var tkb:int = 10;
  var ukb:int = skb << tkb;
  var vkb:int = rkb | ukb;
  var wkb:int = okb ^ vkb;
  var xkb:int = e[9];
  var ykb:int = e[10];
  var zkb:int = e[11];
  var alb:int = ykb | zkb;
  var blb:int = xkb & alb;
  var clb:int = e[10];
  var dlb:int = e[11];
  var elb:int = clb & dlb;
  var flb:int = blb | elb;
  var glb:int = wkb + flb;
  e[2] = glb;
  var hlb:int = e[3];
  var ilb:int = e[4];
  var jlb:int = ilb + hlb;
  e[4] = jlb;
  var klb:int = e[3];
  var llb:int = e[2];
  var mlb:int = klb + llb;
  e[8] = mlb;
  var nlb:int = e[7];
  var olb:int = e[4];
  var plb:int = 6;
  var qlb:int = olb >> plb;
  var rlb:int = e[4];
  var slb:int = 26;
  var tlb:int = rlb << slb;
  var ulb:int = qlb | tlb;
  var vlb:int = e[4];
  var wlb:int = 11;
  var xlb:int = vlb >> wlb;
  var ylb:int = e[4];
  var zlb:int = 21;
  var amb:int = ylb << zlb;
  var bmb:int = xlb | amb;
  var cmb:int = ulb ^ bmb;
  var dmb:int = e[4];
  var emb:int = 25;
  var fmb:int = dmb >> emb;
  var gmb:int = e[4];
  var hmb:int = 7;
  var imb:int = gmb << hmb;
  var jmb:int = fmb | imb;
  var kmb:int = cmb ^ jmb;
  var lmb:int = nlb + kmb;
  var mmb:int = e[4];
  var nmb:int = e[5];
  var omb:int = e[6];
  var pmb:int = nmb ^ omb;
  var qmb:int = mmb & pmb;
  var rmb:int = e[6];
  var smb:int = qmb ^ rmb;
  var tmb:int = lmb + smb;
  var umb:int = e[32];
  var vmb:int = tmb + umb;
  var wmb:int = 770255983;
  var xmb:int = vmb + wmb;
  e[3] = xmb;
  var ymb:int = e[8];
  var zmb:int = 2;
  var anb:int = ymb >> zmb;
  var bnb:int = e[8];
  var cnb:int = 30;
  var dnb:int = bnb << cnb;
  var enb:int = anb | dnb;
  var fnb:int = e[8];
  var gnb:int = 13;
  var hnb:int = fnb >> gnb;
  var inb:int = e[8];
  var jnb:int = 19;
  var knb:int = inb << jnb;
  var lnb:int = hnb | knb;
  var mnb:int = enb ^ lnb;
  var nnb:int = e[8];
  var onb:int = 22;
  var pnb:int = nnb >> onb;
  var qnb:int = e[8];
  var rnb:int = 10;
  var snb:int = qnb << rnb;
  var tnb:int = pnb | snb;
  var unb:int = mnb ^ tnb;
  var vnb:int = e[8];
  var wnb:int = e[9];
  var xnb:int = e[10];
  var ynb:int = wnb | xnb;
  var znb:int = vnb & ynb;
  var aob:int = e[9];
  var bob:int = e[10];
  var cob:int = aob & bob;
  var dob:int = znb | cob;
  var eob:int = unb + dob;
  e[2] = eob;
  var fob:int = e[3];
  var gob:int = e[11];
  var hob:int = gob + fob;
  e[11] = hob;
  var iob:int = e[3];
  var job:int = e[2];
  var kob:int = iob + job;
  e[7] = kob;
  var lob:int = e[6];
  var mob:int = e[11];
  var nob:int = 6;
  var oob:int = mob >> nob;
  var pob:int = e[11];
  var qob:int = 26;
  var rob:int = pob << qob;
  var sob:int = oob | rob;
  var tob:int = e[11];
  var uob:int = 11;
  var vob:int = tob >> uob;
  var wob:int = e[11];
  var xob:int = 21;
  var yob:int = wob << xob;
  var zob:int = vob | yob;
  var apb:int = sob ^ zob;
  var bpb:int = e[11];
  var cpb:int = 25;
  var dpb:int = bpb >> cpb;
  var epb:int = e[11];
  var fpb:int = 7;
  var gpb:int = epb << fpb;
  var hpb:int = dpb | gpb;
  var ipb:int = apb ^ hpb;
  var jpb:int = lob + ipb;
  var kpb:int = e[11];
  var lpb:int = e[4];
  var mpb:int = e[5];
  var npb:int = lpb ^ mpb;
  var opb:int = kpb & npb;
  var ppb:int = e[5];
  var qpb:int = opb ^ ppb;
  var rpb:int = jpb + qpb;
  var spb:int = e[33];
  var tpb:int = rpb + spb;
  var upb:int = 1249150122;
  var vpb:int = tpb + upb;
  e[3] = vpb;
  var wpb:int = e[7];
  var xpb:int = 2;
  var ypb:int = wpb >> xpb;
  var zpb:int = e[7];
  var aqb:int = 30;
  var bqb:int = zpb << aqb;
  var cqb:int = ypb | bqb;
  var dqb:int = e[7];
  var eqb:int = 13;
  var fqb:int = dqb >> eqb;
  var gqb:int = e[7];
  var hqb:int = 19;
  var iqb:int = gqb << hqb;
  var jqb:int = fqb | iqb;
  var kqb:int = cqb ^ jqb;
  var lqb:int = e[7];
  var mqb:int = 22;
  var nqb:int = lqb >> mqb;
  var oqb:int = e[7];
  var pqb:int = 10;
  var qqb:int = oqb << pqb;
  var rqb:int = nqb | qqb;
  var sqb:int = kqb ^ rqb;
  var tqb:int = e[7];
  var uqb:int = e[8];
  var vqb:int = e[9];
  var wqb:int = uqb | vqb;
  var xqb:int = tqb & wqb;
  var yqb:int = e[8];
  var zqb:int = e[9];
  var arb:int = yqb & zqb;
  var brb:int = xqb | arb;
  var crb:int = sqb + brb;
  e[2] = crb;
  var drb:int = e[3];
  var erb:int = e[10];
  var frb:int = erb + drb;
  e[10] = frb;
  var grb:int = e[3];
  var hrb:int = e[2];
  var irb:int = grb + hrb;
  e[6] = irb;
  var jrb:int = e[5];
  var krb:int = e[10];
  var lrb:int = 6;
  var mrb:int = krb >> lrb;
  var nrb:int = e[10];
  var orb:int = 26;
  var prb:int = nrb << orb;
  var qrb:int = mrb | prb;
  var rrb:int = e[10];
  var srb:int = 11;
  var trb:int = rrb >> srb;
  var urb:int = e[10];
  var vrb:int = 21;
  var wrb:int = urb << vrb;
  var xrb:int = trb | wrb;
  var yrb:int = qrb ^ xrb;
  var zrb:int = e[10];
  var asb:int = 25;
  var bsb:int = zrb >> asb;
  var csb:int = e[10];
  var dsb:int = 7;
  var esb:int = csb << dsb;
  var fsb:int = bsb | esb;
  var gsb:int = yrb ^ fsb;
  var hsb:int = jrb + gsb;
  var isb:int = e[10];
  var jsb:int = e[11];
  var ksb:int = e[4];
  var lsb:int = jsb ^ ksb;
  var msb:int = isb & lsb;
  var nsb:int = e[4];
  var osb:int = msb ^ nsb;
  var psb:int = hsb + osb;
  var qsb:int = e[34];
  var rsb:int = psb + qsb;
  var ssb:int = 1555081692;
  var tsb:int = rsb + ssb;
  e[3] = tsb;
  var usb:int = e[6];
  var vsb:int = 2;
  var wsb:int = usb >> vsb;
  var xsb:int = e[6];
  var ysb:int = 30;
  var zsb:int = xsb << ysb;
  var atb:int = wsb | zsb;
  var btb:int = e[6];
  var ctb:int = 13;
  var dtb:int = btb >> ctb;
  var etb:int = e[6];
  var ftb:int = 19;
  var gtb:int = etb << ftb;
  var htb:int = dtb | gtb;
  var itb:int = atb ^ htb;
  var jtb:int = e[6];
  var ktb:int = 22;
  var ltb:int = jtb >> ktb;
  var mtb:int = e[6];
  var ntb:int = 10;
  var otb:int = mtb << ntb;
  var ptb:int = ltb | otb;
  var qtb:int = itb ^ ptb;
  var rtb:int = e[6];
  var stb:int = e[7];
  var ttb:int = e[8];
  var utb:int = stb | ttb;
  var vtb:int = rtb & utb;
  var wtb:int = e[7];
  var xtb:int = e[8];
  var ytb:int = wtb & xtb;
  var ztb:int = vtb | ytb;
  var aub:int = qtb + ztb;
  e[2] = aub;
  var bub:int = e[3];
  var cub:int = e[9];
  var dub:int = cub + bub;
  e[9] = dub;
  var eub:int = e[3];
  var fub:int = e[2];
  var gub:int = eub + fub;
  e[5] = gub;
  var hub:int = e[4];
  var iub:int = e[9];
  var jub:int = 6;
  var kub:int = iub >> jub;
  var lub:int = e[9];
  var mub:int = 26;
  var nub:int = lub << mub;
  var oub:int = kub | nub;
  var pub:int = e[9];
  var qub:int = 11;
  var rub:int = pub >> qub;
  var sub:int = e[9];
  var tub:int = 21;
  var uub:int = sub << tub;
  var vub:int = rub | uub;
  var wub:int = oub ^ vub;
  var xub:int = e[9];
  var yub:int = 25;
  var zub:int = xub >> yub;
  var avb:int = e[9];
  var bvb:int = 7;
  var cvb:int = avb << bvb;
  var dvb:int = zub | cvb;
  var evb:int = wub ^ dvb;
  var fvb:int = hub + evb;
  var gvb:int = e[9];
  var hvb:int = e[10];
  var ivb:int = e[11];
  var jvb:int = hvb ^ ivb;
  var kvb:int = gvb & jvb;
  var lvb:int = e[11];
  var mvb:int = kvb ^ lvb;
  var nvb:int = fvb + mvb;
  var ovb:int = e[35];
  var pvb:int = nvb + ovb;
  var qvb:int = 1996064986;
  var rvb:int = pvb + qvb;
  e[3] = rvb;
  var svb:int = e[5];
  var tvb:int = 2;
  var uvb:int = svb >> tvb;
  var vvb:int = e[5];
  var wvb:int = 30;
  var xvb:int = vvb << wvb;
  var yvb:int = uvb | xvb;
  var zvb:int = e[5];
  var awb:int = 13;
  var bwb:int = zvb >> awb;
  var cwb:int = e[5];
  var dwb:int = 19;
  var ewb:int = cwb << dwb;
  var fwb:int = bwb | ewb;
  var gwb:int = yvb ^ fwb;
  var hwb:int = e[5];
  var iwb:int = 22;
  var jwb:int = hwb >> iwb;
  var kwb:int = e[5];
  var lwb:int = 10;
  var mwb:int = kwb << lwb;
  var nwb:int = jwb | mwb;
  var owb:int = gwb ^ nwb;
  var pwb:int = e[5];
  var qwb:int = e[6];
  var rwb:int = e[7];
  var swb:int = qwb | rwb;
  var twb:int = pwb & swb;
  var uwb:int = e[6];
  var vwb:int = e[7];
  var wwb:int = uwb & vwb;
  var xwb:int = twb | wwb;
  var ywb:int = owb + xwb;
  e[2] = ywb;
  var zwb:int = e[3];
  var axb:int = e[8];
  var bxb:int = axb + zwb;
  e[8] = bxb;
  var cxb:int = e[3];
  var dxb:int = e[2];
  var exb:int = cxb + dxb;
  e[4] = exb;
  var fxb:int = e[11];
  var gxb:int = e[8];
  var hxb:int = 6;
  var ixb:int = gxb >> hxb;
  var jxb:int = e[8];
  var kxb:int = 26;
  var lxb:int = jxb << kxb;
  var mxb:int = ixb | lxb;
  var nxb:int = e[8];
  var oxb:int = 11;
  var pxb:int = nxb >> oxb;
  var qxb:int = e[8];
  var rxb:int = 21;
  var sxb:int = qxb << rxb;
  var txb:int = pxb | sxb;
  var uxb:int = mxb ^ txb;
  var vxb:int = e[8];
  var wxb:int = 25;
  var xxb:int = vxb >> wxb;
  var yxb:int = e[8];
  var zxb:int = 7;
  var ayb:int = yxb << zxb;
  var byb:int = xxb | ayb;
  var cyb:int = uxb ^ byb;
  var dyb:int = fxb + cyb;
  var eyb:int = e[8];
  var fyb:int = e[9];
  var gyb:int = e[10];
  var hyb:int = fyb ^ gyb;
  var iyb:int = eyb & hyb;
  var jyb:int = e[10];
  var kyb:int = iyb ^ jyb;
  var lyb:int = dyb + kyb;
  var myb:int = e[36];
  var nyb:int = lyb + myb;
  var oyb:int = -1740746414;
  var pyb:int = nyb + oyb;
  e[3] = pyb;
  var qyb:int = e[4];
  var ryb:int = 2;
  var syb:int = qyb >> ryb;
  var tyb:int = e[4];
  var uyb:int = 30;
  var vyb:int = tyb << uyb;
  var wyb:int = syb | vyb;
  var xyb:int = e[4];
  var yyb:int = 13;
  var zyb:int = xyb >> yyb;
  var azb:int = e[4];
  var bzb:int = 19;
  var czb:int = azb << bzb;
  var dzb:int = zyb | czb;
  var ezb:int = wyb ^ dzb;
  var fzb:int = e[4];
  var gzb:int = 22;
  var hzb:int = fzb >> gzb;
  var izb:int = e[4];
  var jzb:int = 10;
  var kzb:int = izb << jzb;
  var lzb:int = hzb | kzb;
  var mzb:int = ezb ^ lzb;
  var nzb:int = e[4];
  var ozb:int = e[5];
  var pzb:int = e[6];
  var qzb:int = ozb | pzb;
  var rzb:int = nzb & qzb;
  var szb:int = e[5];
  var tzb:int = e[6];
  var uzb:int = szb & tzb;
  var vzb:int = rzb | uzb;
  var wzb:int = mzb + vzb;
  e[2] = wzb;
  var xzb:int = e[3];
  var yzb:int = e[7];
  var zzb:int = yzb + xzb;
  e[7] = zzb;
  var aac:int = e[3];
  var bac:int = e[2];
  var cac:int = aac + bac;
  e[11] = cac;
  var dac:int = e[10];
  var eac:int = e[7];
  var fac:int = 6;
  var gac:int = eac >> fac;
  var hac:int = e[7];
  var iac:int = 26;
  var jac:int = hac << iac;
  var kac:int = gac | jac;
  var lac:int = e[7];
  var mac:int = 11;
  var nac:int = lac >> mac;
  var oac:int = e[7];
  var pac:int = 21;
  var qac:int = oac << pac;
  var rac:int = nac | qac;
  var sac:int = kac ^ rac;
  var tac:int = e[7];
  var uac:int = 25;
  var vac:int = tac >> uac;
  var wac:int = e[7];
  var xac:int = 7;
  var yac:int = wac << xac;
  var zac:int = vac | yac;
  var abc:int = sac ^ zac;
  var bbc:int = dac + abc;
  var cbc:int = e[7];
  var dbc:int = e[8];
  var ebc:int = e[9];
  var fbc:int = dbc ^ ebc;
  var gbc:int = cbc & fbc;
  var hbc:int = e[9];
  var ibc:int = gbc ^ hbc;
  var jbc:int = bbc + ibc;
  var kbc:int = e[37];
  var lbc:int = jbc + kbc;
  var mbc:int = -1473132947;
  var nbc:int = lbc + mbc;
  e[3] = nbc;
  var obc:int = e[11];
  var pbc:int = 2;
  var qbc:int = obc >> pbc;
  var rbc:int = e[11];
  var sbc:int = 30;
  var tbc:int = rbc << sbc;
  var ubc:int = qbc | tbc;
  var vbc:int = e[11];
  var wbc:int = 13;
  var xbc:int = vbc >> wbc;
  var ybc:int = e[11];
  var zbc:int = 19;
  var acc:int = ybc << zbc;
  var bcc:int = xbc | acc;
  var ccc:int = ubc ^ bcc;
  var dcc:int = e[11];
  var ecc:int = 22;
  var fcc:int = dcc >> ecc;
  var gcc:int = e[11];
  var hcc:int = 10;
  var icc:int = gcc << hcc;
  var jcc:int = fcc | icc;
  var kcc:int = ccc ^ jcc;
  var lcc:int = e[11];
  var mcc:int = e[4];
  var ncc:int = e[5];
  var occ:int = mcc | ncc;
  var pcc:int = lcc & occ;
  var qcc:int = e[4];
  var rcc:int = e[5];
  var scc:int = qcc & rcc;
  var tcc:int = pcc | scc;
  var ucc:int = kcc + tcc;
  e[2] = ucc;
  var vcc:int = e[3];
  var wcc:int = e[6];
  var xcc:int = wcc + vcc;
  e[6] = xcc;
  var ycc:int = e[3];
  var zcc:int = e[2];
  var adc:int = ycc + zcc;
  e[10] = adc;
  var bdc:int = e[9];
  var cdc:int = e[6];
  var ddc:int = 6;
  var edc:int = cdc >> ddc;
  var fdc:int = e[6];
  var gdc:int = 26;
  var hdc:int = fdc << gdc;
  var idc:int = edc | hdc;
  var jdc:int = e[6];
  var kdc:int = 11;
  var ldc:int = jdc >> kdc;
  var mdc:int = e[6];
  var ndc:int = 21;
  var odc:int = mdc << ndc;
  var pdc:int = ldc | odc;
  var qdc:int = idc ^ pdc;
  var rdc:int = e[6];
  var sdc:int = 25;
  var tdc:int = rdc >> sdc;
  var udc:int = e[6];
  var vdc:int = 7;
  var wdc:int = udc << vdc;
  var xdc:int = tdc | wdc;
  var ydc:int = qdc ^ xdc;
  var zdc:int = bdc + ydc;
  var aec:int = e[6];
  var bec:int = e[7];
  var cec:int = e[8];
  var dec:int = bec ^ cec;
  var eec:int = aec & dec;
  var fec:int = e[8];
  var gec:int = eec ^ fec;
  var hec:int = zdc + gec;
  var iec:int = e[38];
  var jec:int = hec + iec;
  var kec:int = -1341970488;
  var lec:int = jec + kec;
  e[3] = lec;
  var mec:int = e[10];
  var nec:int = 2;
  var oec:int = mec >> nec;
  var pec:int = e[10];
  var qec:int = 30;
  var rec:int = pec << qec;
  var sec:int = oec | rec;
  var tec:int = e[10];
  var uec:int = 13;
  var vec:int = tec >> uec;
  var wec:int = e[10];
  var xec:int = 19;
  var yec:int = wec << xec;
  var zec:int = vec | yec;
  var afc:int = sec ^ zec;
  var bfc:int = e[10];
  var cfc:int = 22;
  var dfc:int = bfc >> cfc;
  var efc:int = e[10];
  var ffc:int = 10;
  var gfc:int = efc << ffc;
  var hfc:int = dfc | gfc;
  var ifc:int = afc ^ hfc;
  var jfc:int = e[10];
  var kfc:int = e[11];
  var lfc:int = e[4];
  var mfc:int = kfc | lfc;
  var nfc:int = jfc & mfc;
  var ofc:int = e[11];
  var pfc:int = e[4];
  var qfc:int = ofc & pfc;
  var rfc:int = nfc | qfc;
  var sfc:int = ifc + rfc;
  e[2] = sfc;
  var tfc:int = e[3];
  var ufc:int = e[5];
  var vfc:int = ufc + tfc;
  e[5] = vfc;
  var wfc:int = e[3];
  var xfc:int = e[2];
  var yfc:int = wfc + xfc;
  e[9] = yfc;
  var zfc:int = e[8];
  var agc:int = e[5];
  var bgc:int = 6;
  var cgc:int = agc >> bgc;
  var dgc:int = e[5];
  var egc:int = 26;
  var fgc:int = dgc << egc;
  var ggc:int = cgc | fgc;
  var hgc:int = e[5];
  var igc:int = 11;
  var jgc:int = hgc >> igc;
  var kgc:int = e[5];
  var lgc:int = 21;
  var mgc:int = kgc << lgc;
  var ngc:int = jgc | mgc;
  var ogc:int = ggc ^ ngc;
  var pgc:int = e[5];
  var qgc:int = 25;
  var rgc:int = pgc >> qgc;
  var sgc:int = e[5];
  var tgc:int = 7;
  var ugc:int = sgc << tgc;
  var vgc:int = rgc | ugc;
  var wgc:int = ogc ^ vgc;
  var xgc:int = zfc + wgc;
  var ygc:int = e[5];
  var zgc:int = e[6];
  var ahc:int = e[7];
  var bhc:int = zgc ^ ahc;
  var chc:int = ygc & bhc;
  var dhc:int = e[7];
  var ehc:int = chc ^ dhc;
  var fhc:int = xgc + ehc;
  var ghc:int = e[39];
  var hhc:int = fhc + ghc;
  var ihc:int = -1084653625;
  var jhc:int = hhc + ihc;
  e[3] = jhc;
  var khc:int = e[9];
  var lhc:int = 2;
  var mhc:int = khc >> lhc;
  var nhc:int = e[9];
  var ohc:int = 30;
  var phc:int = nhc << ohc;
  var qhc:int = mhc | phc;
  var rhc:int = e[9];
  var shc:int = 13;
  var thc:int = rhc >> shc;
  var uhc:int = e[9];
  var vhc:int = 19;
  var whc:int = uhc << vhc;
  var xhc:int = thc | whc;
  var yhc:int = qhc ^ xhc;
  var zhc:int = e[9];
  var aic:int = 22;
  var bic:int = zhc >> aic;
  var cic:int = e[9];
  var dic:int = 10;
  var eic:int = cic << dic;
  var fic:int = bic | eic;
  var gic:int = yhc ^ fic;
  var hic:int = e[9];
  var iic:int = e[10];
  var jic:int = e[11];
  var kic:int = iic | jic;
  var lic:int = hic & kic;
  var mic:int = e[10];
  var nic:int = e[11];
  var oic:int = mic & nic;
  var pic:int = lic | oic;
  var qic:int = gic + pic;
  e[2] = qic;
  var ric:int = e[3];
  var sic:int = e[4];
  var tic:int = sic + ric;
  e[4] = tic;
  var uic:int = e[3];
  var vic:int = e[2];
  var wic:int = uic + vic;
  e[8] = wic;
  var xic:int = e[7];
  var yic:int = e[4];
  var zic:int = 6;
  var ajc:int = yic >> zic;
  var bjc:int = e[4];
  var cjc:int = 26;
  var djc:int = bjc << cjc;
  var ejc:int = ajc | djc;
  var fjc:int = e[4];
  var gjc:int = 11;
  var hjc:int = fjc >> gjc;
  var ijc:int = e[4];
  var jjc:int = 21;
  var kjc:int = ijc << jjc;
  var ljc:int = hjc | kjc;
  var mjc:int = ejc ^ ljc;
  var njc:int = e[4];
  var ojc:int = 25;
  var pjc:int = njc >> ojc;
  var qjc:int = e[4];
  var rjc:int = 7;
  var sjc:int = qjc << rjc;
  var tjc:int = pjc | sjc;
  var ujc:int = mjc ^ tjc;
  var vjc:int = xic + ujc;
  var wjc:int = e[4];
  var xjc:int = e[5];
  var yjc:int = e[6];
  var zjc:int = xjc ^ yjc;
  var akc:int = wjc & zjc;
  var bkc:int = e[6];
  var ckc:int = akc ^ bkc;
  var dkc:int = vjc + ckc;
  var ekc:int = e[40];
  var fkc:int = dkc + ekc;
  var gkc:int = -958395405;
  var hkc:int = fkc + gkc;
  e[3] = hkc;
  var ikc:int = e[8];
  var jkc:int = 2;
  var kkc:int = ikc >> jkc;
  var lkc:int = e[8];
  var mkc:int = 30;
  var nkc:int = lkc << mkc;
  var okc:int = kkc | nkc;
  var pkc:int = e[8];
  var qkc:int = 13;
  var rkc:int = pkc >> qkc;
  var skc:int = e[8];
  var tkc:int = 19;
  var ukc:int = skc << tkc;
  var vkc:int = rkc | ukc;
  var wkc:int = okc ^ vkc;
  var xkc:int = e[8];
  var ykc:int = 22;
  var zkc:int = xkc >> ykc;
  var alc:int = e[8];
  var blc:int = 10;
  var clc:int = alc << blc;
  var dlc:int = zkc | clc;
  var elc:int = wkc ^ dlc;
  var flc:int = e[8];
  var glc:int = e[9];
  var hlc:int = e[10];
  var ilc:int = glc | hlc;
  var jlc:int = flc & ilc;
  var klc:int = e[9];
  var llc:int = e[10];
  var mlc:int = klc & llc;
  var nlc:int = jlc | mlc;
  var olc:int = elc + nlc;
  e[2] = olc;
  var plc:int = e[3];
  var qlc:int = e[11];
  var rlc:int = qlc + plc;
  e[11] = rlc;
  var slc:int = e[3];
  var tlc:int = e[2];
  var ulc:int = slc + tlc;
  e[7] = ulc;
  var vlc:int = e[6];
  var wlc:int = e[11];
  var xlc:int = 6;
  var ylc:int = wlc >> xlc;
  var zlc:int = e[11];
  var amc:int = 26;
  var bmc:int = zlc << amc;
  var cmc:int = ylc | bmc;
  var dmc:int = e[11];
  var emc:int = 11;
  var fmc:int = dmc >> emc;
  var gmc:int = e[11];
  var hmc:int = 21;
  var imc:int = gmc << hmc;
  var jmc:int = fmc | imc;
  var kmc:int = cmc ^ jmc;
  var lmc:int = e[11];
  var mmc:int = 25;
  var nmc:int = lmc >> mmc;
  var omc:int = e[11];
  var pmc:int = 7;
  var qmc:int = omc << pmc;
  var rmc:int = nmc | qmc;
  var smc:int = kmc ^ rmc;
  var tmc:int = vlc + smc;
  var umc:int = e[11];
  var vmc:int = e[4];
  var wmc:int = e[5];
  var xmc:int = vmc ^ wmc;
  var ymc:int = umc & xmc;
  var zmc:int = e[5];
  var anc:int = ymc ^ zmc;
  var bnc:int = tmc + anc;
  var cnc:int = e[41];
  var dnc:int = bnc + cnc;
  var enc:int = -710438585;
  var fnc:int = dnc + enc;
  e[3] = fnc;
  var gnc:int = e[7];
  var hnc:int = 2;
  var inc:int = gnc >> hnc;
  var jnc:int = e[7];
  var knc:int = 30;
  var lnc:int = jnc << knc;
  var mnc:int = inc | lnc;
  var nnc:int = e[7];
  var onc:int = 13;
  var pnc:int = nnc >> onc;
  var qnc:int = e[7];
  var rnc:int = 19;
  var snc:int = qnc << rnc;
  var tnc:int = pnc | snc;
  var unc:int = mnc ^ tnc;
  var vnc:int = e[7];
  var wnc:int = 22;
  var xnc:int = vnc >> wnc;
  var ync:int = e[7];
  var znc:int = 10;
  var aoc:int = ync << znc;
  var boc:int = xnc | aoc;
  var coc:int = unc ^ boc;
  var doc:int = e[7];
  var eoc:int = e[8];
  var foc:int = e[9];
  var goc:int = eoc | foc;
  var hoc:int = doc & goc;
  var ioc:int = e[8];
  var joc:int = e[9];
  var koc:int = ioc & joc;
  var loc:int = hoc | koc;
  var moc:int = coc + loc;
  e[2] = moc;
  var noc:int = e[3];
  var ooc:int = e[10];
  var poc:int = ooc + noc;
  e[10] = poc;
  var qoc:int = e[3];
  var roc:int = e[2];
  var soc:int = qoc + roc;
  e[6] = soc;
  var toc:int = e[5];
  var uoc:int = e[10];
  var voc:int = 6;
  var woc:int = uoc >> voc;
  var xoc:int = e[10];
  var yoc:int = 26;
  var zoc:int = xoc << yoc;
  var apc:int = woc | zoc;
  var bpc:int = e[10];
  var cpc:int = 11;
  var dpc:int = bpc >> cpc;
  var epc:int = e[10];
  var fpc:int = 21;
  var gpc:int = epc << fpc;
  var hpc:int = dpc | gpc;
  var ipc:int = apc ^ hpc;
  var jpc:int = e[10];
  var kpc:int = 25;
  var lpc:int = jpc >> kpc;
  var mpc:int = e[10];
  var npc:int = 7;
  var opc:int = mpc << npc;
  var ppc:int = lpc | opc;
  var qpc:int = ipc ^ ppc;
  var rpc:int = toc + qpc;
  var spc:int = e[10];
  var tpc:int = e[11];
  var upc:int = e[4];
  var vpc:int = tpc ^ upc;
  var wpc:int = spc & vpc;
  var xpc:int = e[4];
  var ypc:int = wpc ^ xpc;
  var zpc:int = rpc + ypc;
  var aqc:int = e[42];
  var bqc:int = zpc + aqc;
  var cqc:int = 113926993;
  var dqc:int = bqc + cqc;
  e[3] = dqc;
  var eqc:int = e[6];
  var fqc:int = 2;
  var gqc:int = eqc >> fqc;
  var hqc:int = e[6];
  var iqc:int = 30;
  var jqc:int = hqc << iqc;
  var kqc:int = gqc | jqc;
  var lqc:int = e[6];
  var mqc:int = 13;
  var nqc:int = lqc >> mqc;
  var oqc:int = e[6];
  var pqc:int = 19;
  var qqc:int = oqc << pqc;
  var rqc:int = nqc | qqc;
  var sqc:int = kqc ^ rqc;
  var tqc:int = e[6];
  var uqc:int = 22;
  var vqc:int = tqc >> uqc;
  var wqc:int = e[6];
  var xqc:int = 10;
  var yqc:int = wqc << xqc;
  var zqc:int = vqc | yqc;
  var arc:int = sqc ^ zqc;
  var brc:int = e[6];
  var crc:int = e[7];
  var drc:int = e[8];
  var erc:int = crc | drc;
  var frc:int = brc & erc;
  var grc:int = e[7];
  var hrc:int = e[8];
  var irc:int = grc & hrc;
  var jrc:int = frc | irc;
  var krc:int = arc + jrc;
  e[2] = krc;
  var lrc:int = e[3];
  var mrc:int = e[9];
  var nrc:int = mrc + lrc;
  e[9] = nrc;
  var orc:int = e[3];
  var prc:int = e[2];
  var qrc:int = orc + prc;
  e[5] = qrc;
  var rrc:int = e[4];
  var src:int = e[9];
  var trc:int = 6;
  var urc:int = src >> trc;
  var vrc:int = e[9];
  var wrc:int = 26;
  var xrc:int = vrc << wrc;
  var yrc:int = urc | xrc;
  var zrc:int = e[9];
  var asc:int = 11;
  var bsc:int = zrc >> asc;
  var csc:int = e[9];
  var dsc:int = 21;
  var esc:int = csc << dsc;
  var fsc:int = bsc | esc;
  var gsc:int = yrc ^ fsc;
  var hsc:int = e[9];
  var isc:int = 25;
  var jsc:int = hsc >> isc;
  var ksc:int = e[9];
  var lsc:int = 7;
  var msc:int = ksc << lsc;
  var nsc:int = jsc | msc;
  var osc:int = gsc ^ nsc;
  var psc:int = rrc + osc;
  var qsc:int = e[9];
  var rsc:int = e[10];
  var ssc:int = e[11];
  var tsc:int = rsc ^ ssc;
  var usc:int = qsc & tsc;
  var vsc:int = e[11];
  var wsc:int = usc ^ vsc;
  var xsc:int = psc + wsc;
  var ysc:int = e[43];
  var zsc:int = xsc + ysc;
  var atc:int = 338241895;
  var btc:int = zsc + atc;
  e[3] = btc;
  var ctc:int = e[5];
  var dtc:int = 2;
  var etc:int = ctc >> dtc;
  var ftc:int = e[5];
  var gtc:int = 30;
  var htc:int = ftc << gtc;
  var itc:int = etc | htc;
  var jtc:int = e[5];
  var ktc:int = 13;
  var ltc:int = jtc >> ktc;
  var mtc:int = e[5];
  var ntc:int = 19;
  var otc:int = mtc << ntc;
  var ptc:int = ltc | otc;
  var qtc:int = itc ^ ptc;
  var rtc:int = e[5];
  var stc:int = 22;
  var ttc:int = rtc >> stc;
  var utc:int = e[5];
  var vtc:int = 10;
  var wtc:int = utc << vtc;
  var xtc:int = ttc | wtc;
  var ytc:int = qtc ^ xtc;
  var ztc:int = e[5];
  var auc:int = e[6];
  var buc:int = e[7];
  var cuc:int = auc | buc;
  var duc:int = ztc & cuc;
  var euc:int = e[6];
  var fuc:int = e[7];
  var guc:int = euc & fuc;
  var huc:int = duc | guc;
  var iuc:int = ytc + huc;
  e[2] = iuc;
  var juc:int = e[3];
  var kuc:int = e[8];
  var luc:int = kuc + juc;
  e[8] = luc;
  var muc:int = e[3];
  var nuc:int = e[2];
  var ouc:int = muc + nuc;
  e[4] = ouc;
  var puc:int = e[11];
  var quc:int = e[8];
  var ruc:int = 6;
  var suc:int = quc >> ruc;
  var tuc:int = e[8];
  var uuc:int = 26;
  var vuc:int = tuc << uuc;
  var wuc:int = suc | vuc;
  var xuc:int = e[8];
  var yuc:int = 11;
  var zuc:int = xuc >> yuc;
  var avc:int = e[8];
  var bvc:int = 21;
  var cvc:int = avc << bvc;
  var dvc:int = zuc | cvc;
  var evc:int = wuc ^ dvc;
  var fvc:int = e[8];
  var gvc:int = 25;
  var hvc:int = fvc >> gvc;
  var ivc:int = e[8];
  var jvc:int = 7;
  var kvc:int = ivc << jvc;
  var lvc:int = hvc | kvc;
  var mvc:int = evc ^ lvc;
  var nvc:int = puc + mvc;
  var ovc:int = e[8];
  var pvc:int = e[9];
  var qvc:int = e[10];
  var rvc:int = pvc ^ qvc;
  var svc:int = ovc & rvc;
  var tvc:int = e[10];
  var uvc:int = svc ^ tvc;
  var vvc:int = nvc + uvc;
  var wvc:int = e[44];
  var xvc:int = vvc + wvc;
  var yvc:int = 666307205;
  var zvc:int = xvc + yvc;
  e[3] = zvc;
  var awc:int = e[4];
  var bwc:int = 2;
  var cwc:int = awc >> bwc;
  var dwc:int = e[4];
  var ewc:int = 30;
  var fwc:int = dwc << ewc;
  var gwc:int = cwc | fwc;
  var hwc:int = e[4];
  var iwc:int = 13;
  var jwc:int = hwc >> iwc;
  var kwc:int = e[4];
  var lwc:int = 19;
  var mwc:int = kwc << lwc;
  var nwc:int = jwc | mwc;
  var owc:int = gwc ^ nwc;
  var pwc:int = e[4];
  var qwc:int = 22;
  var rwc:int = pwc >> qwc;
  var swc:int = e[4];
  var twc:int = 10;
  var uwc:int = swc << twc;
  var vwc:int = rwc | uwc;
  var wwc:int = owc ^ vwc;
  var xwc:int = e[4];
  var ywc:int = e[5];
  var zwc:int = e[6];
  var axc:int = ywc | zwc;
  var bxc:int = xwc & axc;
  var cxc:int = e[5];
  var dxc:int = e[6];
  var exc:int = cxc & dxc;
  var fxc:int = bxc | exc;
  var gxc:int = wwc + fxc;
  e[2] = gxc;
  var hxc:int = e[3];
  var ixc:int = e[7];
  var jxc:int = ixc + hxc;
  e[7] = jxc;
  var kxc:int = e[3];
  var lxc:int = e[2];
  var mxc:int = kxc + lxc;
  e[11] = mxc;
  var nxc:int = e[10];
  var oxc:int = e[7];
  var pxc:int = 6;
  var qxc:int = oxc >> pxc;
  var rxc:int = e[7];
  var sxc:int = 26;
  var txc:int = rxc << sxc;
  var uxc:int = qxc | txc;
  var vxc:int = e[7];
  var wxc:int = 11;
  var xxc:int = vxc >> wxc;
  var yxc:int = e[7];
  var zxc:int = 21;
  var ayc:int = yxc << zxc;
  var byc:int = xxc | ayc;
  var cyc:int = uxc ^ byc;
  var dyc:int = e[7];
  var eyc:int = 25;
  var fyc:int = dyc >> eyc;
  var gyc:int = e[7];
  var hyc:int = 7;
  var iyc:int = gyc << hyc;
  var jyc:int = fyc | iyc;
  var kyc:int = cyc ^ jyc;
  var lyc:int = nxc + kyc;
  var myc:int = e[7];
  var nyc:int = e[8];
  var oyc:int = e[9];
  var pyc:int = nyc ^ oyc;
  var qyc:int = myc & pyc;
  var ryc:int = e[9];
  var syc:int = qyc ^ ryc;
  var tyc:int = lyc + syc;
  var uyc:int = e[45];
  var vyc:int = tyc + uyc;
  var wyc:int = 773529912;
  var xyc:int = vyc + wyc;
  e[3] = xyc;
  var yyc:int = e[11];
  var zyc:int = 2;
  var azc:int = yyc >> zyc;
  var bzc:int = e[11];
  var czc:int = 30;
  var dzc:int = bzc << czc;
  var ezc:int = azc | dzc;
  var fzc:int = e[11];
  var gzc:int = 13;
  var hzc:int = fzc >> gzc;
  var izc:int = e[11];
  var jzc:int = 19;
  var kzc:int = izc << jzc;
  var lzc:int = hzc | kzc;
  var mzc:int = ezc ^ lzc;
  var nzc:int = e[11];
  var ozc:int = 22;
  var pzc:int = nzc >> ozc;
  var qzc:int = e[11];
  var rzc:int = 10;
  var szc:int = qzc << rzc;
  var tzc:int = pzc | szc;
  var uzc:int = mzc ^ tzc;
  var vzc:int = e[11];
  var wzc:int = e[4];
  var xzc:int = e[5];
  var yzc:int = wzc | xzc;
  var zzc:int = vzc & yzc;
  var aad:int = e[4];
  var bad:int = e[5];
  var cad:int = aad & bad;
  var dad:int = zzc | cad;
  var ead:int = uzc + dad;
  e[2] = ead;
  var fad:int = e[3];
  var gad:int = e[6];
  var had:int = gad + fad;
  e[6] = had;
  var iad:int = e[3];
  var jad:int = e[2];
  var kad:int = iad + jad;
  e[10] = kad;
  var lad:int = e[9];
  var mad:int = e[6];
  var nad:int = 6;
  var oad:int = mad >> nad;
  var pad:int = e[6];
  var qad:int = 26;
  var rad:int = pad << qad;
  var sad:int = oad | rad;
  var tad:int = e[6];
  var uad:int = 11;
  var vad:int = tad >> uad;
  var wad:int = e[6];
  var xad:int = 21;
  var yad:int = wad << xad;
  var zad:int = vad | yad;
  var abd:int = sad ^ zad;
  var bbd:int = e[6];
  var cbd:int = 25;
  var dbd:int = bbd >> cbd;
  var ebd:int = e[6];
  var fbd:int = 7;
  var gbd:int = ebd << fbd;
  var hbd:int = dbd | gbd;
  var ibd:int = abd ^ hbd;
  var jbd:int = lad + ibd;
  var kbd:int = e[6];
  var lbd:int = e[7];
  var mbd:int = e[8];
  var nbd:int = lbd ^ mbd;
  var obd:int = kbd & nbd;
  var pbd:int = e[8];
  var qbd:int = obd ^ pbd;
  var rbd:int = jbd + qbd;
  var sbd:int = e[46];
  var tbd:int = rbd + sbd;
  var ubd:int = 1294757372;
  var vbd:int = tbd + ubd;
  e[3] = vbd;
  var wbd:int = e[10];
  var xbd:int = 2;
  var ybd:int = wbd >> xbd;
  var zbd:int = e[10];
  var acd:int = 30;
  var bcd:int = zbd << acd;
  var ccd:int = ybd | bcd;
  var dcd:int = e[10];
  var ecd:int = 13;
  var fcd:int = dcd >> ecd;
  var gcd:int = e[10];
  var hcd:int = 19;
  var icd:int = gcd << hcd;
  var jcd:int = fcd | icd;
  var kcd:int = ccd ^ jcd;
  var lcd:int = e[10];
  var mcd:int = 22;
  var ncd:int = lcd >> mcd;
  var ocd:int = e[10];
  var pcd:int = 10;
  var qcd:int = ocd << pcd;
  var rcd:int = ncd | qcd;
  var scd:int = kcd ^ rcd;
  var tcd:int = e[10];
  var ucd:int = e[11];
  var vcd:int = e[4];
  var wcd:int = ucd | vcd;
  var xcd:int = tcd & wcd;
  var ycd:int = e[11];
  var zcd:int = e[4];
  var add:int = ycd & zcd;
  var bdd:int = xcd | add;
  var cdd:int = scd + bdd;
  e[2] = cdd;
  var ddd:int = e[3];
  var edd:int = e[5];
  var fdd:int = edd + ddd;
  e[5] = fdd;
  var gdd:int = e[3];
  var hdd:int = e[2];
  var idd:int = gdd + hdd;
  e[9] = idd;
  var jdd:int = e[8];
  var kdd:int = e[5];
  var ldd:int = 6;
  var mdd:int = kdd >> ldd;
  var ndd:int = e[5];
  var odd:int = 26;
  var pdd:int = ndd << odd;
  var qdd:int = mdd | pdd;
  var rdd:int = e[5];
  var sdd:int = 11;
  var tdd:int = rdd >> sdd;
  var udd:int = e[5];
  var vdd:int = 21;
  var wdd:int = udd << vdd;
  var xdd:int = tdd | wdd;
  var ydd:int = qdd ^ xdd;
  var zdd:int = e[5];
  var aed:int = 25;
  var bed:int = zdd >> aed;
  var ced:int = e[5];
  var ded:int = 7;
  var eed:int = ced << ded;
  var fed:int = bed | eed;
  var ged:int = ydd ^ fed;
  var hed:int = jdd + ged;
  var ied:int = e[5];
  var jed:int = e[6];
  var ked:int = e[7];
  var led:int = jed ^ ked;
  var med:int = ied & led;
  var ned:int = e[7];
  var oed:int = med ^ ned;
  var ped:int = hed + oed;
  var qed:int = e[47];
  var red:int = ped + qed;
  var sed:int = 1396182291;
  var ted:int = red + sed;
  e[3] = ted;
  var ued:int = e[9];
  var ved:int = 2;
  var wed:int = ued >> ved;
  var xed:int = e[9];
  var yed:int = 30;
  var zed:int = xed << yed;
  var afd:int = wed | zed;
  var bfd:int = e[9];
  var cfd:int = 13;
  var dfd:int = bfd >> cfd;
  var efd:int = e[9];
  var ffd:int = 19;
  var gfd:int = efd << ffd;
  var hfd:int = dfd | gfd;
  var ifd:int = afd ^ hfd;
  var jfd:int = e[9];
  var kfd:int = 22;
  var lfd:int = jfd >> kfd;
  var mfd:int = e[9];
  var nfd:int = 10;
  var ofd:int = mfd << nfd;
  var pfd:int = lfd | ofd;
  var qfd:int = ifd ^ pfd;
  var rfd:int = e[9];
  var sfd:int = e[10];
  var tfd:int = e[11];
  var ufd:int = sfd | tfd;
  var vfd:int = rfd & ufd;
  var wfd:int = e[10];
  var xfd:int = e[11];
  var yfd:int = wfd & xfd;
  var zfd:int = vfd | yfd;
  var agd:int = qfd + zfd;
  e[2] = agd;
  var bgd:int = e[3];
  var cgd:int = e[4];
  var dgd:int = cgd + bgd;
  e[4] = dgd;
  var egd:int = e[3];
  var fgd:int = e[2];
  var ggd:int = egd + fgd;
  e[8] = ggd;
  var hgd:int = e[7];
  var igd:int = e[4];
  var jgd:int = 6;
  var kgd:int = igd >> jgd;
  var lgd:int = e[4];
  var mgd:int = 26;
  var ngd:int = lgd << mgd;
  var ogd:int = kgd | ngd;
  var pgd:int = e[4];
  var qgd:int = 11;
  var rgd:int = pgd >> qgd;
  var sgd:int = e[4];
  var tgd:int = 21;
  var ugd:int = sgd << tgd;
  var vgd:int = rgd | ugd;
  var wgd:int = ogd ^ vgd;
  var xgd:int = e[4];
  var ygd:int = 25;
  var zgd:int = xgd >> ygd;
  var ahd:int = e[4];
  var bhd:int = 7;
  var chd:int = ahd << bhd;
  var dhd:int = zgd | chd;
  var ehd:int = wgd ^ dhd;
  var fhd:int = hgd + ehd;
  var ghd:int = e[4];
  var hhd:int = e[5];
  var ihd:int = e[6];
  var jhd:int = hhd ^ ihd;
  var khd:int = ghd & jhd;
  var lhd:int = e[6];
  var mhd:int = khd ^ lhd;
  var nhd:int = fhd + mhd;
  var ohd:int = e[48];
  var phd:int = nhd + ohd;
  var qhd:int = 1695183700;
  var rhd:int = phd + qhd;
  e[3] = rhd;
  var shd:int = e[8];
  var thd:int = 2;
  var uhd:int = shd >> thd;
  var vhd:int = e[8];
  var whd:int = 30;
  var xhd:int = vhd << whd;
  var yhd:int = uhd | xhd;
  var zhd:int = e[8];
  var aid:int = 13;
  var bid:int = zhd >> aid;
  var cid:int = e[8];
  var did:int = 19;
  var eid:int = cid << did;
  var fid:int = bid | eid;
  var gid:int = yhd ^ fid;
  var hid:int = e[8];
  var iid:int = 22;
  var jid:int = hid >> iid;
  var kid:int = e[8];
  var lid:int = 10;
  var mid:int = kid << lid;
  var nid:int = jid | mid;
  var oid:int = gid ^ nid;
  var pid:int = e[8];
  var qid:int = e[9];
  var rid:int = e[10];
  var sid:int = qid | rid;
  var tid:int = pid & sid;
  var uid:int = e[9];
  var vid:int = e[10];
  var wid:int = uid & vid;
  var xid:int = tid | wid;
  var yid:int = oid + xid;
  e[2] = yid;
  var zid:int = e[3];
  var ajd:int = e[11];
  var bjd:int = ajd + zid;
  e[11] = bjd;
  var cjd:int = e[3];
  var djd:int = e[2];
  var ejd:int = cjd + djd;
  e[7] = ejd;
  var fjd:int = e[6];
  var gjd:int = e[11];
  var hjd:int = 6;
  var ijd:int = gjd >> hjd;
  var jjd:int = e[11];
  var kjd:int = 26;
  var ljd:int = jjd << kjd;
  var mjd:int = ijd | ljd;
  var njd:int = e[11];
  var ojd:int = 11;
  var pjd:int = njd >> ojd;
  var qjd:int = e[11];
  var rjd:int = 21;
  var sjd:int = qjd << rjd;
  var tjd:int = pjd | sjd;
  var ujd:int = mjd ^ tjd;
  var vjd:int = e[11];
  var wjd:int = 25;
  var xjd:int = vjd >> wjd;
  var yjd:int = e[11];
  var zjd:int = 7;
  var akd:int = yjd << zjd;
  var bkd:int = xjd | akd;
  var ckd:int = ujd ^ bkd;
  var dkd:int = fjd + ckd;
  var ekd:int = e[11];
  var fkd:int = e[4];
  var gkd:int = e[5];
  var hkd:int = fkd ^ gkd;
  var ikd:int = ekd & hkd;
  var jkd:int = e[5];
  var kkd:int = ikd ^ jkd;
  var lkd:int = dkd + kkd;
  var mkd:int = e[49];
  var nkd:int = lkd + mkd;
  var okd:int = 1986661051;
  var pkd:int = nkd + okd;
  e[3] = pkd;
  var qkd:int = e[7];
  var rkd:int = 2;
  var skd:int = qkd >> rkd;
  var tkd:int = e[7];
  var ukd:int = 30;
  var vkd:int = tkd << ukd;
  var wkd:int = skd | vkd;
  var xkd:int = e[7];
  var ykd:int = 13;
  var zkd:int = xkd >> ykd;
  var ald:int = e[7];
  var bld:int = 19;
  var cld:int = ald << bld;
  var dld:int = zkd | cld;
  var eld:int = wkd ^ dld;
  var fld:int = e[7];
  var gld:int = 22;
  var hld:int = fld >> gld;
  var ild:int = e[7];
  var jld:int = 10;
  var kld:int = ild << jld;
  var lld:int = hld | kld;
  var mld:int = eld ^ lld;
  var nld:int = e[7];
  var old:int = e[8];
  var pld:int = e[9];
  var qld:int = old | pld;
  var rld:int = nld & qld;
  var sld:int = e[8];
  var tld:int = e[9];
  var uld:int = sld & tld;
  var vld:int = rld | uld;
  var wld:int = mld + vld;
  e[2] = wld;
  var xld:int = e[3];
  var yld:int = e[10];
  var zld:int = yld + xld;
  e[10] = zld;
  var amd:int = e[3];
  var bmd:int = e[2];
  var cmd:int = amd + bmd;
  e[6] = cmd;
  var dmd:int = e[5];
  var emd:int = e[10];
  var fmd:int = 6;
  var gmd:int = emd >> fmd;
  var hmd:int = e[10];
  var imd:int = 26;
  var jmd:int = hmd << imd;
  var kmd:int = gmd | jmd;
  var lmd:int = e[10];
  var mmd:int = 11;
  var nmd:int = lmd >> mmd;
  var omd:int = e[10];
  var pmd:int = 21;
  var qmd:int = omd << pmd;
  var rmd:int = nmd | qmd;
  var smd:int = kmd ^ rmd;
  var tmd:int = e[10];
  var umd:int = 25;
  var vmd:int = tmd >> umd;
  var wmd:int = e[10];
  var xmd:int = 7;
  var ymd:int = wmd << xmd;
  var zmd:int = vmd | ymd;
  var and:int = smd ^ zmd;
  var bnd:int = dmd + and;
  var cnd:int = e[10];
  var dnd:int = e[11];
  var end:int = e[4];
  var fnd:int = dnd ^ end;
  var gnd:int = cnd & fnd;
  var hnd:int = e[4];
  var ind:int = gnd ^ hnd;
  var jnd:int = bnd + ind;
  var knd:int = e[50];
  var lnd:int = jnd + knd;
  var mnd:int = -2117940946;
  var nnd:int = lnd + mnd;
  e[3] = nnd;
  var ond:int = e[6];
  var pnd:int = 2;
  var qnd:int = ond >> pnd;
  var rnd:int = e[6];
  var snd:int = 30;
  var tnd:int = rnd << snd;
  var und:int = qnd | tnd;
  var vnd:int = e[6];
  var wnd:int = 13;
  var xnd:int = vnd >> wnd;
  var ynd:int = e[6];
  var znd:int = 19;
  var aod:int = ynd << znd;
  var bod:int = xnd | aod;
  var cod:int = und ^ bod;
  var dod:int = e[6];
  var eod:int = 22;
  var fod:int = dod >> eod;
  var god:int = e[6];
  var hod:int = 10;
  var iod:int = god << hod;
  var jod:int = fod | iod;
  var kod:int = cod ^ jod;
  var lod:int = e[6];
  var mod:int = e[7];
  var nod:int = e[8];
  var ood:int = mod | nod;
  var pod:int = lod & ood;
  var qod:int = e[7];
  var rod:int = e[8];
  var sod:int = qod & rod;
  var tod:int = pod | sod;
  var uod:int = kod + tod;
  e[2] = uod;
  var vod:int = e[3];
  var wod:int = e[9];
  var xod:int = wod + vod;
  e[9] = xod;
  var yod:int = e[3];
  var zod:int = e[2];
  var apd:int = yod + zod;
  e[5] = apd;
  var bpd:int = e[4];
  var cpd:int = e[9];
  var dpd:int = 6;
  var epd:int = cpd >> dpd;
  var fpd:int = e[9];
  var gpd:int = 26;
  var hpd:int = fpd << gpd;
  var ipd:int = epd | hpd;
  var jpd:int = e[9];
  var kpd:int = 11;
  var lpd:int = jpd >> kpd;
  var mpd:int = e[9];
  var npd:int = 21;
  var opd:int = mpd << npd;
  var ppd:int = lpd | opd;
  var qpd:int = ipd ^ ppd;
  var rpd:int = e[9];
  var spd:int = 25;
  var tpd:int = rpd >> spd;
  var upd:int = e[9];
  var vpd:int = 7;
  var wpd:int = upd << vpd;
  var xpd:int = tpd | wpd;
  var ypd:int = qpd ^ xpd;
  var zpd:int = bpd + ypd;
  var aqd:int = e[9];
  var bqd:int = e[10];
  var cqd:int = e[11];
  var dqd:int = bqd ^ cqd;
  var eqd:int = aqd & dqd;
  var fqd:int = e[11];
  var gqd:int = eqd ^ fqd;
  var hqd:int = zpd + gqd;
  var iqd:int = e[51];
  var jqd:int = hqd + iqd;
  var kqd:int = -1838011259;
  var lqd:int = jqd + kqd;
  e[3] = lqd;
  var mqd:int = e[5];
  var nqd:int = 2;
  var oqd:int = mqd >> nqd;
  var pqd:int = e[5];
  var qqd:int = 30;
  var rqd:int = pqd << qqd;
  var sqd:int = oqd | rqd;
  var tqd:int = e[5];
  var uqd:int = 13;
  var vqd:int = tqd >> uqd;
  var wqd:int = e[5];
  var xqd:int = 19;
  var yqd:int = wqd << xqd;
  var zqd:int = vqd | yqd;
  var ard:int = sqd ^ zqd;
  var brd:int = e[5];
  var crd:int = 22;
  var drd:int = brd >> crd;
  var erd:int = e[5];
  var frd:int = 10;
  var grd:int = erd << frd;
  var hrd:int = drd | grd;
  var ird:int = ard ^ hrd;
  var jrd:int = e[5];
  var krd:int = e[6];
  var lrd:int = e[7];
  var mrd:int = krd | lrd;
  var nrd:int = jrd & mrd;
  var ord:int = e[6];
  var prd:int = e[7];
  var qrd:int = ord & prd;
  var rrd:int = nrd | qrd;
  var srd:int = ird + rrd;
  e[2] = srd;
  var trd:int = e[3];
  var urd:int = e[8];
  var vrd:int = urd + trd;
  e[8] = vrd;
  var wrd:int = e[3];
  var xrd:int = e[2];
  var yrd:int = wrd + xrd;
  e[4] = yrd;
  var zrd:int = e[11];
  var asd:int = e[8];
  var bsd:int = 6;
  var csd:int = asd >> bsd;
  var dsd:int = e[8];
  var esd:int = 26;
  var fsd:int = dsd << esd;
  var gsd:int = csd | fsd;
  var hsd:int = e[8];
  var isd:int = 11;
  var jsd:int = hsd >> isd;
  var ksd:int = e[8];
  var lsd:int = 21;
  var msd:int = ksd << lsd;
  var nsd:int = jsd | msd;
  var osd:int = gsd ^ nsd;
  var psd:int = e[8];
  var qsd:int = 25;
  var rsd:int = psd >> qsd;
  var ssd:int = e[8];
  var tsd:int = 7;
  var usd:int = ssd << tsd;
  var vsd:int = rsd | usd;
  var wsd:int = osd ^ vsd;
  var xsd:int = zrd + wsd;
  var ysd:int = e[8];
  var zsd:int = e[9];
  var atd:int = e[10];
  var btd:int = zsd ^ atd;
  var ctd:int = ysd & btd;
  var dtd:int = e[10];
  var etd:int = ctd ^ dtd;
  var ftd:int = xsd + etd;
  var gtd:int = e[52];
  var htd:int = ftd + gtd;
  var itd:int = -1564481375;
  var jtd:int = htd + itd;
  e[3] = jtd;
  var ktd:int = e[4];
  var ltd:int = 2;
  var mtd:int = ktd >> ltd;
  var ntd:int = e[4];
  var otd:int = 30;
  var ptd:int = ntd << otd;
  var qtd:int = mtd | ptd;
  var rtd:int = e[4];
  var std:int = 13;
  var ttd:int = rtd >> std;
  var utd:int = e[4];
  var vtd:int = 19;
  var wtd:int = utd << vtd;
  var xtd:int = ttd | wtd;
  var ytd:int = qtd ^ xtd;
  var ztd:int = e[4];
  var aud:int = 22;
  var bud:int = ztd >> aud;
  var cud:int = e[4];
  var dud:int = 10;
  var eud:int = cud << dud;
  var fud:int = bud | eud;
  var gud:int = ytd ^ fud;
  var hud:int = e[4];
  var iud:int = e[5];
  var jud:int = e[6];
  var kud:int = iud | jud;
  var lud:int = hud & kud;
  var mud:int = e[5];
  var nud:int = e[6];
  var oud:int = mud & nud;
  var pud:int = lud | oud;
  var qud:int = gud + pud;
  e[2] = qud;
  var rud:int = e[3];
  var sud:int = e[7];
  var tud:int = sud + rud;
  e[7] = tud;
  var uud:int = e[3];
  var vud:int = e[2];
  var wud:int = uud + vud;
  e[11] = wud;
  var xud:int = e[10];
  var yud:int = e[7];
  var zud:int = 6;
  var avd:int = yud >> zud;
  var bvd:int = e[7];
  var cvd:int = 26;
  var dvd:int = bvd << cvd;
  var evd:int = avd | dvd;
  var fvd:int = e[7];
  var gvd:int = 11;
  var hvd:int = fvd >> gvd;
  var ivd:int = e[7];
  var jvd:int = 21;
  var kvd:int = ivd << jvd;
  var lvd:int = hvd | kvd;
  var mvd:int = evd ^ lvd;
  var nvd:int = e[7];
  var ovd:int = 25;
  var pvd:int = nvd >> ovd;
  var qvd:int = e[7];
  var rvd:int = 7;
  var svd:int = qvd << rvd;
  var tvd:int = pvd | svd;
  var uvd:int = mvd ^ tvd;
  var vvd:int = xud + uvd;
  var wvd:int = e[7];
  var xvd:int = e[8];
  var yvd:int = e[9];
  var zvd:int = xvd ^ yvd;
  var awd:int = wvd & zvd;
  var bwd:int = e[9];
  var cwd:int = awd ^ bwd;
  var dwd:int = vvd + cwd;
  var ewd:int = e[53];
  var fwd:int = dwd + ewd;
  var gwd:int = -1474664885;
  var hwd:int = fwd + gwd;
  e[3] = hwd;
  var iwd:int = e[11];
  var jwd:int = 2;
  var kwd:int = iwd >> jwd;
  var lwd:int = e[11];
  var mwd:int = 30;
  var nwd:int = lwd << mwd;
  var owd:int = kwd | nwd;
  var pwd:int = e[11];
  var qwd:int = 13;
  var rwd:int = pwd >> qwd;
  var swd:int = e[11];
  var twd:int = 19;
  var uwd:int = swd << twd;
  var vwd:int = rwd | uwd;
  var wwd:int = owd ^ vwd;
  var xwd:int = e[11];
  var ywd:int = 22;
  var zwd:int = xwd >> ywd;
  var axd:int = e[11];
  var bxd:int = 10;
  var cxd:int = axd << bxd;
  var dxd:int = zwd | cxd;
  var exd:int = wwd ^ dxd;
  var fxd:int = e[11];
  var gxd:int = e[4];
  var hxd:int = e[5];
  var ixd:int = gxd | hxd;
  var jxd:int = fxd & ixd;
  var kxd:int = e[4];
  var lxd:int = e[5];
  var mxd:int = kxd & lxd;
  var nxd:int = jxd | mxd;
  var oxd:int = exd + nxd;
  e[2] = oxd;
  var pxd:int = e[3];
  var qxd:int = e[6];
  var rxd:int = qxd + pxd;
  e[6] = rxd;
  var sxd:int = e[3];
  var txd:int = e[2];
  var uxd:int = sxd + txd;
  e[10] = uxd;
  var vxd:int = e[9];
  var wxd:int = e[6];
  var xxd:int = 6;
  var yxd:int = wxd >> xxd;
  var zxd:int = e[6];
  var ayd:int = 26;
  var byd:int = zxd << ayd;
  var cyd:int = yxd | byd;
  var dyd:int = e[6];
  var eyd:int = 11;
  var fyd:int = dyd >> eyd;
  var gyd:int = e[6];
  var hyd:int = 21;
  var iyd:int = gyd << hyd;
  var jyd:int = fyd | iyd;
  var kyd:int = cyd ^ jyd;
  var lyd:int = e[6];
  var myd:int = 25;
  var nyd:int = lyd >> myd;
  var oyd:int = e[6];
  var pyd:int = 7;
  var qyd:int = oyd << pyd;
  var ryd:int = nyd | qyd;
  var syd:int = kyd ^ ryd;
  var tyd:int = vxd + syd;
  var uyd:int = e[6];
  var vyd:int = e[7];
  var wyd:int = e[8];
  var xyd:int = vyd ^ wyd;
  var yyd:int = uyd & xyd;
  var zyd:int = e[8];
  var azd:int = yyd ^ zyd;
  var bzd:int = tyd + azd;
  var czd:int = e[54];
  var dzd:int = bzd + czd;
  var ezd:int = -1035236496;
  var fzd:int = dzd + ezd;
  e[3] = fzd;
  var gzd:int = e[10];
  var hzd:int = 2;
  var izd:int = gzd >> hzd;
  var jzd:int = e[10];
  var kzd:int = 30;
  var lzd:int = jzd << kzd;
  var mzd:int = izd | lzd;
  var nzd:int = e[10];
  var ozd:int = 13;
  var pzd:int = nzd >> ozd;
  var qzd:int = e[10];
  var rzd:int = 19;
  var szd:int = qzd << rzd;
  var tzd:int = pzd | szd;
  var uzd:int = mzd ^ tzd;
  var vzd:int = e[10];
  var wzd:int = 22;
  var xzd:int = vzd >> wzd;
  var yzd:int = e[10];
  var zzd:int = 10;
  var aae:int = yzd << zzd;
  var bae:int = xzd | aae;
  var cae:int = uzd ^ bae;
  var dae:int = e[10];
  var eae:int = e[11];
  var fae:int = e[4];
  var gae:int = eae | fae;
  var hae:int = dae & gae;
  var iae:int = e[11];
  var jae:int = e[4];
  var kae:int = iae & jae;
  var lae:int = hae | kae;
  var mae:int = cae + lae;
  e[2] = mae;
  var nae:int = e[3];
  var oae:int = e[5];
  var pae:int = oae + nae;
  e[5] = pae;
  var qae:int = e[3];
  var rae:int = e[2];
  var sae:int = qae + rae;
  e[9] = sae;
  var tae:int = e[8];
  var uae:int = e[5];
  var vae:int = 6;
  var wae:int = uae >> vae;
  var xae:int = e[5];
  var yae:int = 26;
  var zae:int = xae << yae;
  var abe:int = wae | zae;
  var bbe:int = e[5];
  var cbe:int = 11;
  var dbe:int = bbe >> cbe;
  var ebe:int = e[5];
  var fbe:int = 21;
  var gbe:int = ebe << fbe;
  var hbe:int = dbe | gbe;
  var ibe:int = abe ^ hbe;
  var jbe:int = e[5];
  var kbe:int = 25;
  var lbe:int = jbe >> kbe;
  var mbe:int = e[5];
  var nbe:int = 7;
  var obe:int = mbe << nbe;
  var pbe:int = lbe | obe;
  var qbe:int = ibe ^ pbe;
  var rbe:int = tae + qbe;
  var sbe:int = e[5];
  var tbe:int = e[6];
  var ube:int = e[7];
  var vbe:int = tbe ^ ube;
  var wbe:int = sbe & vbe;
  var xbe:int = e[7];
  var ybe:int = wbe ^ xbe;
  var zbe:int = rbe + ybe;
  var ace:int = e[55];
  var bce:int = zbe + ace;
  var cce:int = -949202525;
  var dce:int = bce + cce;
  e[3] = dce;
  var ece:int = e[9];
  var fce:int = 2;
  var gce:int = ece >> fce;
  var hce:int = e[9];
  var ice:int = 30;
  var jce:int = hce << ice;
  var kce:int = gce | jce;
  var lce:int = e[9];
  var mce:int = 13;
  var nce:int = lce >> mce;
  var oce:int = e[9];
  var pce:int = 19;
  var qce:int = oce << pce;
  var rce:int = nce | qce;
  var sce:int = kce ^ rce;
  var tce:int = e[9];
  var uce:int = 22;
  var vce:int = tce >> uce;
  var wce:int = e[9];
  var xce:int = 10;
  var yce:int = wce << xce;
  var zce:int = vce | yce;
  var ade:int = sce ^ zce;
  var bde:int = e[9];
  var cde:int = e[10];
  var dde:int = e[11];
  var ede:int = cde | dde;
  var fde:int = bde & ede;
  var gde:int = e[10];
  var hde:int = e[11];
  var ide:int = gde & hde;
  var jde:int = fde | ide;
  var kde:int = ade + jde;
  e[2] = kde;
  var lde:int = e[3];
  var mde:int = e[4];
  var nde:int = mde + lde;
  e[4] = nde;
  var ode:int = e[3];
  var pde:int = e[2];
  var qde:int = ode + pde;
  e[8] = qde;
  var rde:int = e[7];
  var sde:int = e[4];
  var tde:int = 6;
  var ude:int = sde >> tde;
  var vde:int = e[4];
  var wde:int = 26;
  var xde:int = vde << wde;
  var yde:int = ude | xde;
  var zde:int = e[4];
  var aee:int = 11;
  var bee:int = zde >> aee;
  var cee:int = e[4];
  var dee:int = 21;
  var eee:int = cee << dee;
  var fee:int = bee | eee;
  var gee:int = yde ^ fee;
  var hee:int = e[4];
  var iee:int = 25;
  var jee:int = hee >> iee;
  var kee:int = e[4];
  var lee:int = 7;
  var mee:int = kee << lee;
  var nee:int = jee | mee;
  var oee:int = gee ^ nee;
  var pee:int = rde + oee;
  var qee:int = e[4];
  var ree:int = e[5];
  var see:int = e[6];
  var tee:int = ree ^ see;
  var uee:int = qee & tee;
  var vee:int = e[6];
  var wee:int = uee ^ vee;
  var xee:int = pee + wee;
  var yee:int = e[56];
  var zee:int = xee + yee;
  var afe:int = -778901479;
  var bfe:int = zee + afe;
  e[3] = bfe;
  var cfe:int = e[8];
  var dfe:int = 2;
  var efe:int = cfe >> dfe;
  var ffe:int = e[8];
  var gfe:int = 30;
  var hfe:int = ffe << gfe;
  var ife:int = efe | hfe;
  var jfe:int = e[8];
  var kfe:int = 13;
  var lfe:int = jfe >> kfe;
  var mfe:int = e[8];
  var nfe:int = 19;
  var ofe:int = mfe << nfe;
  var pfe:int = lfe | ofe;
  var qfe:int = ife ^ pfe;
  var rfe:int = e[8];
  var sfe:int = 22;
  var tfe:int = rfe >> sfe;
  var ufe:int = e[8];
  var vfe:int = 10;
  var wfe:int = ufe << vfe;
  var xfe:int = tfe | wfe;
  var yfe:int = qfe ^ xfe;
  var zfe:int = e[8];
  var age:int = e[9];
  var bge:int = e[10];
  var cge:int = age | bge;
  var dge:int = zfe & cge;
  var ege:int = e[9];
  var fge:int = e[10];
  var gge:int = ege & fge;
  var hge:int = dge | gge;
  var ige:int = yfe + hge;
  e[2] = ige;
  var jge:int = e[3];
  var kge:int = e[11];
  var lge:int = kge + jge;
  e[11] = lge;
  var mge:int = e[3];
  var nge:int = e[2];
  var oge:int = mge + nge;
  e[7] = oge;
  var pge:int = e[6];
  var qge:int = e[11];
  var rge:int = 6;
  var sge:int = qge >> rge;
  var tge:int = e[11];
  var uge:int = 26;
  var vge:int = tge << uge;
  var wge:int = sge | vge;
  var xge:int = e[11];
  var yge:int = 11;
  var zge:int = xge >> yge;
  var ahe:int = e[11];
  var bhe:int = 21;
  var che:int = ahe << bhe;
  var dhe:int = zge | che;
  var ehe:int = wge ^ dhe;
  var fhe:int = e[11];
  var ghe:int = 25;
  var hhe:int = fhe >> ghe;
  var ihe:int = e[11];
  var jhe:int = 7;
  var khe:int = ihe << jhe;
  var lhe:int = hhe | khe;
  var mhe:int = ehe ^ lhe;
  var nhe:int = pge + mhe;
  var ohe:int = e[11];
  var phe:int = e[4];
  var qhe:int = e[5];
  var rhe:int = phe ^ qhe;
  var she:int = ohe & rhe;
  var the:int = e[5];
  var uhe:int = she ^ the;
  var vhe:int = nhe + uhe;
  var whe:int = e[57];
  var xhe:int = vhe + whe;
  var yhe:int = -694614492;
  var zhe:int = xhe + yhe;
  e[3] = zhe;
  var aie:int = e[7];
  var bie:int = 2;
  var cie:int = aie >> bie;
  var die:int = e[7];
  var eie:int = 30;
  var fie:int = die << eie;
  var gie:int = cie | fie;
  var hie:int = e[7];
  var iie:int = 13;
  var jie:int = hie >> iie;
  var kie:int = e[7];
  var lie:int = 19;
  var mie:int = kie << lie;
  var nie:int = jie | mie;
  var oie:int = gie ^ nie;
  var pie:int = e[7];
  var qie:int = 22;
  var rie:int = pie >> qie;
  var sie:int = e[7];
  var tie:int = 10;
  var uie:int = sie << tie;
  var vie:int = rie | uie;
  var wie:int = oie ^ vie;
  var xie:int = e[7];
  var yie:int = e[8];
  var zie:int = e[9];
  var aje:int = yie | zie;
  var bje:int = xie & aje;
  var cje:int = e[8];
  var dje:int = e[9];
  var eje:int = cje & dje;
  var fje:int = bje | eje;
  var gje:int = wie + fje;
  e[2] = gje;
  var hje:int = e[3];
  var ije:int = e[10];
  var jje:int = ije + hje;
  e[10] = jje;
  var kje:int = e[3];
  var lje:int = e[2];
  var mje:int = kje + lje;
  e[6] = mje;
  var nje:int = e[5];
  var oje:int = e[10];
  var pje:int = 6;
  var qje:int = oje >> pje;
  var rje:int = e[10];
  var sje:int = 26;
  var tje:int = rje << sje;
  var uje:int = qje | tje;
  var vje:int = e[10];
  var wje:int = 11;
  var xje:int = vje >> wje;
  var yje:int = e[10];
  var zje:int = 21;
  var ake:int = yje << zje;
  var bke:int = xje | ake;
  var cke:int = uje ^ bke;
  var dke:int = e[10];
  var eke:int = 25;
  var fke:int = dke >> eke;
  var gke:int = e[10];
  var hke:int = 7;
  var ike:int = gke << hke;
  var jke:int = fke | ike;
  var kke:int = cke ^ jke;
  var lke:int = nje + kke;
  var mke:int = e[10];
  var nke:int = e[11];
  var oke:int = e[4];
  var pke:int = nke ^ oke;
  var qke:int = mke & pke;
  var rke:int = e[4];
  var ske:int = qke ^ rke;
  var tke:int = lke + ske;
  var uke:int = e[58];
  var vke:int = tke + uke;
  var wke:int = -200395387;
  var xke:int = vke + wke;
  e[3] = xke;
  var yke:int = e[6];
  var zke:int = 2;
  var ale:int = yke >> zke;
  var ble:int = e[6];
  var cle:int = 30;
  var dle:int = ble << cle;
  var ele:int = ale | dle;
  var fle:int = e[6];
  var gle:int = 13;
  var hle:int = fle >> gle;
  var ile:int = e[6];
  var jle:int = 19;
  var kle:int = ile << jle;
  var lle:int = hle | kle;
  var mle:int = ele ^ lle;
  var nle:int = e[6];
  var ole:int = 22;
  var ple:int = nle >> ole;
  var qle:int = e[6];
  var rle:int = 10;
  var sle:int = qle << rle;
  var tle:int = ple | sle;
  var ule:int = mle ^ tle;
  var vle:int = e[6];
  var wle:int = e[7];
  var xle:int = e[8];
  var yle:int = wle | xle;
  var zle:int = vle & yle;
  var ame:int = e[7];
  var bme:int = e[8];
  var cme:int = ame & bme;
  var dme:int = zle | cme;
  var eme:int = ule + dme;
  e[2] = eme;
  var fme:int = e[3];
  var gme:int = e[9];
  var hme:int = gme + fme;
  e[9] = hme;
  var ime:int = e[3];
  var jme:int = e[2];
  var kme:int = ime + jme;
  e[5] = kme;
  var lme:int = e[4];
  var mme:int = e[9];
  var nme:int = 6;
  var ome:int = mme >> nme;
  var pme:int = e[9];
  var qme:int = 26;
  var rme:int = pme << qme;
  var sme:int = ome | rme;
  var tme:int = e[9];
  var ume:int = 11;
  var vme:int = tme >> ume;
  var wme:int = e[9];
  var xme:int = 21;
  var yme:int = wme << xme;
  var zme:int = vme | yme;
  var ane:int = sme ^ zme;
  var bne:int = e[9];
  var cne:int = 25;
  var dne:int = bne >> cne;
  var ene:int = e[9];
  var fne:int = 7;
  var gne:int = ene << fne;
  var hne:int = dne | gne;
  var ine:int = ane ^ hne;
  var jne:int = lme + ine;
  var kne:int = e[9];
  var lne:int = e[10];
  var mne:int = e[11];
  var nne:int = lne ^ mne;
  var one:int = kne & nne;
  var pne:int = e[11];
  var qne:int = one ^ pne;
  var rne:int = jne + qne;
  var sne:int = e[59];
  var tne:int = rne + sne;
  var une:int = 275423344;
  var vne:int = tne + une;
  e[3] = vne;
  var wne:int = e[5];
  var xne:int = 2;
  var yne:int = wne >> xne;
  var zne:int = e[5];
  var aoe:int = 30;
  var boe:int = zne << aoe;
  var coe:int = yne | boe;
  var doe:int = e[5];
  var eoe:int = 13;
  var foe:int = doe >> eoe;
  var goe:int = e[5];
  var hoe:int = 19;
  var ioe:int = goe << hoe;
  var joe:int = foe | ioe;
  var koe:int = coe ^ joe;
  var loe:int = e[5];
  var moe:int = 22;
  var noe:int = loe >> moe;
  var ooe:int = e[5];
  var poe:int = 10;
  var qoe:int = ooe << poe;
  var roe:int = noe | qoe;
  var soe:int = koe ^ roe;
  var toe:int = e[5];
  var uoe:int = e[6];
  var voe:int = e[7];
  var woe:int = uoe | voe;
  var xoe:int = toe & woe;
  var yoe:int = e[6];
  var zoe:int = e[7];
  var ape:int = yoe & zoe;
  var bpe:int = xoe | ape;
  var cpe:int = soe + bpe;
  e[2] = cpe;
  var dpe:int = e[3];
  var epe:int = e[8];
  var fpe:int = epe + dpe;
  e[8] = fpe;
  var gpe:int = e[3];
  var hpe:int = e[2];
  var ipe:int = gpe + hpe;
  e[4] = ipe;
  var jpe:int = e[11];
  var kpe:int = e[8];
  var lpe:int = 6;
  var mpe:int = kpe >> lpe;
  var npe:int = e[8];
  var ope:int = 26;
  var ppe:int = npe << ope;
  var qpe:int = mpe | ppe;
  var rpe:int = e[8];
  var spe:int = 11;
  var tpe:int = rpe >> spe;
  var upe:int = e[8];
  var vpe:int = 21;
  var wpe:int = upe << vpe;
  var xpe:int = tpe | wpe;
  var ype:int = qpe ^ xpe;
  var zpe:int = e[8];
  var aqe:int = 25;
  var bqe:int = zpe >> aqe;
  var cqe:int = e[8];
  var dqe:int = 7;
  var eqe:int = cqe << dqe;
  var fqe:int = bqe | eqe;
  var gqe:int = ype ^ fqe;
  var hqe:int = jpe + gqe;
  var iqe:int = e[8];
  var jqe:int = e[9];
  var kqe:int = e[10];
  var lqe:int = jqe ^ kqe;
  var mqe:int = iqe & lqe;
  var nqe:int = e[10];
  var oqe:int = mqe ^ nqe;
  var pqe:int = hqe + oqe;
  var qqe:int = e[60];
  var rqe:int = pqe + qqe;
  var sqe:int = 430227734;
  var tqe:int = rqe + sqe;
  e[3] = tqe;
  var uqe:int = e[4];
  var vqe:int = 2;
  var wqe:int = uqe >> vqe;
  var xqe:int = e[4];
  var yqe:int = 30;
  var zqe:int = xqe << yqe;
  var are:int = wqe | zqe;
  var bre:int = e[4];
  var cre:int = 13;
  var dre:int = bre >> cre;
  var ere:int = e[4];
  var fre:int = 19;
  var gre:int = ere << fre;
  var hre:int = dre | gre;
  var ire:int = are ^ hre;
  var jre:int = e[4];
  var kre:int = 22;
  var lre:int = jre >> kre;
  var mre:int = e[4];
  var nre:int = 10;
  var ore:int = mre << nre;
  var pre:int = lre | ore;
  var qre:int = ire ^ pre;
  var rre:int = e[4];
  var sre:int = e[5];
  var tre:int = e[6];
  var ure:int = sre | tre;
  var vre:int = rre & ure;
  var wre:int = e[5];
  var xre:int = e[6];
  var yre:int = wre & xre;
  var zre:int = vre | yre;
  var ase:int = qre + zre;
  e[2] = ase;
  var bse:int = e[3];
  var cse:int = e[7];
  var dse:int = cse + bse;
  e[7] = dse;
  var ese:int = e[3];
  var fse:int = e[2];
  var gse:int = ese + fse;
  e[11] = gse;
  var hse:int = e[10];
  var ise:int = e[7];
  var jse:int = 6;
  var kse:int = ise >> jse;
  var lse:int = e[7];
  var mse:int = 26;
  var nse:int = lse << mse;
  var ose:int = kse | nse;
  var pse:int = e[7];
  var qse:int = 11;
  var rse:int = pse >> qse;
  var sse:int = e[7];
  var tse:int = 21;
  var use:int = sse << tse;
  var vse:int = rse | use;
  var wse:int = ose ^ vse;
  var xse:int = e[7];
  var yse:int = 25;
  var zse:int = xse >> yse;
  var ate:int = e[7];
  var bte:int = 7;
  var cte:int = ate << bte;
  var dte:int = zse | cte;
  var ete:int = wse ^ dte;
  var fte:int = hse + ete;
  var gte:int = e[7];
  var hte:int = e[8];
  var ite:int = e[9];
  var jte:int = hte ^ ite;
  var kte:int = gte & jte;
  var lte:int = e[9];
  var mte:int = kte ^ lte;
  var nte:int = fte + mte;
  var ote:int = e[61];
  var pte:int = nte + ote;
  var qte:int = 506948616;
  var rte:int = pte + qte;
  e[3] = rte;
  var ste:int = e[11];
  var tte:int = 2;
  var ute:int = ste >> tte;
  var vte:int = e[11];
  var wte:int = 30;
  var xte:int = vte << wte;
  var yte:int = ute | xte;
  var zte:int = e[11];
  var aue:int = 13;
  var bue:int = zte >> aue;
  var cue:int = e[11];
  var due:int = 19;
  var eue:int = cue << due;
  var fue:int = bue | eue;
  var gue:int = yte ^ fue;
  var hue:int = e[11];
  var iue:int = 22;
  var jue:int = hue >> iue;
  var kue:int = e[11];
  var lue:int = 10;
  var mue:int = kue << lue;
  var nue:int = jue | mue;
  var oue:int = gue ^ nue;
  var pue:int = e[11];
  var que:int = e[4];
  var rue:int = e[5];
  var sue:int = que | rue;
  var tue:int = pue & sue;
  var uue:int = e[4];
  var vue:int = e[5];
  var wue:int = uue & vue;
  var xue:int = tue | wue;
  var yue:int = oue + xue;
  e[2] = yue;
  var zue:int = e[3];
  var ave:int = e[6];
  var bve:int = ave + zue;
  e[6] = bve;
  var cve:int = e[3];
  var dve:int = e[2];
  var eve:int = cve + dve;
  e[10] = eve;
  var fve:int = e[9];
  var gve:int = e[6];
  var hve:int = 6;
  var ive:int = gve >> hve;
  var jve:int = e[6];
  var kve:int = 26;
  var lve:int = jve << kve;
  var mve:int = ive | lve;
  var nve:int = e[6];
  var ove:int = 11;
  var pve:int = nve >> ove;
  var qve:int = e[6];
  var rve:int = 21;
  var sve:int = qve << rve;
  var tve:int = pve | sve;
  var uve:int = mve ^ tve;
  var vve:int = e[6];
  var wve:int = 25;
  var xve:int = vve >> wve;
  var yve:int = e[6];
  var zve:int = 7;
  var awe:int = yve << zve;
  var bwe:int = xve | awe;
  var cwe:int = uve ^ bwe;
  var dwe:int = fve + cwe;
  var ewe:int = e[6];
  var fwe:int = e[7];
  var gwe:int = e[8];
  var hwe:int = fwe ^ gwe;
  var iwe:int = ewe & hwe;
  var jwe:int = e[8];
  var kwe:int = iwe ^ jwe;
  var lwe:int = dwe + kwe;
  var mwe:int = e[62];
  var nwe:int = lwe + mwe;
  var owe:int = 659060556;
  var pwe:int = nwe + owe;
  e[3] = pwe;
  var qwe:int = e[10];
  var rwe:int = 2;
  var swe:int = qwe >> rwe;
  var twe:int = e[10];
  var uwe:int = 30;
  var vwe:int = twe << uwe;
  var wwe:int = swe | vwe;
  var xwe:int = e[10];
  var ywe:int = 13;
  var zwe:int = xwe >> ywe;
  var axe:int = e[10];
  var bxe:int = 19;
  var cxe:int = axe << bxe;
  var dxe:int = zwe | cxe;
  var exe:int = wwe ^ dxe;
  var fxe:int = e[10];
  var gxe:int = 22;
  var hxe:int = fxe >> gxe;
  var ixe:int = e[10];
  var jxe:int = 10;
  var kxe:int = ixe << jxe;
  var lxe:int = hxe | kxe;
  var mxe:int = exe ^ lxe;
  var nxe:int = e[10];
  var oxe:int = e[11];
  var pxe:int = e[4];
  var qxe:int = oxe | pxe;
  var rxe:int = nxe & qxe;
  var sxe:int = e[11];
  var txe:int = e[4];
  var uxe:int = sxe & txe;
  var vxe:int = rxe | uxe;
  var wxe:int = mxe + vxe;
  e[2] = wxe;
  var xxe:int = e[3];
  var yxe:int = e[5];
  var zxe:int = yxe + xxe;
  e[5] = zxe;
  var aye:int = e[3];
  var bye:int = e[2];
  var cye:int = aye + bye;
  e[9] = cye;
  var dye:int = e[8];
  var eye:int = e[5];
  var fye:int = 6;
  var gye:int = eye >> fye;
  var hye:int = e[5];
  var iye:int = 26;
  var jye:int = hye << iye;
  var kye:int = gye | jye;
  var lye:int = e[5];
  var mye:int = 11;
  var nye:int = lye >> mye;
  var oye:int = e[5];
  var pye:int = 21;
  var qye:int = oye << pye;
  var rye:int = nye | qye;
  var sye:int = kye ^ rye;
  var tye:int = e[5];
  var uye:int = 25;
  var vye:int = tye >> uye;
  var wye:int = e[5];
  var xye:int = 7;
  var yye:int = wye << xye;
  var zye:int = vye | yye;
  var aze:int = sye ^ zye;
  var bze:int = dye + aze;
  var cze:int = e[5];
  var dze:int = e[6];
  var eze:int = e[7];
  var fze:int = dze ^ eze;
  var gze:int = cze & fze;
  var hze:int = e[7];
  var ize:int = gze ^ hze;
  var jze:int = bze + ize;
  var kze:int = e[63];
  var lze:int = jze + kze;
  var mze:int = 883997877;
  var nze:int = lze + mze;
  e[3] = nze;
  var oze:int = e[9];
  var pze:int = 2;
  var qze:int = oze >> pze;
  var rze:int = e[9];
  var sze:int = 30;
  var tze:int = rze << sze;
  var uze:int = qze | tze;
  var vze:int = e[9];
  var wze:int = 13;
  var xze:int = vze >> wze;
  var yze:int = e[9];
  var zze:int = 19;
  var aaf:int = yze << zze;
  var baf:int = xze | aaf;
  var caf:int = uze ^ baf;
  var daf:int = e[9];
  var eaf:int = 22;
  var faf:int = daf >> eaf;
  var gaf:int = e[9];
  var haf:int = 10;
  var iaf:int = gaf << haf;
  var jaf:int = faf | iaf;
  var kaf:int = caf ^ jaf;
  var laf:int = e[9];
  var maf:int = e[10];
  var naf:int = e[11];
  var oaf:int = maf | naf;
  var paf:int = laf & oaf;
  var qaf:int = e[10];
  var raf:int = e[11];
  var saf:int = qaf & raf;
  var taf:int = paf | saf;
  var uaf:int = kaf + taf;
  e[2] = uaf;
  var vaf:int = e[3];
  var waf:int = e[4];
  var xaf:int = waf + vaf;
  e[4] = xaf;
  var yaf:int = e[3];
  var zaf:int = e[2];
  var abf:int = yaf + zaf;
  e[8] = abf;
  var bbf:int = e[7];
  var cbf:int = e[4];
  var dbf:int = 6;
  var ebf:int = cbf >> dbf;
  var fbf:int = e[4];
  var gbf:int = 26;
  var hbf:int = fbf << gbf;
  var ibf:int = ebf | hbf;
  var jbf:int = e[4];
  var kbf:int = 11;
  var lbf:int = jbf >> kbf;
  var mbf:int = e[4];
  var nbf:int = 21;
  var obf:int = mbf << nbf;
  var pbf:int = lbf | obf;
  var qbf:int = ibf ^ pbf;
  var rbf:int = e[4];
  var sbf:int = 25;
  var tbf:int = rbf >> sbf;
  var ubf:int = e[4];
  var vbf:int = 7;
  var wbf:int = ubf << vbf;
  var xbf:int = tbf | wbf;
  var ybf:int = qbf ^ xbf;
  var zbf:int = bbf + ybf;
  var acf:int = e[4];
  var bcf:int = e[5];
  var ccf:int = e[6];
  var dcf:int = bcf ^ ccf;
  var ecf:int = acf & dcf;
  var fcf:int = e[6];
  var gcf:int = ecf ^ fcf;
  var hcf:int = zbf + gcf;
  var icf:int = e[64];
  var jcf:int = hcf + icf;
  var kcf:int = 958139571;
  var lcf:int = jcf + kcf;
  e[3] = lcf;
  var mcf:int = e[8];
  var ncf:int = 2;
  var ocf:int = mcf >> ncf;
  var pcf:int = e[8];
  var qcf:int = 30;
  var rcf:int = pcf << qcf;
  var scf:int = ocf | rcf;
  var tcf:int = e[8];
  var ucf:int = 13;
  var vcf:int = tcf >> ucf;
  var wcf:int = e[8];
  var xcf:int = 19;
  var ycf:int = wcf << xcf;
  var zcf:int = vcf | ycf;
  var adf:int = scf ^ zcf;
  var bdf:int = e[8];
  var cdf:int = 22;
  var ddf:int = bdf >> cdf;
  var edf:int = e[8];
  var fdf:int = 10;
  var gdf:int = edf << fdf;
  var hdf:int = ddf | gdf;
  var idf:int = adf ^ hdf;
  var jdf:int = e[8];
  var kdf:int = e[9];
  var ldf:int = e[10];
  var mdf:int = kdf | ldf;
  var ndf:int = jdf & mdf;
  var odf:int = e[9];
  var pdf:int = e[10];
  var qdf:int = odf & pdf;
  var rdf:int = ndf | qdf;
  var sdf:int = idf + rdf;
  e[2] = sdf;
  var tdf:int = e[3];
  var udf:int = e[11];
  var vdf:int = udf + tdf;
  e[11] = vdf;
  var wdf:int = e[3];
  var xdf:int = e[2];
  var ydf:int = wdf + xdf;
  e[7] = ydf;
  var zdf:int = e[6];
  var aef:int = e[11];
  var bef:int = 6;
  var cef:int = aef >> bef;
  var def:int = e[11];
  var eef:int = 26;
  var fef:int = def << eef;
  var gef:int = cef | fef;
  var hef:int = e[11];
  var ief:int = 11;
  var jef:int = hef >> ief;
  var kef:int = e[11];
  var lef:int = 21;
  var mef:int = kef << lef;
  var nef:int = jef | mef;
  var oef:int = gef ^ nef;
  var pef:int = e[11];
  var qef:int = 25;
  var ref:int = pef >> qef;
  var sef:int = e[11];
  var tef:int = 7;
  var uef:int = sef << tef;
  var vef:int = ref | uef;
  var wef:int = oef ^ vef;
  var xef:int = zdf + wef;
  var yef:int = e[11];
  var zef:int = e[4];
  var aff:int = e[5];
  var bff:int = zef ^ aff;
  var cff:int = yef & bff;
  var dff:int = e[5];
  var eff:int = cff ^ dff;
  var fff:int = xef + eff;
  var gff:int = e[65];
  var hff:int = fff + gff;
  var iff:int = 1322822218;
  var jff:int = hff + iff;
  e[3] = jff;
  var kff:int = e[7];
  var lff:int = 2;
  var mff:int = kff >> lff;
  var nff:int = e[7];
  var off:int = 30;
  var pff:int = nff << off;
  var qff:int = mff | pff;
  var rff:int = e[7];
  var sff:int = 13;
  var tff:int = rff >> sff;
  var uff:int = e[7];
  var vff:int = 19;
  var wff:int = uff << vff;
  var xff:int = tff | wff;
  var yff:int = qff ^ xff;
  var zff:int = e[7];
  var agf:int = 22;
  var bgf:int = zff >> agf;
  var cgf:int = e[7];
  var dgf:int = 10;
  var egf:int = cgf << dgf;
  var fgf:int = bgf | egf;
  var ggf:int = yff ^ fgf;
  var hgf:int = e[7];
  var igf:int = e[8];
  var jgf:int = e[9];
  var kgf:int = igf | jgf;
  var lgf:int = hgf & kgf;
  var mgf:int = e[8];
  var ngf:int = e[9];
  var ogf:int = mgf & ngf;
  var pgf:int = lgf | ogf;
  var qgf:int = ggf + pgf;
  e[2] = qgf;
  var rgf:int = e[3];
  var sgf:int = e[10];
  var tgf:int = sgf + rgf;
  e[10] = tgf;
  var ugf:int = e[3];
  var vgf:int = e[2];
  var wgf:int = ugf + vgf;
  e[6] = wgf;
  var xgf:int = e[5];
  var ygf:int = e[10];
  var zgf:int = 6;
  var ahf:int = ygf >> zgf;
  var bhf:int = e[10];
  var chf:int = 26;
  var dhf:int = bhf << chf;
  var ehf:int = ahf | dhf;
  var fhf:int = e[10];
  var ghf:int = 11;
  var hhf:int = fhf >> ghf;
  var ihf:int = e[10];
  var jhf:int = 21;
  var khf:int = ihf << jhf;
  var lhf:int = hhf | khf;
  var mhf:int = ehf ^ lhf;
  var nhf:int = e[10];
  var ohf:int = 25;
  var phf:int = nhf >> ohf;
  var qhf:int = e[10];
  var rhf:int = 7;
  var shf:int = qhf << rhf;
  var thf:int = phf | shf;
  var uhf:int = mhf ^ thf;
  var vhf:int = xgf + uhf;
  var whf:int = e[10];
  var xhf:int = e[11];
  var yhf:int = e[4];
  var zhf:int = xhf ^ yhf;
  var aif:int = whf & zhf;
  var bif:int = e[4];
  var cif:int = aif ^ bif;
  var dif:int = vhf + cif;
  var eif:int = e[66];
  var fif:int = dif + eif;
  var gif:int = 1537002063;
  var hif:int = fif + gif;
  e[3] = hif;
  var iif:int = e[6];
  var jif:int = 2;
  var kif:int = iif >> jif;
  var lif:int = e[6];
  var mif:int = 30;
  var nif:int = lif << mif;
  var oif:int = kif | nif;
  var pif:int = e[6];
  var qif:int = 13;
  var rif:int = pif >> qif;
  var sif:int = e[6];
  var tif:int = 19;
  var uif:int = sif << tif;
  var vif:int = rif | uif;
  var wif:int = oif ^ vif;
  var xif:int = e[6];
  var yif:int = 22;
  var zif:int = xif >> yif;
  var ajf:int = e[6];
  var bjf:int = 10;
  var cjf:int = ajf << bjf;
  var djf:int = zif | cjf;
  var ejf:int = wif ^ djf;
  var fjf:int = e[6];
  var gjf:int = e[7];
  var hjf:int = e[8];
  var ijf:int = gjf | hjf;
  var jjf:int = fjf & ijf;
  var kjf:int = e[7];
  var ljf:int = e[8];
  var mjf:int = kjf & ljf;
  var njf:int = jjf | mjf;
  var ojf:int = ejf + njf;
  e[2] = ojf;
  var pjf:int = e[3];
  var qjf:int = e[9];
  var rjf:int = qjf + pjf;
  e[9] = rjf;
  var sjf:int = e[3];
  var tjf:int = e[2];
  var ujf:int = sjf + tjf;
  e[5] = ujf;
  var vjf:int = e[4];
  var wjf:int = e[9];
  var xjf:int = 6;
  var yjf:int = wjf >> xjf;
  var zjf:int = e[9];
  var akf:int = 26;
  var bkf:int = zjf << akf;
  var ckf:int = yjf | bkf;
  var dkf:int = e[9];
  var ekf:int = 11;
  var fkf:int = dkf >> ekf;
  var gkf:int = e[9];
  var hkf:int = 21;
  var ikf:int = gkf << hkf;
  var jkf:int = fkf | ikf;
  var kkf:int = ckf ^ jkf;
  var lkf:int = e[9];
  var mkf:int = 25;
  var nkf:int = lkf >> mkf;
  var okf:int = e[9];
  var pkf:int = 7;
  var qkf:int = okf << pkf;
  var rkf:int = nkf | qkf;
  var skf:int = kkf ^ rkf;
  var tkf:int = vjf + skf;
  var ukf:int = e[9];
  var vkf:int = e[10];
  var wkf:int = e[11];
  var xkf:int = vkf ^ wkf;
  var ykf:int = ukf & xkf;
  var zkf:int = e[11];
  var alf:int = ykf ^ zkf;
  var blf:int = tkf + alf;
  var clf:int = e[67];
  var dlf:int = blf + clf;
  var elf:int = 1747873779;
  var flf:int = dlf + elf;
  e[3] = flf;
  var glf:int = e[5];
  var hlf:int = 2;
  var ilf:int = glf >> hlf;
  var jlf:int = e[5];
  var klf:int = 30;
  var llf:int = jlf << klf;
  var mlf:int = ilf | llf;
  var nlf:int = e[5];
  var olf:int = 13;
  var plf:int = nlf >> olf;
  var qlf:int = e[5];
  var rlf:int = 19;
  var slf:int = qlf << rlf;
  var tlf:int = plf | slf;
  var ulf:int = mlf ^ tlf;
  var vlf:int = e[5];
  var wlf:int = 22;
  var xlf:int = vlf >> wlf;
  var ylf:int = e[5];
  var zlf:int = 10;
  var amf:int = ylf << zlf;
  var bmf:int = xlf | amf;
  var cmf:int = ulf ^ bmf;
  var dmf:int = e[5];
  var emf:int = e[6];
  var fmf:int = e[7];
  var gmf:int = emf | fmf;
  var hmf:int = dmf & gmf;
  var imf:int = e[6];
  var jmf:int = e[7];
  var kmf:int = imf & jmf;
  var lmf:int = hmf | kmf;
  var mmf:int = cmf + lmf;
  e[2] = mmf;
  var nmf:int = e[3];
  var omf:int = e[8];
  var pmf:int = omf + nmf;
  e[8] = pmf;
  var qmf:int = e[3];
  var rmf:int = e[2];
  var smf:int = qmf + rmf;
  e[4] = smf;
  var tmf:int = e[11];
  var umf:int = e[8];
  var vmf:int = 6;
  var wmf:int = umf >> vmf;
  var xmf:int = e[8];
  var ymf:int = 26;
  var zmf:int = xmf << ymf;
  var anf:int = wmf | zmf;
  var bnf:int = e[8];
  var cnf:int = 11;
  var dnf:int = bnf >> cnf;
  var enf:int = e[8];
  var fnf:int = 21;
  var gnf:int = enf << fnf;
  var hnf:int = dnf | gnf;
  var inf:int = anf ^ hnf;
  var jnf:int = e[8];
  var knf:int = 25;
  var lnf:int = jnf >> knf;
  var mnf:int = e[8];
  var nnf:int = 7;
  var onf:int = mnf << nnf;
  var pnf:int = lnf | onf;
  var qnf:int = inf ^ pnf;
  var rnf:int = tmf + qnf;
  var snf:int = e[8];
  var tnf:int = e[9];
  var unf:int = e[10];
  var vnf:int = tnf ^ unf;
  var wnf:int = snf & vnf;
  var xnf:int = e[10];
  var ynf:int = wnf ^ xnf;
  var znf:int = rnf + ynf;
  var aof:int = e[68];
  var bof:int = znf + aof;
  var cof:int = 1955562222;
  var dof:int = bof + cof;
  e[3] = dof;
  var eof:int = e[4];
  var fof:int = 2;
  var gof:int = eof >> fof;
  var hof:int = e[4];
  var iof:int = 30;
  var jof:int = hof << iof;
  var kof:int = gof | jof;
  var lof:int = e[4];
  var mof:int = 13;
  var nof:int = lof >> mof;
  var oof:int = e[4];
  var pof:int = 19;
  var qof:int = oof << pof;
  var rof:int = nof | qof;
  var sof:int = kof ^ rof;
  var tof:int = e[4];
  var uof:int = 22;
  var vof:int = tof >> uof;
  var wof:int = e[4];
  var xof:int = 10;
  var yof:int = wof << xof;
  var zof:int = vof | yof;
  var apf:int = sof ^ zof;
  var bpf:int = e[4];
  var cpf:int = e[5];
  var dpf:int = e[6];
  var epf:int = cpf | dpf;
  var fpf:int = bpf & epf;
  var gpf:int = e[5];
  var hpf:int = e[6];
  var ipf:int = gpf & hpf;
  var jpf:int = fpf | ipf;
  var kpf:int = apf + jpf;
  e[2] = kpf;
  var lpf:int = e[3];
  var mpf:int = e[7];
  var npf:int = mpf + lpf;
  e[7] = npf;
  var opf:int = e[3];
  var ppf:int = e[2];
  var qpf:int = opf + ppf;
  e[11] = qpf;
  var rpf:int = e[10];
  var spf:int = e[7];
  var tpf:int = 6;
  var upf:int = spf >> tpf;
  var vpf:int = e[7];
  var wpf:int = 26;
  var xpf:int = vpf << wpf;
  var ypf:int = upf | xpf;
  var zpf:int = e[7];
  var aqf:int = 11;
  var bqf:int = zpf >> aqf;
  var cqf:int = e[7];
  var dqf:int = 21;
  var eqf:int = cqf << dqf;
  var fqf:int = bqf | eqf;
  var gqf:int = ypf ^ fqf;
  var hqf:int = e[7];
  var iqf:int = 25;
  var jqf:int = hqf >> iqf;
  var kqf:int = e[7];
  var lqf:int = 7;
  var mqf:int = kqf << lqf;
  var nqf:int = jqf | mqf;
  var oqf:int = gqf ^ nqf;
  var pqf:int = rpf + oqf;
  var qqf:int = e[7];
  var rqf:int = e[8];
  var sqf:int = e[9];
  var tqf:int = rqf ^ sqf;
  var uqf:int = qqf & tqf;
  var vqf:int = e[9];
  var wqf:int = uqf ^ vqf;
  var xqf:int = pqf + wqf;
  var yqf:int = e[69];
  var zqf:int = xqf + yqf;
  var arf:int = 2024104815;
  var brf:int = zqf + arf;
  e[3] = brf;
  var crf:int = e[11];
  var drf:int = 2;
  var erf:int = crf >> drf;
  var frf:int = e[11];
  var grf:int = 30;
  var hrf:int = frf << grf;
  var irf:int = erf | hrf;
  var jrf:int = e[11];
  var krf:int = 13;
  var lrf:int = jrf >> krf;
  var mrf:int = e[11];
  var nrf:int = 19;
  var orf:int = mrf << nrf;
  var prf:int = lrf | orf;
  var qrf:int = irf ^ prf;
  var rrf:int = e[11];
  var srf:int = 22;
  var trf:int = rrf >> srf;
  var urf:int = e[11];
  var vrf:int = 10;
  var wrf:int = urf << vrf;
  var xrf:int = trf | wrf;
  var yrf:int = qrf ^ xrf;
  var zrf:int = e[11];
  var asf:int = e[4];
  var bsf:int = e[5];
  var csf:int = asf | bsf;
  var dsf:int = zrf & csf;
  var esf:int = e[4];
  var fsf:int = e[5];
  var gsf:int = esf & fsf;
  var hsf:int = dsf | gsf;
  var isf:int = yrf + hsf;
  e[2] = isf;
  var jsf:int = e[3];
  var ksf:int = e[6];
  var lsf:int = ksf + jsf;
  e[6] = lsf;
  var msf:int = e[3];
  var nsf:int = e[2];
  var osf:int = msf + nsf;
  e[10] = osf;
  var psf:int = e[9];
  var qsf:int = e[6];
  var rsf:int = 6;
  var ssf:int = qsf >> rsf;
  var tsf:int = e[6];
  var usf:int = 26;
  var vsf:int = tsf << usf;
  var wsf:int = ssf | vsf;
  var xsf:int = e[6];
  var ysf:int = 11;
  var zsf:int = xsf >> ysf;
  var atf:int = e[6];
  var btf:int = 21;
  var ctf:int = atf << btf;
  var dtf:int = zsf | ctf;
  var etf:int = wsf ^ dtf;
  var ftf:int = e[6];
  var gtf:int = 25;
  var htf:int = ftf >> gtf;
  var itf:int = e[6];
  var jtf:int = 7;
  var ktf:int = itf << jtf;
  var ltf:int = htf | ktf;
  var mtf:int = etf ^ ltf;
  var ntf:int = psf + mtf;
  var otf:int = e[6];
  var ptf:int = e[7];
  var qtf:int = e[8];
  var rtf:int = ptf ^ qtf;
  var stf:int = otf & rtf;
  var ttf:int = e[8];
  var utf:int = stf ^ ttf;
  var vtf:int = ntf + utf;
  var wtf:int = e[70];
  var xtf:int = vtf + wtf;
  var ytf:int = -2067236844;
  var ztf:int = xtf + ytf;
  e[3] = ztf;
  var auf:int = e[10];
  var buf:int = 2;
  var cuf:int = auf >> buf;
  var duf:int = e[10];
  var euf:int = 30;
  var fuf:int = duf << euf;
  var guf:int = cuf | fuf;
  var huf:int = e[10];
  var iuf:int = 13;
  var juf:int = huf >> iuf;
  var kuf:int = e[10];
  var luf:int = 19;
  var muf:int = kuf << luf;
  var nuf:int = juf | muf;
  var ouf:int = guf ^ nuf;
  var puf:int = e[10];
  var quf:int = 22;
  var ruf:int = puf >> quf;
  var suf:int = e[10];
  var tuf:int = 10;
  var uuf:int = suf << tuf;
  var vuf:int = ruf | uuf;
  var wuf:int = ouf ^ vuf;
  var xuf:int = e[10];
  var yuf:int = e[11];
  var zuf:int = e[4];
  var avf:int = yuf | zuf;
  var bvf:int = xuf & avf;
  var cvf:int = e[11];
  var dvf:int = e[4];
  var evf:int = cvf & dvf;
  var fvf:int = bvf | evf;
  var gvf:int = wuf + fvf;
  e[2] = gvf;
  var hvf:int = e[3];
  var ivf:int = e[5];
  var jvf:int = ivf + hvf;
  e[5] = jvf;
  var kvf:int = e[3];
  var lvf:int = e[2];
  var mvf:int = kvf + lvf;
  e[9] = mvf;
  var nvf:int = e[8];
  var ovf:int = e[5];
  var pvf:int = 6;
  var qvf:int = ovf >> pvf;
  var rvf:int = e[5];
  var svf:int = 26;
  var tvf:int = rvf << svf;
  var uvf:int = qvf | tvf;
  var vvf:int = e[5];
  var wvf:int = 11;
  var xvf:int = vvf >> wvf;
  var yvf:int = e[5];
  var zvf:int = 21;
  var awf:int = yvf << zvf;
  var bwf:int = xvf | awf;
  var cwf:int = uvf ^ bwf;
  var dwf:int = e[5];
  var ewf:int = 25;
  var fwf:int = dwf >> ewf;
  var gwf:int = e[5];
  var hwf:int = 7;
  var iwf:int = gwf << hwf;
  var jwf:int = fwf | iwf;
  var kwf:int = cwf ^ jwf;
  var lwf:int = nvf + kwf;
  var mwf:int = e[5];
  var nwf:int = e[6];
  var owf:int = e[7];
  var pwf:int = nwf ^ owf;
  var qwf:int = mwf & pwf;
  var rwf:int = e[7];
  var swf:int = qwf ^ rwf;
  var twf:int = lwf + swf;
  var uwf:int = e[71];
  var vwf:int = twf + uwf;
  var wwf:int = -1933114872;
  var xwf:int = vwf + wwf;
  e[3] = xwf;
  var ywf:int = e[9];
  var zwf:int = 2;
  var axf:int = ywf >> zwf;
  var bxf:int = e[9];
  var cxf:int = 30;
  var dxf:int = bxf << cxf;
  var exf:int = axf | dxf;
  var fxf:int = e[9];
  var gxf:int = 13;
  var hxf:int = fxf >> gxf;
  var ixf:int = e[9];
  var jxf:int = 19;
  var kxf:int = ixf << jxf;
  var lxf:int = hxf | kxf;
  var mxf:int = exf ^ lxf;
  var nxf:int = e[9];
  var oxf:int = 22;
  var pxf:int = nxf >> oxf;
  var qxf:int = e[9];
  var rxf:int = 10;
  var sxf:int = qxf << rxf;
  var txf:int = pxf | sxf;
  var uxf:int = mxf ^ txf;
  var vxf:int = e[9];
  var wxf:int = e[10];
  var xxf:int = e[11];
  var yxf:int = wxf | xxf;
  var zxf:int = vxf & yxf;
  var ayf:int = e[10];
  var byf:int = e[11];
  var cyf:int = ayf & byf;
  var dyf:int = zxf | cyf;
  var eyf:int = uxf + dyf;
  e[2] = eyf;
  var fyf:int = e[3];
  var gyf:int = e[4];
  var hyf:int = gyf + fyf;
  e[4] = hyf;
  var iyf:int = e[3];
  var jyf:int = e[2];
  var kyf:int = iyf + jyf;
  e[8] = kyf;
  var lyf:int = e[7];
  var myf:int = e[4];
  var nyf:int = 6;
  var oyf:int = myf >> nyf;
  var pyf:int = e[4];
  var qyf:int = 26;
  var ryf:int = pyf << qyf;
  var syf:int = oyf | ryf;
  var tyf:int = e[4];
  var uyf:int = 11;
  var vyf:int = tyf >> uyf;
  var wyf:int = e[4];
  var xyf:int = 21;
  var yyf:int = wyf << xyf;
  var zyf:int = vyf | yyf;
  var azf:int = syf ^ zyf;
  var bzf:int = e[4];
  var czf:int = 25;
  var dzf:int = bzf >> czf;
  var ezf:int = e[4];
  var fzf:int = 7;
  var gzf:int = ezf << fzf;
  var hzf:int = dzf | gzf;
  var izf:int = azf ^ hzf;
  var jzf:int = lyf + izf;
  var kzf:int = e[4];
  var lzf:int = e[5];
  var mzf:int = e[6];
  var nzf:int = lzf ^ mzf;
  var ozf:int = kzf & nzf;
  var pzf:int = e[6];
  var qzf:int = ozf ^ pzf;
  var rzf:int = jzf + qzf;
  var szf:int = e[72];
  var tzf:int = rzf + szf;
  var uzf:int = -1866530822;
  var vzf:int = tzf + uzf;
  e[3] = vzf;
  var wzf:int = e[8];
  var xzf:int = 2;
  var yzf:int = wzf >> xzf;
  var zzf:int = e[8];
  var aag:int = 30;
  var bag:int = zzf << aag;
  var cag:int = yzf | bag;
  var dag:int = e[8];
  var eag:int = 13;
  var fag:int = dag >> eag;
  var gag:int = e[8];
  var hag:int = 19;
  var iag:int = gag << hag;
  var jag:int = fag | iag;
  var kag:int = cag ^ jag;
  var lag:int = e[8];
  var mag:int = 22;
  var nag:int = lag >> mag;
  var oag:int = e[8];
  var pag:int = 10;
  var qag:int = oag << pag;
  var rag:int = nag | qag;
  var sag:int = kag ^ rag;
  var tag:int = e[8];
  var uag:int = e[9];
  var vag:int = e[10];
  var wag:int = uag | vag;
  var xag:int = tag & wag;
  var yag:int = e[9];
  var zag:int = e[10];
  var abg:int = yag & zag;
  var bbg:int = xag | abg;
  var cbg:int = sag + bbg;
  e[2] = cbg;
  var dbg:int = e[3];
  var ebg:int = e[11];
  var fbg:int = ebg + dbg;
  e[11] = fbg;
  var gbg:int = e[3];
  var hbg:int = e[2];
  var ibg:int = gbg + hbg;
  e[7] = ibg;
  var jbg:int = e[6];
  var kbg:int = e[11];
  var lbg:int = 6;
  var mbg:int = kbg >> lbg;
  var nbg:int = e[11];
  var obg:int = 26;
  var pbg:int = nbg << obg;
  var qbg:int = mbg | pbg;
  var rbg:int = e[11];
  var sbg:int = 11;
  var tbg:int = rbg >> sbg;
  var ubg:int = e[11];
  var vbg:int = 21;
  var wbg:int = ubg << vbg;
  var xbg:int = tbg | wbg;
  var ybg:int = qbg ^ xbg;
  var zbg:int = e[11];
  var acg:int = 25;
  var bcg:int = zbg >> acg;
  var ccg:int = e[11];
  var dcg:int = 7;
  var ecg:int = ccg << dcg;
  var fcg:int = bcg | ecg;
  var gcg:int = ybg ^ fcg;
  var hcg:int = jbg + gcg;
  var icg:int = e[11];
  var jcg:int = e[4];
  var kcg:int = e[5];
  var lcg:int = jcg ^ kcg;
  var mcg:int = icg & lcg;
  var ncg:int = e[5];
  var ocg:int = mcg ^ ncg;
  var pcg:int = hcg + ocg;
  var qcg:int = e[73];
  var rcg:int = pcg + qcg;
  var scg:int = -1538233109;
  var tcg:int = rcg + scg;
  e[3] = tcg;
  var ucg:int = e[7];
  var vcg:int = 2;
  var wcg:int = ucg >> vcg;
  var xcg:int = e[7];
  var ycg:int = 30;
  var zcg:int = xcg << ycg;
  var adg:int = wcg | zcg;
  var bdg:int = e[7];
  var cdg:int = 13;
  var ddg:int = bdg >> cdg;
  var edg:int = e[7];
  var fdg:int = 19;
  var gdg:int = edg << fdg;
  var hdg:int = ddg | gdg;
  var idg:int = adg ^ hdg;
  var jdg:int = e[7];
  var kdg:int = 22;
  var ldg:int = jdg >> kdg;
  var mdg:int = e[7];
  var ndg:int = 10;
  var odg:int = mdg << ndg;
  var pdg:int = ldg | odg;
  var qdg:int = idg ^ pdg;
  var rdg:int = e[7];
  var sdg:int = e[8];
  var tdg:int = e[9];
  var udg:int = sdg | tdg;
  var vdg:int = rdg & udg;
  var wdg:int = e[8];
  var xdg:int = e[9];
  var ydg:int = wdg & xdg;
  var zdg:int = vdg | ydg;
  var aeg:int = qdg + zdg;
  e[2] = aeg;
  var beg:int = e[3];
  var ceg:int = e[10];
  var deg:int = ceg + beg;
  e[10] = deg;
  var eeg:int = e[3];
  var feg:int = e[2];
  var geg:int = eeg + feg;
  e[6] = geg;
  var heg:int = e[5];
  var ieg:int = e[10];
  var jeg:int = 6;
  var keg:int = ieg >> jeg;
  var leg:int = e[10];
  var meg:int = 26;
  var neg:int = leg << meg;
  var oeg:int = keg | neg;
  var peg:int = e[10];
  var qeg:int = 11;
  var reg:int = peg >> qeg;
  var seg:int = e[10];
  var teg:int = 21;
  var ueg:int = seg << teg;
  var veg:int = reg | ueg;
  var weg:int = oeg ^ veg;
  var xeg:int = e[10];
  var yeg:int = 25;
  var zeg:int = xeg >> yeg;
  var afg:int = e[10];
  var bfg:int = 7;
  var cfg:int = afg << bfg;
  var dfg:int = zeg | cfg;
  var efg:int = weg ^ dfg;
  var ffg:int = heg + efg;
  var gfg:int = e[10];
  var hfg:int = e[11];
  var ifg:int = e[4];
  var jfg:int = hfg ^ ifg;
  var kfg:int = gfg & jfg;
  var lfg:int = e[4];
  var mfg:int = kfg ^ lfg;
  var nfg:int = ffg + mfg;
  var ofg:int = e[74];
  var pfg:int = nfg + ofg;
  var qfg:int = -1090935817;
  var rfg:int = pfg + qfg;
  e[3] = rfg;
  var sfg:int = e[6];
  var tfg:int = 2;
  var ufg:int = sfg >> tfg;
  var vfg:int = e[6];
  var wfg:int = 30;
  var xfg:int = vfg << wfg;
  var yfg:int = ufg | xfg;
  var zfg:int = e[6];
  var agg:int = 13;
  var bgg:int = zfg >> agg;
  var cgg:int = e[6];
  var dgg:int = 19;
  var egg:int = cgg << dgg;
  var fgg:int = bgg | egg;
  var ggg:int = yfg ^ fgg;
  var hgg:int = e[6];
  var igg:int = 22;
  var jgg:int = hgg >> igg;
  var kgg:int = e[6];
  var lgg:int = 10;
  var mgg:int = kgg << lgg;
  var ngg:int = jgg | mgg;
  var ogg:int = ggg ^ ngg;
  var pgg:int = e[6];
  var qgg:int = e[7];
  var rgg:int = e[8];
  var sgg:int = qgg | rgg;
  var tgg:int = pgg & sgg;
  var ugg:int = e[7];
  var vgg:int = e[8];
  var wgg:int = ugg & vgg;
  var xgg:int = tgg | wgg;
  var ygg:int = ogg + xgg;
  e[2] = ygg;
  var zgg:int = e[3];
  var ahg:int = e[9];
  var bhg:int = ahg + zgg;
  e[9] = bhg;
  var chg:int = e[3];
  var dhg:int = e[2];
  var ehg:int = chg + dhg;
  e[5] = ehg;
  var fhg:int = e[4];
  var ghg:int = e[9];
  var hhg:int = 6;
  var ihg:int = ghg >> hhg;
  var jhg:int = e[9];
  var khg:int = 26;
  var lhg:int = jhg << khg;
  var mhg:int = ihg | lhg;
  var nhg:int = e[9];
  var ohg:int = 11;
  var phg:int = nhg >> ohg;
  var qhg:int = e[9];
  var rhg:int = 21;
  var shg:int = qhg << rhg;
  var thg:int = phg | shg;
  var uhg:int = mhg ^ thg;
  var vhg:int = e[9];
  var whg:int = 25;
  var xhg:int = vhg >> whg;
  var yhg:int = e[9];
  var zhg:int = 7;
  var aig:int = yhg << zhg;
  var big:int = xhg | aig;
  var cig:int = uhg ^ big;
  var dig:int = fhg + cig;
  var eig:int = e[9];
  var fig:int = e[10];
  var gig:int = e[11];
  var hig:int = fig ^ gig;
  var iig:int = eig & hig;
  var jig:int = e[11];
  var kig:int = iig ^ jig;
  var lig:int = dig + kig;
  var mig:int = e[75];
  var nig:int = lig + mig;
  var oig:int = -965641998;
  var pig:int = nig + oig;
  e[3] = pig;
  var qig:int = e[5];
  var rig:int = 2;
  var sig:int = qig >> rig;
  var tig:int = e[5];
  var uig:int = 30;
  var vig:int = tig << uig;
  var wig:int = sig | vig;
  var xig:int = e[5];
  var yig:int = 13;
  var zig:int = xig >> yig;
  var ajg:int = e[5];
  var bjg:int = 19;
  var cjg:int = ajg << bjg;
  var djg:int = zig | cjg;
  var ejg:int = wig ^ djg;
  var fjg:int = e[5];
  var gjg:int = 22;
  var hjg:int = fjg >> gjg;
  var ijg:int = e[5];
  var jjg:int = 10;
  var kjg:int = ijg << jjg;
  var ljg:int = hjg | kjg;
  var mjg:int = ejg ^ ljg;
  var njg:int = e[5];
  var ojg:int = e[6];
  var pjg:int = e[7];
  var qjg:int = ojg | pjg;
  var rjg:int = njg & qjg;
  var sjg:int = e[6];
  var tjg:int = e[7];
  var ujg:int = sjg & tjg;
  var vjg:int = rjg | ujg;
  var wjg:int = mjg + vjg;
  e[2] = wjg;
  var xjg:int = e[3];
  var yjg:int = e[8];
  var zjg:int = yjg + xjg;
  e[8] = zjg;
  var akg:int = e[3];
  var bkg:int = e[2];
  var ckg:int = akg + bkg;
  e[4] = ckg;
  e[1] = ne;
  loop L_d {
    var dkg:int = 8;
    var ekg:int = e[1];
    var fkg:int = ekg;
    var gkg:int = dkg;
    var hkg:int = fkg < gkg;
    var ikg:int = 1;
    var jkg:int = hkg & ikg;
    if (eqz(jkg)) goto B_c;
    var kkg:int = 16;
    var lkg:int = e + kkg;
    var mkg:int = lkg;
    var nkg:int = e[1];
    var okg:int = 2;
    var pkg:int = nkg << okg;
    var qkg:int_ptr = mkg + pkg;
    var rkg:int = qkg[0];
    var skg:int = e[79];
    var tkg:int = e[1];
    var ukg:int = 2;
    var vkg:int = tkg << ukg;
    var wkg:int_ptr = skg + vkg;
    var xkg:int = wkg[0];
    var ykg:int = xkg + rkg;
    wkg[0] = ykg;
    var zkg:int = e[1];
    var alg:int = 1;
    var blg:int = zkg + alg;
    e[1] = blg;
    continue L_d;
  }
  unreachable;
  label B_c:
  var clg:int = 320;
  var dlg:int = e + clg;
  g_a = dlg;
}

function f_y(a:int, b:int, c:int) {
  var d:int = g_a;
  var e:int = 16;
  var f:{ a:int, b:int, c:int, d:int } = d - e;
  g_a = f;
  var g:int = 0;
  f.d = a;
  f.c = b;
  f.b = c;
  f.a = g;
  loop L_b {
    var h:int = f.a;
    var i:int = f.b;
    var j:int = 2;
    var k:int = i >> j;
    var l:int = h;
    var m:int = k;
    var n:int = l < m;
    var o:int = 1;
    var p:int = n & o;
    if (eqz(p)) goto B_a;
    var q:int = f.c;
    var r:int = f.a;
    var s:int = 2;
    var t:int = r << s;
    var u:int = q + t;
    var v:int = f_ha(u);
    var w:int = f.d;
    var x:int = f.a;
    var y:int = 2;
    var z:int = x << y;
    var aa:int_ptr = w + z;
    aa[0] = v;
    var ba:int = f.a;
    var ca:int = 1;
    var da:int = ba + ca;
    f.a = da;
    continue L_b;
  }
  unreachable;
  label B_a:
  var ea:int = 16;
  var fa:int = f + ea;
  g_a = fa;
}

function f_z(a:int, b:int) {
  var c:int = g_a;
  var d:int = 16;
  var e:int_ptr = c - d;
  g_a = e;
  var f:int = 32;
  e[3] = a;
  e[2] = b;
  var g:int = e[2];
  f_aa(g);
  var h:int = e[3];
  var i:int = e[2];
  f_ba(h, i, f);
  var j:int = e[2];
  var k:int = 104;
  var l:int = 0;
  memset(j, l, k);
  var m:int = 16;
  var n:int = e + m;
  g_a = n;
}

function f_aa(a:int) {
  var ba:int;
  var b:int = g_a;
  var c:int = 32;
  var d:int_ptr = b - c;
  g_a = d;
  var e:int = 56;
  var f:int = 8;
  var g:int = 20;
  var h:int = d + g;
  var i:int = h;
  d[7] = a;
  var j:int = d[7];
  var k:int = 32;
  var l:int = j + k;
  f_ba(i, l, f);
  var m:int_ptr = d[7];
  var n:int = m[9];
  var o:int = 3;
  var p:int = n >> o;
  var q:int = 63;
  var r:int = p & q;
  d[4] = r;
  var s:int = d[4];
  var t:int = s;
  var u:int = e;
  var v:int = t < u;
  var w:int = 1;
  var x:int = v & w;
  if (eqz(x)) goto B_b;
  var y:int = 56;
  var z:int = d[4];
  var aa:int = y - z;
  ba = aa;
  goto B_a;
  label B_b:
  var ca:int = 120;
  var da:int = d[4];
  var ea:int = ca - da;
  ba = ea;
  label B_a:
  var fa:int = ba;
  var ga:int = 8;
  var ha:int = 20;
  var ia:int = d + ha;
  var ja:int = ia;
  var ka:int = 2032;
  var la:int = ka;
  d[3] = fa;
  var ma:int = d[7];
  var na:int = d[3];
  f_w(ma, la, na);
  var oa:int = d[7];
  f_w(oa, ja, ga);
  var pa:int = 32;
  var qa:int = d + pa;
  g_a = qa;
}

function f_ba(a:int, b:int, c:int) {
  var d:int = g_a;
  var e:int = 16;
  var f:{ a:int, b:int, c:int, d:int } = d - e;
  g_a = f;
  var g:int = 0;
  f.d = a;
  f.c = b;
  f.b = c;
  f.a = g;
  loop L_b {
    var h:int = f.a;
    var i:int = f.b;
    var j:int = 2;
    var k:int = i >> j;
    var l:int = h;
    var m:int = k;
    var n:int = l < m;
    var o:int = 1;
    var p:int = n & o;
    if (eqz(p)) goto B_a;
    var q:int = f.d;
    var r:int = f.a;
    var s:int = 2;
    var t:int = r << s;
    var u:int = q + t;
    var v:int = f.c;
    var w:int = f.a;
    var x:int = 2;
    var y:int = w << x;
    var z:int_ptr = v + y;
    var aa:int = z[0];
    f_ca(u, aa);
    var ba:int = f.a;
    var ca:int = 1;
    var da:int = ba + ca;
    f.a = da;
    continue L_b;
  }
  unreachable;
  label B_a:
  var ea:int = 16;
  var fa:int = f + ea;
  g_a = fa;
}

function f_ca(a:int, b:int) {
  var c:int = g_a;
  var d:int = 16;
  var e:int_ptr = c - d;
  e[3] = a;
  e[2] = b;
  var f:int = e[3];
  e[1] = f;
  var g:int = e[2];
  var h:int = 255;
  var i:int = g & h;
  var j:byte_ptr = e[1];
  j[3] = i;
  var k:int = e[2];
  var l:int = 8;
  var m:int = k >> l;
  var n:int = 255;
  var o:int = m & n;
  var p:byte_ptr = e[1];
  p[2] = o;
  var q:int = e[2];
  var r:int = 16;
  var s:int = q >> r;
  var t:int = 255;
  var u:int = s & t;
  var v:byte_ptr = e[1];
  v[1] = u;
  var w:int = e[2];
  var x:int = 24;
  var y:int = w >> x;
  var z:int = 255;
  var aa:int = y & z;
  var ba:byte_ptr = e[1];
  ba[0] = aa;
}

function f_da(a:int, b:int, c:int) {
  var d:int = g_a;
  var e:int = 128;
  var f:int_ptr = d - e;
  g_a = f;
  var g:int = 64;
  f[31] = a;
  f[30] = b;
  f[29] = c;
  var h:int = f[30];
  f[3] = h;
  var i:int = f[29];
  var j:int = i;
  var k:int = g;
  var l:int = j > k;
  var m:int = 1;
  var n:int = l & m;
  if (eqz(n)) goto B_a;
  var o:int = 32;
  var p:int = 16;
  var q:int = f + p;
  var r:int = q;
  var s:int = f[31];
  f_v(s);
  var t:int = f[31];
  var u:int = f[3];
  var v:int = f[29];
  f_w(t, u, v);
  var w:int = f[31];
  f_z(r, w);
  f[3] = r;
  f[29] = o;
  label B_a:
  var x:int = 0;
  var y:int = 48;
  var z:int = f + y;
  var aa:long_ptr = z;
  var ba:int = f[31];
  f_v(ba);
  var ud:long = 3906369333256140342L;
  aa[0] = ud;
  var ca:int = 56;
  var da:long_ptr = aa + ca;
  da[0] = ud;
  var ea:int = 48;
  var fa:long_ptr = aa + ea;
  fa[0] = ud;
  var ga:int = 40;
  var ha:long_ptr = aa + ga;
  ha[0] = ud;
  var ia:int = 32;
  var ja:long_ptr = aa + ia;
  ja[0] = ud;
  var ka:int = 24;
  var la:long_ptr = aa + ka;
  la[0] = ud;
  var ma:int = 16;
  var na:long_ptr = aa + ma;
  na[0] = ud;
  var oa:int = 8;
  var pa:long_ptr = aa + oa;
  pa[0] = ud;
  f[2] = x;
  loop L_c {
    var qa:int = f[2];
    var ra:int = f[29];
    var sa:int = qa;
    var ta:int = ra;
    var ua:int = sa < ta;
    var va:int = 1;
    var wa:int = ua & va;
    if (eqz(wa)) goto B_b;
    var xa:int = 48;
    var ya:int = f + xa;
    var za:int = ya;
    var ab:int = f[3];
    var bb:int = f[2];
    var cb:ubyte_ptr = ab + bb;
    var db:int = cb[0];
    var eb:int = 255;
    var fb:int = db & eb;
    var gb:int = f[2];
    var hb:int = za + gb;
    var ib:int = hb[0]:ubyte;
    var jb:int = 255;
    var kb:int = ib & jb;
    var lb:int = kb ^ fb;
    hb[0]:byte = lb;
    var mb:int = f[2];
    var nb:int = 1;
    var ob:int = mb + nb;
    f[2] = ob;
    continue L_c;
  }
  unreachable;
  label B_b:
  var pb:int = 0;
  var qb:int = 48;
  var rb:int = f + qb;
  var sb:long_ptr = rb;
  var tb:int = 64;
  var ub:int = f[31];
  f_w(ub, sb, tb);
  var vb:int = f[31];
  var wb:int = 104;
  var xb:int = vb + wb;
  f_v(xb);
  var vd:long = 6655295901103053916L;
  sb[0] = vd;
  var yb:int = 56;
  var zb:long_ptr = sb + yb;
  zb[0] = vd;
  var ac:int = 48;
  var bc:long_ptr = sb + ac;
  bc[0] = vd;
  var cc:int = 40;
  var dc:long_ptr = sb + cc;
  dc[0] = vd;
  var ec:int = 32;
  var fc:long_ptr = sb + ec;
  fc[0] = vd;
  var gc:int = 24;
  var hc:long_ptr = sb + gc;
  hc[0] = vd;
  var ic:int = 16;
  var jc:long_ptr = sb + ic;
  jc[0] = vd;
  var kc:int = 8;
  var lc:long_ptr = sb + kc;
  lc[0] = vd;
  f[2] = pb;
  loop L_e {
    var mc:int = f[2];
    var nc:int = f[29];
    var oc:int = mc;
    var pc:int = nc;
    var qc:int = oc < pc;
    var rc:int = 1;
    var sc:int = qc & rc;
    if (eqz(sc)) goto B_d;
    var tc:int = 48;
    var uc:int = f + tc;
    var vc:int = uc;
    var wc:int = f[3];
    var xc:int = f[2];
    var yc:ubyte_ptr = wc + xc;
    var zc:int = yc[0];
    var ad:int = 255;
    var bd:int = zc & ad;
    var cd:int = f[2];
    var dd:int = vc + cd;
    var ed:int = dd[0]:ubyte;
    var fd:int = 255;
    var gd:int = ed & fd;
    var hd:int = gd ^ bd;
    dd[0]:byte = hd;
    var id:int = f[2];
    var jd:int = 1;
    var kd:int = id + jd;
    f[2] = kd;
    continue L_e;
  }
  unreachable;
  label B_d:
  var ld:int = 64;
  var md:int = 48;
  var nd:int = f + md;
  var od:int = nd;
  var pd:int = f[31];
  var qd:int = 104;
  var rd:int = pd + qd;
  f_w(rd, od, ld);
  var sd:int = 128;
  var td:int = f + sd;
  g_a = td;
}

function f_ea(a:int, b:int, c:int) {
  var d:int = g_a;
  var e:int = 16;
  var f:int_ptr = d - e;
  g_a = f;
  f[3] = a;
  f[2] = b;
  f[1] = c;
  var g:int = f[3];
  var h:int = f[2];
  var i:int = f[1];
  f_w(g, h, i);
  var j:int = 16;
  var k:int = f + j;
  g_a = k;
}

function f_fa(a:int, b:int) {
  var c:int = g_a;
  var d:int = 48;
  var e:int_ptr = c - d;
  g_a = e;
  var f:int = 32;
  var g:int = e;
  e[11] = a;
  e[10] = b;
  var h:int = e[10];
  f_z(g, h);
  var i:int = e[10];
  var j:int = 104;
  var k:int = i + j;
  f_w(k, g, f);
  var l:int = e[11];
  var m:int = e[10];
  var n:int = 104;
  var o:int = m + n;
  f_z(l, o);
  var p:int = 48;
  var q:int = e + p;
  g_a = q;
}

function f_ga(a:int, b:int, c:int, d:int, e:long, f:int, g:int) {
  var h:int = g_a;
  var i:int = 544;
  var j:int = h - i;
  g_a = j;
  var k:int = 0;
  var l:int = 304;
  var m:int = j + l;
  var n:int = m;
  j[135]:int = a;
  j[134]:int = b;
  j[133]:int = c;
  j[132]:int = d;
  j[65]:long = e;
  j[129]:int = f;
  j[128]:int = g;
  var o:int = j[135]:int;
  var p:int = j[134]:int;
  f_da(n, o, p);
  var q:int = j[133]:int;
  var r:int = j[132]:int;
  f_ea(n, q, r);
  j[23]:int = k;
  loop L_b {
    var s:int = j[23]:int;
    var t:int = 5;
    var u:int = s << t;
    var v:int = j[128]:int;
    var w:int = u;
    var x:int = v;
    var y:int = w < x;
    var z:int = 1;
    var aa:int = y & z;
    if (eqz(aa)) goto B_a;
    var td:long = 2L;
    var ba:int = 48;
    var ca:int = j + ba;
    var da:long_ptr = ca;
    var ea:int = 16;
    var fa:int = j + ea;
    var ga:long_ptr = fa;
    var ha:int = 96;
    var ia:int = j + ha;
    var ja:int = ia;
    var ka:int = 4;
    var la:int = 88;
    var ma:int = j + la;
    var na:int = ma;
    var oa:int = 304;
    var pa:int = j + oa;
    var qa:int = pa;
    var ra:int = j[23]:int;
    var sa:int = 1;
    var ta:int = ra + sa;
    f_ca(na, ta);
    var ua:int = 208;
    f_ic(ja, qa, ua);
    f_ea(ja, na, ka);
    f_fa(da, ja);
    var ud:long = da[0];
    ga[0] = ud;
    var va:int = 24;
    var wa:long_ptr = ga + va;
    var xa:long_ptr = da + va;
    var vd:long = xa[0];
    wa[0] = vd;
    var ya:int = 16;
    var za:long_ptr = ga + ya;
    var ab:long_ptr = da + ya;
    var wd:long = ab[0];
    za[0] = wd;
    var bb:int = 8;
    var cb:long_ptr = ga + bb;
    var db:long_ptr = da + bb;
    var xd:long = db[0];
    cb[0] = xd;
    j[1]:long = td;
    loop L_d {
      var yd:long = j[1]:long;
      var zd:long = j[65]:long;
      var ae:long = yd;
      var be:long = zd;
      var eb:int = ae <= be;
      var fb:int = 1;
      var gb:int = eb & fb;
      if (eqz(gb)) goto B_c;
      var hb:int = 0;
      var ib:int = 96;
      var jb:int = j + ib;
      var kb:int = jb;
      var lb:int = 48;
      var mb:int = j + lb;
      var nb:int = mb;
      var ob:int = 32;
      var pb:int = j[135]:int;
      var qb:int = j[134]:int;
      f_da(kb, pb, qb);
      f_ea(kb, nb, ob);
      f_fa(nb, kb);
      j[1]:int = hb;
      loop L_f {
        var rb:int = 32;
        var sb:int = j[1]:int;
        var tb:int = sb;
        var ub:int = rb;
        var vb:int = tb < ub;
        var wb:int = 1;
        var xb:int = vb & wb;
        if (eqz(xb)) goto B_e;
        var yb:int = 16;
        var zb:int = j + yb;
        var ac:int = zb;
        var bc:int = 48;
        var cc:int = j + bc;
        var dc:int = cc;
        var ec:int = j[1]:int;
        var fc:ubyte_ptr = dc + ec;
        var gc:int = fc[0];
        var hc:int = 255;
        var ic:int = gc & hc;
        var jc:int = j[1]:int;
        var kc:int = ac + jc;
        var lc:int = kc[0]:ubyte;
        var mc:int = 255;
        var nc:int = lc & mc;
        var oc:int = nc ^ ic;
        kc[0]:byte = oc;
        var pc:int = j[1]:int;
        var qc:int = 1;
        var rc:int = pc + qc;
        j[1]:int = rc;
        continue L_f;
      }
      unreachable;
      label B_e:
      var ce:long = j[1]:long;
      var de:long = 1L;
      var ee:long = ce + de;
      j[1]:long = ee;
      continue L_d;
    }
    unreachable;
    label B_c:
    var sc:int = 32;
    var tc:int = j[128]:int;
    var uc:int = j[23]:int;
    var vc:int = 5;
    var wc:int = uc << vc;
    var xc:int = tc - wc;
    j[0]:int = xc;
    var yc:int = j[0]:int;
    var zc:int = yc;
    var ad:int = sc;
    var bd:int = zc > ad;
    var cd:int = 1;
    var dd:int = bd & cd;
    if (eqz(dd)) goto B_g;
    var ed:int = 32;
    j[0]:int = ed;
    label B_g:
    var fd:int = 16;
    var gd:int = j + fd;
    var hd:int = gd;
    var id:int = j[129]:int;
    var jd:int = j[23]:int;
    var kd:int = 5;
    var ld:int = jd << kd;
    var md:int = id + ld;
    var nd:int = j[0]:int;
    f_ic(md, hd, nd);
    var od:int = j[23]:int;
    var pd:int = 1;
    var qd:int = od + pd;
    j[23]:int = qd;
    continue L_b;
  }
  unreachable;
  label B_a:
  var rd:int = 544;
  var sd:int = j + rd;
  g_a = sd;
}

function f_ha(a:int):int {
  var b:int = g_a;
  var c:int = 16;
  var d:int_ptr = b - c;
  d[3] = a;
  var e:int = d[3];
  d[2] = e;
  var f:ubyte_ptr = d[2];
  var g:int = f[3];
  var h:int = 255;
  var i:int = g & h;
  var j:ubyte_ptr = d[2];
  var k:int = j[2];
  var l:int = 255;
  var m:int = k & l;
  var n:int = 8;
  var o:int = m << n;
  var p:int = i + o;
  var q:ubyte_ptr = d[2];
  var r:int = q[1];
  var s:int = 255;
  var t:int = r & s;
  var u:int = 16;
  var v:int = t << u;
  var w:int = p + v;
  var x:ubyte_ptr = d[2];
  var y:int = x[0];
  var z:int = 255;
  var aa:int = y & z;
  var ba:int = 24;
  var ca:int = aa << ba;
  var da:int = w + ca;
  return da;
}

function f_ia(a:int, b:int) {
  var c:int = g_a;
  var d:int = 96;
  var e:int_ptr = c - d;
  var f:int = e;
  var g:int = 0;
  e[23] = a;
  e[22] = b;
  var h:long_ptr@1 = e[22];
  var vle:long = h[0];
  f[0]:long@1 = vle;
  var i:int = 56;
  var j:long_ptr@1 = f + i;
  var k:long_ptr@1 = h + i;
  var wle:long = k[0];
  j[0] = wle;
  var l:int = 48;
  var m:long_ptr@1 = f + l;
  var n:long_ptr@1 = h + l;
  var xle:long = n[0];
  m[0] = xle;
  var o:int = 40;
  var p:long_ptr@1 = f + o;
  var q:long_ptr@1 = h + o;
  var yle:long = q[0];
  p[0] = yle;
  var r:int = 32;
  var s:long_ptr@1 = f + r;
  var t:long_ptr@1 = h + r;
  var zle:long = t[0];
  s[0] = zle;
  var u:int = 24;
  var v:long_ptr@1 = f + u;
  var w:long_ptr@1 = h + u;
  var ame:long = w[0];
  v[0] = ame;
  var x:int = 16;
  var y:long_ptr@1 = f + x;
  var z:long_ptr@1 = h + x;
  var bme:long = z[0];
  y[0] = bme;
  var aa:int = 8;
  var ba:long_ptr@1 = f + aa;
  var ca:long_ptr@1 = h + aa;
  var cme:long = ca[0];
  ba[0] = cme;
  var da:int_ptr = e[23];
  var ea:int = da[0];
  e[21] = ea;
  var fa:int_ptr = e[23];
  var ga:int = fa[1];
  e[20] = ga;
  var ha:int_ptr = e[23];
  var ia:int = ha[2];
  e[19] = ia;
  var ja:int_ptr = e[23];
  var ka:int = ja[3];
  e[18] = ka;
  var la:int_ptr = e[23];
  var ma:int = la[4];
  e[17] = ma;
  var na:int = e[20];
  var oa:int = e[19];
  var pa:int = e[18];
  var qa:int = oa ^ pa;
  var ra:int = na & qa;
  var sa:int = e[18];
  var ta:int = ra ^ sa;
  var ua:int = e[0];
  var va:int = 24;
  var wa:int = ua << va;
  var xa:int = e[0];
  var ya:int = 8;
  var za:int = xa >> ya;
  var ab:int = wa | za;
  var bb:int = -16711936;
  var cb:int = ab & bb;
  var db:int = e[0];
  var eb:int = 8;
  var fb:int = db << eb;
  var gb:int = e[0];
  var hb:int = 24;
  var ib:int = gb >> hb;
  var jb:int = fb | ib;
  var kb:int = 16711935;
  var lb:int = jb & kb;
  var mb:int = cb | lb;
  e[0] = mb;
  var nb:int = ta + mb;
  var ob:int = 1518500249;
  var pb:int = nb + ob;
  var qb:int = e[21];
  var rb:int = 5;
  var sb:int = qb << rb;
  var tb:int = e[21];
  var ub:int = 27;
  var vb:int = tb >> ub;
  var wb:int = sb | vb;
  var xb:int = pb + wb;
  var yb:int = e[17];
  var zb:int = yb + xb;
  e[17] = zb;
  var ac:int = e[20];
  var bc:int = 30;
  var cc:int = ac << bc;
  var dc:int = e[20];
  var ec:int = 2;
  var fc:int = dc >> ec;
  var gc:int = cc | fc;
  e[20] = gc;
  var hc:int = e[21];
  var ic:int = e[20];
  var jc:int = e[19];
  var kc:int = ic ^ jc;
  var lc:int = hc & kc;
  var mc:int = e[19];
  var nc:int = lc ^ mc;
  var oc:int = e[1];
  var pc:int = 24;
  var qc:int = oc << pc;
  var rc:int = e[1];
  var sc:int = 8;
  var tc:int = rc >> sc;
  var uc:int = qc | tc;
  var vc:int = -16711936;
  var wc:int = uc & vc;
  var xc:int = e[1];
  var yc:int = 8;
  var zc:int = xc << yc;
  var ad:int = e[1];
  var bd:int = 24;
  var cd:int = ad >> bd;
  var dd:int = zc | cd;
  var ed:int = 16711935;
  var fd:int = dd & ed;
  var gd:int = wc | fd;
  e[1] = gd;
  var hd:int = nc + gd;
  var id:int = 1518500249;
  var jd:int = hd + id;
  var kd:int = e[17];
  var ld:int = 5;
  var md:int = kd << ld;
  var nd:int = e[17];
  var od:int = 27;
  var pd:int = nd >> od;
  var qd:int = md | pd;
  var rd:int = jd + qd;
  var sd:int = e[18];
  var td:int = sd + rd;
  e[18] = td;
  var ud:int = e[21];
  var vd:int = 30;
  var wd:int = ud << vd;
  var xd:int = e[21];
  var yd:int = 2;
  var zd:int = xd >> yd;
  var ae:int = wd | zd;
  e[21] = ae;
  var be:int = e[17];
  var ce:int = e[21];
  var de:int = e[20];
  var ee:int = ce ^ de;
  var fe:int = be & ee;
  var ge:int = e[20];
  var he:int = fe ^ ge;
  var ie:int = e[2];
  var je:int = 24;
  var ke:int = ie << je;
  var le:int = e[2];
  var me:int = 8;
  var ne:int = le >> me;
  var oe:int = ke | ne;
  var pe:int = -16711936;
  var qe:int = oe & pe;
  var re:int = e[2];
  var se:int = 8;
  var te:int = re << se;
  var ue:int = e[2];
  var ve:int = 24;
  var we:int = ue >> ve;
  var xe:int = te | we;
  var ye:int = 16711935;
  var ze:int = xe & ye;
  var af:int = qe | ze;
  e[2] = af;
  var bf:int = he + af;
  var cf:int = 1518500249;
  var df:int = bf + cf;
  var ef:int = e[18];
  var ff:int = 5;
  var gf:int = ef << ff;
  var hf:int = e[18];
  var if:int = 27;
  var jf:int = hf >> if;
  var kf:int = gf | jf;
  var lf:int = df + kf;
  var mf:int = e[19];
  var nf:int = mf + lf;
  e[19] = nf;
  var of:int = e[17];
  var pf:int = 30;
  var qf:int = of << pf;
  var rf:int = e[17];
  var sf:int = 2;
  var tf:int = rf >> sf;
  var uf:int = qf | tf;
  e[17] = uf;
  var vf:int = e[18];
  var wf:int = e[17];
  var xf:int = e[21];
  var yf:int = wf ^ xf;
  var zf:int = vf & yf;
  var ag:int = e[21];
  var bg:int = zf ^ ag;
  var cg:int = e[3];
  var dg:int = 24;
  var eg:int = cg << dg;
  var fg:int = e[3];
  var gg:int = 8;
  var hg:int = fg >> gg;
  var ig:int = eg | hg;
  var jg:int = -16711936;
  var kg:int = ig & jg;
  var lg:int = e[3];
  var mg:int = 8;
  var ng:int = lg << mg;
  var og:int = e[3];
  var pg:int = 24;
  var qg:int = og >> pg;
  var rg:int = ng | qg;
  var sg:int = 16711935;
  var tg:int = rg & sg;
  var ug:int = kg | tg;
  e[3] = ug;
  var vg:int = bg + ug;
  var wg:int = 1518500249;
  var xg:int = vg + wg;
  var yg:int = e[19];
  var zg:int = 5;
  var ah:int = yg << zg;
  var bh:int = e[19];
  var ch:int = 27;
  var dh:int = bh >> ch;
  var eh:int = ah | dh;
  var fh:int = xg + eh;
  var gh:int = e[20];
  var hh:int = gh + fh;
  e[20] = hh;
  var ih:int = e[18];
  var jh:int = 30;
  var kh:int = ih << jh;
  var lh:int = e[18];
  var mh:int = 2;
  var nh:int = lh >> mh;
  var oh:int = kh | nh;
  e[18] = oh;
  var ph:int = e[19];
  var qh:int = e[18];
  var rh:int = e[17];
  var sh:int = qh ^ rh;
  var th:int = ph & sh;
  var uh:int = e[17];
  var vh:int = th ^ uh;
  var wh:int = e[4];
  var xh:int = 24;
  var yh:int = wh << xh;
  var zh:int = e[4];
  var ai:int = 8;
  var bi:int = zh >> ai;
  var ci:int = yh | bi;
  var di:int = -16711936;
  var ei:int = ci & di;
  var fi:int = e[4];
  var gi:int = 8;
  var hi:int = fi << gi;
  var ii:int = e[4];
  var ji:int = 24;
  var ki:int = ii >> ji;
  var li:int = hi | ki;
  var mi:int = 16711935;
  var ni:int = li & mi;
  var oi:int = ei | ni;
  e[4] = oi;
  var pi:int = vh + oi;
  var qi:int = 1518500249;
  var ri:int = pi + qi;
  var si:int = e[20];
  var ti:int = 5;
  var ui:int = si << ti;
  var vi:int = e[20];
  var wi:int = 27;
  var xi:int = vi >> wi;
  var yi:int = ui | xi;
  var zi:int = ri + yi;
  var aj:int = e[21];
  var bj:int = aj + zi;
  e[21] = bj;
  var cj:int = e[19];
  var dj:int = 30;
  var ej:int = cj << dj;
  var fj:int = e[19];
  var gj:int = 2;
  var hj:int = fj >> gj;
  var ij:int = ej | hj;
  e[19] = ij;
  var jj:int = e[20];
  var kj:int = e[19];
  var lj:int = e[18];
  var mj:int = kj ^ lj;
  var nj:int = jj & mj;
  var oj:int = e[18];
  var pj:int = nj ^ oj;
  var qj:int = e[5];
  var rj:int = 24;
  var sj:int = qj << rj;
  var tj:int = e[5];
  var uj:int = 8;
  var vj:int = tj >> uj;
  var wj:int = sj | vj;
  var xj:int = -16711936;
  var yj:int = wj & xj;
  var zj:int = e[5];
  var ak:int = 8;
  var bk:int = zj << ak;
  var ck:int = e[5];
  var dk:int = 24;
  var ek:int = ck >> dk;
  var fk:int = bk | ek;
  var gk:int = 16711935;
  var hk:int = fk & gk;
  var ik:int = yj | hk;
  e[5] = ik;
  var jk:int = pj + ik;
  var kk:int = 1518500249;
  var lk:int = jk + kk;
  var mk:int = e[21];
  var nk:int = 5;
  var ok:int = mk << nk;
  var pk:int = e[21];
  var qk:int = 27;
  var rk:int = pk >> qk;
  var sk:int = ok | rk;
  var tk:int = lk + sk;
  var uk:int = e[17];
  var vk:int = uk + tk;
  e[17] = vk;
  var wk:int = e[20];
  var xk:int = 30;
  var yk:int = wk << xk;
  var zk:int = e[20];
  var al:int = 2;
  var bl:int = zk >> al;
  var cl:int = yk | bl;
  e[20] = cl;
  var dl:int = e[21];
  var el:int = e[20];
  var fl:int = e[19];
  var gl:int = el ^ fl;
  var hl:int = dl & gl;
  var il:int = e[19];
  var jl:int = hl ^ il;
  var kl:int = e[6];
  var ll:int = 24;
  var ml:int = kl << ll;
  var nl:int = e[6];
  var ol:int = 8;
  var pl:int = nl >> ol;
  var ql:int = ml | pl;
  var rl:int = -16711936;
  var sl:int = ql & rl;
  var tl:int = e[6];
  var ul:int = 8;
  var vl:int = tl << ul;
  var wl:int = e[6];
  var xl:int = 24;
  var yl:int = wl >> xl;
  var zl:int = vl | yl;
  var am:int = 16711935;
  var bm:int = zl & am;
  var cm:int = sl | bm;
  e[6] = cm;
  var dm:int = jl + cm;
  var em:int = 1518500249;
  var fm:int = dm + em;
  var gm:int = e[17];
  var hm:int = 5;
  var im:int = gm << hm;
  var jm:int = e[17];
  var km:int = 27;
  var lm:int = jm >> km;
  var mm:int = im | lm;
  var nm:int = fm + mm;
  var om:int = e[18];
  var pm:int = om + nm;
  e[18] = pm;
  var qm:int = e[21];
  var rm:int = 30;
  var sm:int = qm << rm;
  var tm:int = e[21];
  var um:int = 2;
  var vm:int = tm >> um;
  var wm:int = sm | vm;
  e[21] = wm;
  var xm:int = e[17];
  var ym:int = e[21];
  var zm:int = e[20];
  var an:int = ym ^ zm;
  var bn:int = xm & an;
  var cn:int = e[20];
  var dn:int = bn ^ cn;
  var en:int = e[7];
  var fn:int = 24;
  var gn:int = en << fn;
  var hn:int = e[7];
  var in:int = 8;
  var jn:int = hn >> in;
  var kn:int = gn | jn;
  var ln:int = -16711936;
  var mn:int = kn & ln;
  var nn:int = e[7];
  var on:int = 8;
  var pn:int = nn << on;
  var qn:int = e[7];
  var rn:int = 24;
  var sn:int = qn >> rn;
  var tn:int = pn | sn;
  var un:int = 16711935;
  var vn:int = tn & un;
  var wn:int = mn | vn;
  e[7] = wn;
  var xn:int = dn + wn;
  var yn:int = 1518500249;
  var zn:int = xn + yn;
  var ao:int = e[18];
  var bo:int = 5;
  var co:int = ao << bo;
  var do:int = e[18];
  var eo:int = 27;
  var fo:int = do >> eo;
  var go:int = co | fo;
  var ho:int = zn + go;
  var io:int = e[19];
  var jo:int = io + ho;
  e[19] = jo;
  var ko:int = e[17];
  var lo:int = 30;
  var mo:int = ko << lo;
  var no:int = e[17];
  var oo:int = 2;
  var po:int = no >> oo;
  var qo:int = mo | po;
  e[17] = qo;
  var ro:int = e[18];
  var so:int = e[17];
  var to:int = e[21];
  var uo:int = so ^ to;
  var vo:int = ro & uo;
  var wo:int = e[21];
  var xo:int = vo ^ wo;
  var yo:int = e[8];
  var zo:int = 24;
  var ap:int = yo << zo;
  var bp:int = e[8];
  var cp:int = 8;
  var dp:int = bp >> cp;
  var ep:int = ap | dp;
  var fp:int = -16711936;
  var gp:int = ep & fp;
  var hp:int = e[8];
  var ip:int = 8;
  var jp:int = hp << ip;
  var kp:int = e[8];
  var lp:int = 24;
  var mp:int = kp >> lp;
  var np:int = jp | mp;
  var op:int = 16711935;
  var pp:int = np & op;
  var qp:int = gp | pp;
  e[8] = qp;
  var rp:int = xo + qp;
  var sp:int = 1518500249;
  var tp:int = rp + sp;
  var up:int = e[19];
  var vp:int = 5;
  var wp:int = up << vp;
  var xp:int = e[19];
  var yp:int = 27;
  var zp:int = xp >> yp;
  var aq:int = wp | zp;
  var bq:int = tp + aq;
  var cq:int = e[20];
  var dq:int = cq + bq;
  e[20] = dq;
  var eq:int = e[18];
  var fq:int = 30;
  var gq:int = eq << fq;
  var hq:int = e[18];
  var iq:int = 2;
  var jq:int = hq >> iq;
  var kq:int = gq | jq;
  e[18] = kq;
  var lq:int = e[19];
  var mq:int = e[18];
  var nq:int = e[17];
  var oq:int = mq ^ nq;
  var pq:int = lq & oq;
  var qq:int = e[17];
  var rq:int = pq ^ qq;
  var sq:int = e[9];
  var tq:int = 24;
  var uq:int = sq << tq;
  var vq:int = e[9];
  var wq:int = 8;
  var xq:int = vq >> wq;
  var yq:int = uq | xq;
  var zq:int = -16711936;
  var ar:int = yq & zq;
  var br:int = e[9];
  var cr:int = 8;
  var dr:int = br << cr;
  var er:int = e[9];
  var fr:int = 24;
  var gr:int = er >> fr;
  var hr:int = dr | gr;
  var ir:int = 16711935;
  var jr:int = hr & ir;
  var kr:int = ar | jr;
  e[9] = kr;
  var lr:int = rq + kr;
  var mr:int = 1518500249;
  var nr:int = lr + mr;
  var or:int = e[20];
  var pr:int = 5;
  var qr:int = or << pr;
  var rr:int = e[20];
  var sr:int = 27;
  var tr:int = rr >> sr;
  var ur:int = qr | tr;
  var vr:int = nr + ur;
  var wr:int = e[21];
  var xr:int = wr + vr;
  e[21] = xr;
  var yr:int = e[19];
  var zr:int = 30;
  var as:int = yr << zr;
  var bs:int = e[19];
  var cs:int = 2;
  var ds:int = bs >> cs;
  var es:int = as | ds;
  e[19] = es;
  var fs:int = e[20];
  var gs:int = e[19];
  var hs:int = e[18];
  var is:int = gs ^ hs;
  var js:int = fs & is;
  var ks:int = e[18];
  var ls:int = js ^ ks;
  var ms:int = e[10];
  var ns:int = 24;
  var os:int = ms << ns;
  var ps:int = e[10];
  var qs:int = 8;
  var rs:int = ps >> qs;
  var ss:int = os | rs;
  var ts:int = -16711936;
  var us:int = ss & ts;
  var vs:int = e[10];
  var ws:int = 8;
  var xs:int = vs << ws;
  var ys:int = e[10];
  var zs:int = 24;
  var at:int = ys >> zs;
  var bt:int = xs | at;
  var ct:int = 16711935;
  var dt:int = bt & ct;
  var et:int = us | dt;
  e[10] = et;
  var ft:int = ls + et;
  var gt:int = 1518500249;
  var ht:int = ft + gt;
  var it:int = e[21];
  var jt:int = 5;
  var kt:int = it << jt;
  var lt:int = e[21];
  var mt:int = 27;
  var nt:int = lt >> mt;
  var ot:int = kt | nt;
  var pt:int = ht + ot;
  var qt:int = e[17];
  var rt:int = qt + pt;
  e[17] = rt;
  var st:int = e[20];
  var tt:int = 30;
  var ut:int = st << tt;
  var vt:int = e[20];
  var wt:int = 2;
  var xt:int = vt >> wt;
  var yt:int = ut | xt;
  e[20] = yt;
  var zt:int = e[21];
  var au:int = e[20];
  var bu:int = e[19];
  var cu:int = au ^ bu;
  var du:int = zt & cu;
  var eu:int = e[19];
  var fu:int = du ^ eu;
  var gu:int = e[11];
  var hu:int = 24;
  var iu:int = gu << hu;
  var ju:int = e[11];
  var ku:int = 8;
  var lu:int = ju >> ku;
  var mu:int = iu | lu;
  var nu:int = -16711936;
  var ou:int = mu & nu;
  var pu:int = e[11];
  var qu:int = 8;
  var ru:int = pu << qu;
  var su:int = e[11];
  var tu:int = 24;
  var uu:int = su >> tu;
  var vu:int = ru | uu;
  var wu:int = 16711935;
  var xu:int = vu & wu;
  var yu:int = ou | xu;
  e[11] = yu;
  var zu:int = fu + yu;
  var av:int = 1518500249;
  var bv:int = zu + av;
  var cv:int = e[17];
  var dv:int = 5;
  var ev:int = cv << dv;
  var fv:int = e[17];
  var gv:int = 27;
  var hv:int = fv >> gv;
  var iv:int = ev | hv;
  var jv:int = bv + iv;
  var kv:int = e[18];
  var lv:int = kv + jv;
  e[18] = lv;
  var mv:int = e[21];
  var nv:int = 30;
  var ov:int = mv << nv;
  var pv:int = e[21];
  var qv:int = 2;
  var rv:int = pv >> qv;
  var sv:int = ov | rv;
  e[21] = sv;
  var tv:int = e[17];
  var uv:int = e[21];
  var vv:int = e[20];
  var wv:int = uv ^ vv;
  var xv:int = tv & wv;
  var yv:int = e[20];
  var zv:int = xv ^ yv;
  var aw:int = e[12];
  var bw:int = 24;
  var cw:int = aw << bw;
  var dw:int = e[12];
  var ew:int = 8;
  var fw:int = dw >> ew;
  var gw:int = cw | fw;
  var hw:int = -16711936;
  var iw:int = gw & hw;
  var jw:int = e[12];
  var kw:int = 8;
  var lw:int = jw << kw;
  var mw:int = e[12];
  var nw:int = 24;
  var ow:int = mw >> nw;
  var pw:int = lw | ow;
  var qw:int = 16711935;
  var rw:int = pw & qw;
  var sw:int = iw | rw;
  e[12] = sw;
  var tw:int = zv + sw;
  var uw:int = 1518500249;
  var vw:int = tw + uw;
  var ww:int = e[18];
  var xw:int = 5;
  var yw:int = ww << xw;
  var zw:int = e[18];
  var ax:int = 27;
  var bx:int = zw >> ax;
  var cx:int = yw | bx;
  var dx:int = vw + cx;
  var ex:int = e[19];
  var fx:int = ex + dx;
  e[19] = fx;
  var gx:int = e[17];
  var hx:int = 30;
  var ix:int = gx << hx;
  var jx:int = e[17];
  var kx:int = 2;
  var lx:int = jx >> kx;
  var mx:int = ix | lx;
  e[17] = mx;
  var nx:int = e[18];
  var ox:int = e[17];
  var px:int = e[21];
  var qx:int = ox ^ px;
  var rx:int = nx & qx;
  var sx:int = e[21];
  var tx:int = rx ^ sx;
  var ux:int = e[13];
  var vx:int = 24;
  var wx:int = ux << vx;
  var xx:int = e[13];
  var yx:int = 8;
  var zx:int = xx >> yx;
  var ay:int = wx | zx;
  var by:int = -16711936;
  var cy:int = ay & by;
  var dy:int = e[13];
  var ey:int = 8;
  var fy:int = dy << ey;
  var gy:int = e[13];
  var hy:int = 24;
  var iy:int = gy >> hy;
  var jy:int = fy | iy;
  var ky:int = 16711935;
  var ly:int = jy & ky;
  var my:int = cy | ly;
  e[13] = my;
  var ny:int = tx + my;
  var oy:int = 1518500249;
  var py:int = ny + oy;
  var qy:int = e[19];
  var ry:int = 5;
  var sy:int = qy << ry;
  var ty:int = e[19];
  var uy:int = 27;
  var vy:int = ty >> uy;
  var wy:int = sy | vy;
  var xy:int = py + wy;
  var yy:int = e[20];
  var zy:int = yy + xy;
  e[20] = zy;
  var az:int = e[18];
  var bz:int = 30;
  var cz:int = az << bz;
  var dz:int = e[18];
  var ez:int = 2;
  var fz:int = dz >> ez;
  var gz:int = cz | fz;
  e[18] = gz;
  var hz:int = e[19];
  var iz:int = e[18];
  var jz:int = e[17];
  var kz:int = iz ^ jz;
  var lz:int = hz & kz;
  var mz:int = e[17];
  var nz:int = lz ^ mz;
  var oz:int = e[14];
  var pz:int = 24;
  var qz:int = oz << pz;
  var rz:int = e[14];
  var sz:int = 8;
  var tz:int = rz >> sz;
  var uz:int = qz | tz;
  var vz:int = -16711936;
  var wz:int = uz & vz;
  var xz:int = e[14];
  var yz:int = 8;
  var zz:int = xz << yz;
  var aaa:int = e[14];
  var baa:int = 24;
  var caa:int = aaa >> baa;
  var daa:int = zz | caa;
  var eaa:int = 16711935;
  var faa:int = daa & eaa;
  var gaa:int = wz | faa;
  e[14] = gaa;
  var haa:int = nz + gaa;
  var iaa:int = 1518500249;
  var jaa:int = haa + iaa;
  var kaa:int = e[20];
  var laa:int = 5;
  var maa:int = kaa << laa;
  var naa:int = e[20];
  var oaa:int = 27;
  var paa:int = naa >> oaa;
  var qaa:int = maa | paa;
  var raa:int = jaa + qaa;
  var saa:int = e[21];
  var taa:int = saa + raa;
  e[21] = taa;
  var uaa:int = e[19];
  var vaa:int = 30;
  var waa:int = uaa << vaa;
  var xaa:int = e[19];
  var yaa:int = 2;
  var zaa:int = xaa >> yaa;
  var aba:int = waa | zaa;
  e[19] = aba;
  var bba:int = e[20];
  var cba:int = e[19];
  var dba:int = e[18];
  var eba:int = cba ^ dba;
  var fba:int = bba & eba;
  var gba:int = e[18];
  var hba:int = fba ^ gba;
  var iba:int = e[15];
  var jba:int = 24;
  var kba:int = iba << jba;
  var lba:int = e[15];
  var mba:int = 8;
  var nba:int = lba >> mba;
  var oba:int = kba | nba;
  var pba:int = -16711936;
  var qba:int = oba & pba;
  var rba:int = e[15];
  var sba:int = 8;
  var tba:int = rba << sba;
  var uba:int = e[15];
  var vba:int = 24;
  var wba:int = uba >> vba;
  var xba:int = tba | wba;
  var yba:int = 16711935;
  var zba:int = xba & yba;
  var aca:int = qba | zba;
  e[15] = aca;
  var bca:int = hba + aca;
  var cca:int = 1518500249;
  var dca:int = bca + cca;
  var eca:int = e[21];
  var fca:int = 5;
  var gca:int = eca << fca;
  var hca:int = e[21];
  var ica:int = 27;
  var jca:int = hca >> ica;
  var kca:int = gca | jca;
  var lca:int = dca + kca;
  var mca:int = e[17];
  var nca:int = mca + lca;
  e[17] = nca;
  var oca:int = e[20];
  var pca:int = 30;
  var qca:int = oca << pca;
  var rca:int = e[20];
  var sca:int = 2;
  var tca:int = rca >> sca;
  var uca:int = qca | tca;
  e[20] = uca;
  var vca:int = e[21];
  var wca:int = e[20];
  var xca:int = e[19];
  var yca:int = wca ^ xca;
  var zca:int = vca & yca;
  var ada:int = e[19];
  var bda:int = zca ^ ada;
  var cda:int = e[13];
  var dda:int = e[8];
  var eda:int = cda ^ dda;
  var fda:int = e[2];
  var gda:int = eda ^ fda;
  var hda:int = e[0];
  var ida:int = gda ^ hda;
  var jda:int = 1;
  var kda:int = ida << jda;
  var lda:int = e[13];
  var mda:int = e[8];
  var nda:int = lda ^ mda;
  var oda:int = e[2];
  var pda:int = nda ^ oda;
  var qda:int = e[0];
  var rda:int = pda ^ qda;
  var sda:int = 31;
  var tda:int = rda >> sda;
  var uda:int = kda | tda;
  e[0] = uda;
  var vda:int = bda + uda;
  var wda:int = 1518500249;
  var xda:int = vda + wda;
  var yda:int = e[17];
  var zda:int = 5;
  var aea:int = yda << zda;
  var bea:int = e[17];
  var cea:int = 27;
  var dea:int = bea >> cea;
  var eea:int = aea | dea;
  var fea:int = xda + eea;
  var gea:int = e[18];
  var hea:int = gea + fea;
  e[18] = hea;
  var iea:int = e[21];
  var jea:int = 30;
  var kea:int = iea << jea;
  var lea:int = e[21];
  var mea:int = 2;
  var nea:int = lea >> mea;
  var oea:int = kea | nea;
  e[21] = oea;
  var pea:int = e[17];
  var qea:int = e[21];
  var rea:int = e[20];
  var sea:int = qea ^ rea;
  var tea:int = pea & sea;
  var uea:int = e[20];
  var vea:int = tea ^ uea;
  var wea:int = e[14];
  var xea:int = e[9];
  var yea:int = wea ^ xea;
  var zea:int = e[3];
  var afa:int = yea ^ zea;
  var bfa:int = e[1];
  var cfa:int = afa ^ bfa;
  var dfa:int = 1;
  var efa:int = cfa << dfa;
  var ffa:int = e[14];
  var gfa:int = e[9];
  var hfa:int = ffa ^ gfa;
  var ifa:int = e[3];
  var jfa:int = hfa ^ ifa;
  var kfa:int = e[1];
  var lfa:int = jfa ^ kfa;
  var mfa:int = 31;
  var nfa:int = lfa >> mfa;
  var ofa:int = efa | nfa;
  e[1] = ofa;
  var pfa:int = vea + ofa;
  var qfa:int = 1518500249;
  var rfa:int = pfa + qfa;
  var sfa:int = e[18];
  var tfa:int = 5;
  var ufa:int = sfa << tfa;
  var vfa:int = e[18];
  var wfa:int = 27;
  var xfa:int = vfa >> wfa;
  var yfa:int = ufa | xfa;
  var zfa:int = rfa + yfa;
  var aga:int = e[19];
  var bga:int = aga + zfa;
  e[19] = bga;
  var cga:int = e[17];
  var dga:int = 30;
  var ega:int = cga << dga;
  var fga:int = e[17];
  var gga:int = 2;
  var hga:int = fga >> gga;
  var iga:int = ega | hga;
  e[17] = iga;
  var jga:int = e[18];
  var kga:int = e[17];
  var lga:int = e[21];
  var mga:int = kga ^ lga;
  var nga:int = jga & mga;
  var oga:int = e[21];
  var pga:int = nga ^ oga;
  var qga:int = e[15];
  var rga:int = e[10];
  var sga:int = qga ^ rga;
  var tga:int = e[4];
  var uga:int = sga ^ tga;
  var vga:int = e[2];
  var wga:int = uga ^ vga;
  var xga:int = 1;
  var yga:int = wga << xga;
  var zga:int = e[15];
  var aha:int = e[10];
  var bha:int = zga ^ aha;
  var cha:int = e[4];
  var dha:int = bha ^ cha;
  var eha:int = e[2];
  var fha:int = dha ^ eha;
  var gha:int = 31;
  var hha:int = fha >> gha;
  var iha:int = yga | hha;
  e[2] = iha;
  var jha:int = pga + iha;
  var kha:int = 1518500249;
  var lha:int = jha + kha;
  var mha:int = e[19];
  var nha:int = 5;
  var oha:int = mha << nha;
  var pha:int = e[19];
  var qha:int = 27;
  var rha:int = pha >> qha;
  var sha:int = oha | rha;
  var tha:int = lha + sha;
  var uha:int = e[20];
  var vha:int = uha + tha;
  e[20] = vha;
  var wha:int = e[18];
  var xha:int = 30;
  var yha:int = wha << xha;
  var zha:int = e[18];
  var aia:int = 2;
  var bia:int = zha >> aia;
  var cia:int = yha | bia;
  e[18] = cia;
  var dia:int = e[19];
  var eia:int = e[18];
  var fia:int = e[17];
  var gia:int = eia ^ fia;
  var hia:int = dia & gia;
  var iia:int = e[17];
  var jia:int = hia ^ iia;
  var kia:int = e[0];
  var lia:int = e[11];
  var mia:int = kia ^ lia;
  var nia:int = e[5];
  var oia:int = mia ^ nia;
  var pia:int = e[3];
  var qia:int = oia ^ pia;
  var ria:int = 1;
  var sia:int = qia << ria;
  var tia:int = e[0];
  var uia:int = e[11];
  var via:int = tia ^ uia;
  var wia:int = e[5];
  var xia:int = via ^ wia;
  var yia:int = e[3];
  var zia:int = xia ^ yia;
  var aja:int = 31;
  var bja:int = zia >> aja;
  var cja:int = sia | bja;
  e[3] = cja;
  var dja:int = jia + cja;
  var eja:int = 1518500249;
  var fja:int = dja + eja;
  var gja:int = e[20];
  var hja:int = 5;
  var ija:int = gja << hja;
  var jja:int = e[20];
  var kja:int = 27;
  var lja:int = jja >> kja;
  var mja:int = ija | lja;
  var nja:int = fja + mja;
  var oja:int = e[21];
  var pja:int = oja + nja;
  e[21] = pja;
  var qja:int = e[19];
  var rja:int = 30;
  var sja:int = qja << rja;
  var tja:int = e[19];
  var uja:int = 2;
  var vja:int = tja >> uja;
  var wja:int = sja | vja;
  e[19] = wja;
  var xja:int = e[20];
  var yja:int = e[19];
  var zja:int = xja ^ yja;
  var aka:int = e[18];
  var bka:int = zja ^ aka;
  var cka:int = e[1];
  var dka:int = e[12];
  var eka:int = cka ^ dka;
  var fka:int = e[6];
  var gka:int = eka ^ fka;
  var hka:int = e[4];
  var ika:int = gka ^ hka;
  var jka:int = 1;
  var kka:int = ika << jka;
  var lka:int = e[1];
  var mka:int = e[12];
  var nka:int = lka ^ mka;
  var oka:int = e[6];
  var pka:int = nka ^ oka;
  var qka:int = e[4];
  var rka:int = pka ^ qka;
  var ska:int = 31;
  var tka:int = rka >> ska;
  var uka:int = kka | tka;
  e[4] = uka;
  var vka:int = bka + uka;
  var wka:int = 1859775393;
  var xka:int = vka + wka;
  var yka:int = e[21];
  var zka:int = 5;
  var ala:int = yka << zka;
  var bla:int = e[21];
  var cla:int = 27;
  var dla:int = bla >> cla;
  var ela:int = ala | dla;
  var fla:int = xka + ela;
  var gla:int = e[17];
  var hla:int = gla + fla;
  e[17] = hla;
  var ila:int = e[20];
  var jla:int = 30;
  var kla:int = ila << jla;
  var lla:int = e[20];
  var mla:int = 2;
  var nla:int = lla >> mla;
  var ola:int = kla | nla;
  e[20] = ola;
  var pla:int = e[21];
  var qla:int = e[20];
  var rla:int = pla ^ qla;
  var sla:int = e[19];
  var tla:int = rla ^ sla;
  var ula:int = e[2];
  var vla:int = e[13];
  var wla:int = ula ^ vla;
  var xla:int = e[7];
  var yla:int = wla ^ xla;
  var zla:int = e[5];
  var ama:int = yla ^ zla;
  var bma:int = 1;
  var cma:int = ama << bma;
  var dma:int = e[2];
  var ema:int = e[13];
  var fma:int = dma ^ ema;
  var gma:int = e[7];
  var hma:int = fma ^ gma;
  var ima:int = e[5];
  var jma:int = hma ^ ima;
  var kma:int = 31;
  var lma:int = jma >> kma;
  var mma:int = cma | lma;
  e[5] = mma;
  var nma:int = tla + mma;
  var oma:int = 1859775393;
  var pma:int = nma + oma;
  var qma:int = e[17];
  var rma:int = 5;
  var sma:int = qma << rma;
  var tma:int = e[17];
  var uma:int = 27;
  var vma:int = tma >> uma;
  var wma:int = sma | vma;
  var xma:int = pma + wma;
  var yma:int = e[18];
  var zma:int = yma + xma;
  e[18] = zma;
  var ana:int = e[21];
  var bna:int = 30;
  var cna:int = ana << bna;
  var dna:int = e[21];
  var ena:int = 2;
  var fna:int = dna >> ena;
  var gna:int = cna | fna;
  e[21] = gna;
  var hna:int = e[17];
  var ina:int = e[21];
  var jna:int = hna ^ ina;
  var kna:int = e[20];
  var lna:int = jna ^ kna;
  var mna:int = e[3];
  var nna:int = e[14];
  var ona:int = mna ^ nna;
  var pna:int = e[8];
  var qna:int = ona ^ pna;
  var rna:int = e[6];
  var sna:int = qna ^ rna;
  var tna:int = 1;
  var una:int = sna << tna;
  var vna:int = e[3];
  var wna:int = e[14];
  var xna:int = vna ^ wna;
  var yna:int = e[8];
  var zna:int = xna ^ yna;
  var aoa:int = e[6];
  var boa:int = zna ^ aoa;
  var coa:int = 31;
  var doa:int = boa >> coa;
  var eoa:int = una | doa;
  e[6] = eoa;
  var foa:int = lna + eoa;
  var goa:int = 1859775393;
  var hoa:int = foa + goa;
  var ioa:int = e[18];
  var joa:int = 5;
  var koa:int = ioa << joa;
  var loa:int = e[18];
  var moa:int = 27;
  var noa:int = loa >> moa;
  var ooa:int = koa | noa;
  var poa:int = hoa + ooa;
  var qoa:int = e[19];
  var roa:int = qoa + poa;
  e[19] = roa;
  var soa:int = e[17];
  var toa:int = 30;
  var uoa:int = soa << toa;
  var voa:int = e[17];
  var woa:int = 2;
  var xoa:int = voa >> woa;
  var yoa:int = uoa | xoa;
  e[17] = yoa;
  var zoa:int = e[18];
  var apa:int = e[17];
  var bpa:int = zoa ^ apa;
  var cpa:int = e[21];
  var dpa:int = bpa ^ cpa;
  var epa:int = e[4];
  var fpa:int = e[15];
  var gpa:int = epa ^ fpa;
  var hpa:int = e[9];
  var ipa:int = gpa ^ hpa;
  var jpa:int = e[7];
  var kpa:int = ipa ^ jpa;
  var lpa:int = 1;
  var mpa:int = kpa << lpa;
  var npa:int = e[4];
  var opa:int = e[15];
  var ppa:int = npa ^ opa;
  var qpa:int = e[9];
  var rpa:int = ppa ^ qpa;
  var spa:int = e[7];
  var tpa:int = rpa ^ spa;
  var upa:int = 31;
  var vpa:int = tpa >> upa;
  var wpa:int = mpa | vpa;
  e[7] = wpa;
  var xpa:int = dpa + wpa;
  var ypa:int = 1859775393;
  var zpa:int = xpa + ypa;
  var aqa:int = e[19];
  var bqa:int = 5;
  var cqa:int = aqa << bqa;
  var dqa:int = e[19];
  var eqa:int = 27;
  var fqa:int = dqa >> eqa;
  var gqa:int = cqa | fqa;
  var hqa:int = zpa + gqa;
  var iqa:int = e[20];
  var jqa:int = iqa + hqa;
  e[20] = jqa;
  var kqa:int = e[18];
  var lqa:int = 30;
  var mqa:int = kqa << lqa;
  var nqa:int = e[18];
  var oqa:int = 2;
  var pqa:int = nqa >> oqa;
  var qqa:int = mqa | pqa;
  e[18] = qqa;
  var rqa:int = e[19];
  var sqa:int = e[18];
  var tqa:int = rqa ^ sqa;
  var uqa:int = e[17];
  var vqa:int = tqa ^ uqa;
  var wqa:int = e[5];
  var xqa:int = e[0];
  var yqa:int = wqa ^ xqa;
  var zqa:int = e[10];
  var ara:int = yqa ^ zqa;
  var bra:int = e[8];
  var cra:int = ara ^ bra;
  var dra:int = 1;
  var era:int = cra << dra;
  var fra:int = e[5];
  var gra:int = e[0];
  var hra:int = fra ^ gra;
  var ira:int = e[10];
  var jra:int = hra ^ ira;
  var kra:int = e[8];
  var lra:int = jra ^ kra;
  var mra:int = 31;
  var nra:int = lra >> mra;
  var ora:int = era | nra;
  e[8] = ora;
  var pra:int = vqa + ora;
  var qra:int = 1859775393;
  var rra:int = pra + qra;
  var sra:int = e[20];
  var tra:int = 5;
  var ura:int = sra << tra;
  var vra:int = e[20];
  var wra:int = 27;
  var xra:int = vra >> wra;
  var yra:int = ura | xra;
  var zra:int = rra + yra;
  var asa:int = e[21];
  var bsa:int = asa + zra;
  e[21] = bsa;
  var csa:int = e[19];
  var dsa:int = 30;
  var esa:int = csa << dsa;
  var fsa:int = e[19];
  var gsa:int = 2;
  var hsa:int = fsa >> gsa;
  var isa:int = esa | hsa;
  e[19] = isa;
  var jsa:int = e[20];
  var ksa:int = e[19];
  var lsa:int = jsa ^ ksa;
  var msa:int = e[18];
  var nsa:int = lsa ^ msa;
  var osa:int = e[6];
  var psa:int = e[1];
  var qsa:int = osa ^ psa;
  var rsa:int = e[11];
  var ssa:int = qsa ^ rsa;
  var tsa:int = e[9];
  var usa:int = ssa ^ tsa;
  var vsa:int = 1;
  var wsa:int = usa << vsa;
  var xsa:int = e[6];
  var ysa:int = e[1];
  var zsa:int = xsa ^ ysa;
  var ata:int = e[11];
  var bta:int = zsa ^ ata;
  var cta:int = e[9];
  var dta:int = bta ^ cta;
  var eta:int = 31;
  var fta:int = dta >> eta;
  var gta:int = wsa | fta;
  e[9] = gta;
  var hta:int = nsa + gta;
  var ita:int = 1859775393;
  var jta:int = hta + ita;
  var kta:int = e[21];
  var lta:int = 5;
  var mta:int = kta << lta;
  var nta:int = e[21];
  var ota:int = 27;
  var pta:int = nta >> ota;
  var qta:int = mta | pta;
  var rta:int = jta + qta;
  var sta:int = e[17];
  var tta:int = sta + rta;
  e[17] = tta;
  var uta:int = e[20];
  var vta:int = 30;
  var wta:int = uta << vta;
  var xta:int = e[20];
  var yta:int = 2;
  var zta:int = xta >> yta;
  var aua:int = wta | zta;
  e[20] = aua;
  var bua:int = e[21];
  var cua:int = e[20];
  var dua:int = bua ^ cua;
  var eua:int = e[19];
  var fua:int = dua ^ eua;
  var gua:int = e[7];
  var hua:int = e[2];
  var iua:int = gua ^ hua;
  var jua:int = e[12];
  var kua:int = iua ^ jua;
  var lua:int = e[10];
  var mua:int = kua ^ lua;
  var nua:int = 1;
  var oua:int = mua << nua;
  var pua:int = e[7];
  var qua:int = e[2];
  var rua:int = pua ^ qua;
  var sua:int = e[12];
  var tua:int = rua ^ sua;
  var uua:int = e[10];
  var vua:int = tua ^ uua;
  var wua:int = 31;
  var xua:int = vua >> wua;
  var yua:int = oua | xua;
  e[10] = yua;
  var zua:int = fua + yua;
  var ava:int = 1859775393;
  var bva:int = zua + ava;
  var cva:int = e[17];
  var dva:int = 5;
  var eva:int = cva << dva;
  var fva:int = e[17];
  var gva:int = 27;
  var hva:int = fva >> gva;
  var iva:int = eva | hva;
  var jva:int = bva + iva;
  var kva:int = e[18];
  var lva:int = kva + jva;
  e[18] = lva;
  var mva:int = e[21];
  var nva:int = 30;
  var ova:int = mva << nva;
  var pva:int = e[21];
  var qva:int = 2;
  var rva:int = pva >> qva;
  var sva:int = ova | rva;
  e[21] = sva;
  var tva:int = e[17];
  var uva:int = e[21];
  var vva:int = tva ^ uva;
  var wva:int = e[20];
  var xva:int = vva ^ wva;
  var yva:int = e[8];
  var zva:int = e[3];
  var awa:int = yva ^ zva;
  var bwa:int = e[13];
  var cwa:int = awa ^ bwa;
  var dwa:int = e[11];
  var ewa:int = cwa ^ dwa;
  var fwa:int = 1;
  var gwa:int = ewa << fwa;
  var hwa:int = e[8];
  var iwa:int = e[3];
  var jwa:int = hwa ^ iwa;
  var kwa:int = e[13];
  var lwa:int = jwa ^ kwa;
  var mwa:int = e[11];
  var nwa:int = lwa ^ mwa;
  var owa:int = 31;
  var pwa:int = nwa >> owa;
  var qwa:int = gwa | pwa;
  e[11] = qwa;
  var rwa:int = xva + qwa;
  var swa:int = 1859775393;
  var twa:int = rwa + swa;
  var uwa:int = e[18];
  var vwa:int = 5;
  var wwa:int = uwa << vwa;
  var xwa:int = e[18];
  var ywa:int = 27;
  var zwa:int = xwa >> ywa;
  var axa:int = wwa | zwa;
  var bxa:int = twa + axa;
  var cxa:int = e[19];
  var dxa:int = cxa + bxa;
  e[19] = dxa;
  var exa:int = e[17];
  var fxa:int = 30;
  var gxa:int = exa << fxa;
  var hxa:int = e[17];
  var ixa:int = 2;
  var jxa:int = hxa >> ixa;
  var kxa:int = gxa | jxa;
  e[17] = kxa;
  var lxa:int = e[18];
  var mxa:int = e[17];
  var nxa:int = lxa ^ mxa;
  var oxa:int = e[21];
  var pxa:int = nxa ^ oxa;
  var qxa:int = e[9];
  var rxa:int = e[4];
  var sxa:int = qxa ^ rxa;
  var txa:int = e[14];
  var uxa:int = sxa ^ txa;
  var vxa:int = e[12];
  var wxa:int = uxa ^ vxa;
  var xxa:int = 1;
  var yxa:int = wxa << xxa;
  var zxa:int = e[9];
  var aya:int = e[4];
  var bya:int = zxa ^ aya;
  var cya:int = e[14];
  var dya:int = bya ^ cya;
  var eya:int = e[12];
  var fya:int = dya ^ eya;
  var gya:int = 31;
  var hya:int = fya >> gya;
  var iya:int = yxa | hya;
  e[12] = iya;
  var jya:int = pxa + iya;
  var kya:int = 1859775393;
  var lya:int = jya + kya;
  var mya:int = e[19];
  var nya:int = 5;
  var oya:int = mya << nya;
  var pya:int = e[19];
  var qya:int = 27;
  var rya:int = pya >> qya;
  var sya:int = oya | rya;
  var tya:int = lya + sya;
  var uya:int = e[20];
  var vya:int = uya + tya;
  e[20] = vya;
  var wya:int = e[18];
  var xya:int = 30;
  var yya:int = wya << xya;
  var zya:int = e[18];
  var aza:int = 2;
  var bza:int = zya >> aza;
  var cza:int = yya | bza;
  e[18] = cza;
  var dza:int = e[19];
  var eza:int = e[18];
  var fza:int = dza ^ eza;
  var gza:int = e[17];
  var hza:int = fza ^ gza;
  var iza:int = e[10];
  var jza:int = e[5];
  var kza:int = iza ^ jza;
  var lza:int = e[15];
  var mza:int = kza ^ lza;
  var nza:int = e[13];
  var oza:int = mza ^ nza;
  var pza:int = 1;
  var qza:int = oza << pza;
  var rza:int = e[10];
  var sza:int = e[5];
  var tza:int = rza ^ sza;
  var uza:int = e[15];
  var vza:int = tza ^ uza;
  var wza:int = e[13];
  var xza:int = vza ^ wza;
  var yza:int = 31;
  var zza:int = xza >> yza;
  var aab:int = qza | zza;
  e[13] = aab;
  var bab:int = hza + aab;
  var cab:int = 1859775393;
  var dab:int = bab + cab;
  var eab:int = e[20];
  var fab:int = 5;
  var gab:int = eab << fab;
  var hab:int = e[20];
  var iab:int = 27;
  var jab:int = hab >> iab;
  var kab:int = gab | jab;
  var lab:int = dab + kab;
  var mab:int = e[21];
  var nab:int = mab + lab;
  e[21] = nab;
  var oab:int = e[19];
  var pab:int = 30;
  var qab:int = oab << pab;
  var rab:int = e[19];
  var sab:int = 2;
  var tab:int = rab >> sab;
  var uab:int = qab | tab;
  e[19] = uab;
  var vab:int = e[20];
  var wab:int = e[19];
  var xab:int = vab ^ wab;
  var yab:int = e[18];
  var zab:int = xab ^ yab;
  var abb:int = e[11];
  var bbb:int = e[6];
  var cbb:int = abb ^ bbb;
  var dbb:int = e[0];
  var ebb:int = cbb ^ dbb;
  var fbb:int = e[14];
  var gbb:int = ebb ^ fbb;
  var hbb:int = 1;
  var ibb:int = gbb << hbb;
  var jbb:int = e[11];
  var kbb:int = e[6];
  var lbb:int = jbb ^ kbb;
  var mbb:int = e[0];
  var nbb:int = lbb ^ mbb;
  var obb:int = e[14];
  var pbb:int = nbb ^ obb;
  var qbb:int = 31;
  var rbb:int = pbb >> qbb;
  var sbb:int = ibb | rbb;
  e[14] = sbb;
  var tbb:int = zab + sbb;
  var ubb:int = 1859775393;
  var vbb:int = tbb + ubb;
  var wbb:int = e[21];
  var xbb:int = 5;
  var ybb:int = wbb << xbb;
  var zbb:int = e[21];
  var acb:int = 27;
  var bcb:int = zbb >> acb;
  var ccb:int = ybb | bcb;
  var dcb:int = vbb + ccb;
  var ecb:int = e[17];
  var fcb:int = ecb + dcb;
  e[17] = fcb;
  var gcb:int = e[20];
  var hcb:int = 30;
  var icb:int = gcb << hcb;
  var jcb:int = e[20];
  var kcb:int = 2;
  var lcb:int = jcb >> kcb;
  var mcb:int = icb | lcb;
  e[20] = mcb;
  var ncb:int = e[21];
  var ocb:int = e[20];
  var pcb:int = ncb ^ ocb;
  var qcb:int = e[19];
  var rcb:int = pcb ^ qcb;
  var scb:int = e[12];
  var tcb:int = e[7];
  var ucb:int = scb ^ tcb;
  var vcb:int = e[1];
  var wcb:int = ucb ^ vcb;
  var xcb:int = e[15];
  var ycb:int = wcb ^ xcb;
  var zcb:int = 1;
  var adb:int = ycb << zcb;
  var bdb:int = e[12];
  var cdb:int = e[7];
  var ddb:int = bdb ^ cdb;
  var edb:int = e[1];
  var fdb:int = ddb ^ edb;
  var gdb:int = e[15];
  var hdb:int = fdb ^ gdb;
  var idb:int = 31;
  var jdb:int = hdb >> idb;
  var kdb:int = adb | jdb;
  e[15] = kdb;
  var ldb:int = rcb + kdb;
  var mdb:int = 1859775393;
  var ndb:int = ldb + mdb;
  var odb:int = e[17];
  var pdb:int = 5;
  var qdb:int = odb << pdb;
  var rdb:int = e[17];
  var sdb:int = 27;
  var tdb:int = rdb >> sdb;
  var udb:int = qdb | tdb;
  var vdb:int = ndb + udb;
  var wdb:int = e[18];
  var xdb:int = wdb + vdb;
  e[18] = xdb;
  var ydb:int = e[21];
  var zdb:int = 30;
  var aeb:int = ydb << zdb;
  var beb:int = e[21];
  var ceb:int = 2;
  var deb:int = beb >> ceb;
  var eeb:int = aeb | deb;
  e[21] = eeb;
  var feb:int = e[17];
  var geb:int = e[21];
  var heb:int = feb ^ geb;
  var ieb:int = e[20];
  var jeb:int = heb ^ ieb;
  var keb:int = e[13];
  var leb:int = e[8];
  var meb:int = keb ^ leb;
  var neb:int = e[2];
  var oeb:int = meb ^ neb;
  var peb:int = e[0];
  var qeb:int = oeb ^ peb;
  var reb:int = 1;
  var seb:int = qeb << reb;
  var teb:int = e[13];
  var ueb:int = e[8];
  var veb:int = teb ^ ueb;
  var web:int = e[2];
  var xeb:int = veb ^ web;
  var yeb:int = e[0];
  var zeb:int = xeb ^ yeb;
  var afb:int = 31;
  var bfb:int = zeb >> afb;
  var cfb:int = seb | bfb;
  e[0] = cfb;
  var dfb:int = jeb + cfb;
  var efb:int = 1859775393;
  var ffb:int = dfb + efb;
  var gfb:int = e[18];
  var hfb:int = 5;
  var ifb:int = gfb << hfb;
  var jfb:int = e[18];
  var kfb:int = 27;
  var lfb:int = jfb >> kfb;
  var mfb:int = ifb | lfb;
  var nfb:int = ffb + mfb;
  var ofb:int = e[19];
  var pfb:int = ofb + nfb;
  e[19] = pfb;
  var qfb:int = e[17];
  var rfb:int = 30;
  var sfb:int = qfb << rfb;
  var tfb:int = e[17];
  var ufb:int = 2;
  var vfb:int = tfb >> ufb;
  var wfb:int = sfb | vfb;
  e[17] = wfb;
  var xfb:int = e[18];
  var yfb:int = e[17];
  var zfb:int = xfb ^ yfb;
  var agb:int = e[21];
  var bgb:int = zfb ^ agb;
  var cgb:int = e[14];
  var dgb:int = e[9];
  var egb:int = cgb ^ dgb;
  var fgb:int = e[3];
  var ggb:int = egb ^ fgb;
  var hgb:int = e[1];
  var igb:int = ggb ^ hgb;
  var jgb:int = 1;
  var kgb:int = igb << jgb;
  var lgb:int = e[14];
  var mgb:int = e[9];
  var ngb:int = lgb ^ mgb;
  var ogb:int = e[3];
  var pgb:int = ngb ^ ogb;
  var qgb:int = e[1];
  var rgb:int = pgb ^ qgb;
  var sgb:int = 31;
  var tgb:int = rgb >> sgb;
  var ugb:int = kgb | tgb;
  e[1] = ugb;
  var vgb:int = bgb + ugb;
  var wgb:int = 1859775393;
  var xgb:int = vgb + wgb;
  var ygb:int = e[19];
  var zgb:int = 5;
  var ahb:int = ygb << zgb;
  var bhb:int = e[19];
  var chb:int = 27;
  var dhb:int = bhb >> chb;
  var ehb:int = ahb | dhb;
  var fhb:int = xgb + ehb;
  var ghb:int = e[20];
  var hhb:int = ghb + fhb;
  e[20] = hhb;
  var ihb:int = e[18];
  var jhb:int = 30;
  var khb:int = ihb << jhb;
  var lhb:int = e[18];
  var mhb:int = 2;
  var nhb:int = lhb >> mhb;
  var ohb:int = khb | nhb;
  e[18] = ohb;
  var phb:int = e[19];
  var qhb:int = e[18];
  var rhb:int = phb ^ qhb;
  var shb:int = e[17];
  var thb:int = rhb ^ shb;
  var uhb:int = e[15];
  var vhb:int = e[10];
  var whb:int = uhb ^ vhb;
  var xhb:int = e[4];
  var yhb:int = whb ^ xhb;
  var zhb:int = e[2];
  var aib:int = yhb ^ zhb;
  var bib:int = 1;
  var cib:int = aib << bib;
  var dib:int = e[15];
  var eib:int = e[10];
  var fib:int = dib ^ eib;
  var gib:int = e[4];
  var hib:int = fib ^ gib;
  var iib:int = e[2];
  var jib:int = hib ^ iib;
  var kib:int = 31;
  var lib:int = jib >> kib;
  var mib:int = cib | lib;
  e[2] = mib;
  var nib:int = thb + mib;
  var oib:int = 1859775393;
  var pib:int = nib + oib;
  var qib:int = e[20];
  var rib:int = 5;
  var sib:int = qib << rib;
  var tib:int = e[20];
  var uib:int = 27;
  var vib:int = tib >> uib;
  var wib:int = sib | vib;
  var xib:int = pib + wib;
  var yib:int = e[21];
  var zib:int = yib + xib;
  e[21] = zib;
  var ajb:int = e[19];
  var bjb:int = 30;
  var cjb:int = ajb << bjb;
  var djb:int = e[19];
  var ejb:int = 2;
  var fjb:int = djb >> ejb;
  var gjb:int = cjb | fjb;
  e[19] = gjb;
  var hjb:int = e[20];
  var ijb:int = e[19];
  var jjb:int = hjb ^ ijb;
  var kjb:int = e[18];
  var ljb:int = jjb ^ kjb;
  var mjb:int = e[0];
  var njb:int = e[11];
  var ojb:int = mjb ^ njb;
  var pjb:int = e[5];
  var qjb:int = ojb ^ pjb;
  var rjb:int = e[3];
  var sjb:int = qjb ^ rjb;
  var tjb:int = 1;
  var ujb:int = sjb << tjb;
  var vjb:int = e[0];
  var wjb:int = e[11];
  var xjb:int = vjb ^ wjb;
  var yjb:int = e[5];
  var zjb:int = xjb ^ yjb;
  var akb:int = e[3];
  var bkb:int = zjb ^ akb;
  var ckb:int = 31;
  var dkb:int = bkb >> ckb;
  var ekb:int = ujb | dkb;
  e[3] = ekb;
  var fkb:int = ljb + ekb;
  var gkb:int = 1859775393;
  var hkb:int = fkb + gkb;
  var ikb:int = e[21];
  var jkb:int = 5;
  var kkb:int = ikb << jkb;
  var lkb:int = e[21];
  var mkb:int = 27;
  var nkb:int = lkb >> mkb;
  var okb:int = kkb | nkb;
  var pkb:int = hkb + okb;
  var qkb:int = e[17];
  var rkb:int = qkb + pkb;
  e[17] = rkb;
  var skb:int = e[20];
  var tkb:int = 30;
  var ukb:int = skb << tkb;
  var vkb:int = e[20];
  var wkb:int = 2;
  var xkb:int = vkb >> wkb;
  var ykb:int = ukb | xkb;
  e[20] = ykb;
  var zkb:int = e[21];
  var alb:int = e[20];
  var blb:int = zkb ^ alb;
  var clb:int = e[19];
  var dlb:int = blb ^ clb;
  var elb:int = e[1];
  var flb:int = e[12];
  var glb:int = elb ^ flb;
  var hlb:int = e[6];
  var ilb:int = glb ^ hlb;
  var jlb:int = e[4];
  var klb:int = ilb ^ jlb;
  var llb:int = 1;
  var mlb:int = klb << llb;
  var nlb:int = e[1];
  var olb:int = e[12];
  var plb:int = nlb ^ olb;
  var qlb:int = e[6];
  var rlb:int = plb ^ qlb;
  var slb:int = e[4];
  var tlb:int = rlb ^ slb;
  var ulb:int = 31;
  var vlb:int = tlb >> ulb;
  var wlb:int = mlb | vlb;
  e[4] = wlb;
  var xlb:int = dlb + wlb;
  var ylb:int = 1859775393;
  var zlb:int = xlb + ylb;
  var amb:int = e[17];
  var bmb:int = 5;
  var cmb:int = amb << bmb;
  var dmb:int = e[17];
  var emb:int = 27;
  var fmb:int = dmb >> emb;
  var gmb:int = cmb | fmb;
  var hmb:int = zlb + gmb;
  var imb:int = e[18];
  var jmb:int = imb + hmb;
  e[18] = jmb;
  var kmb:int = e[21];
  var lmb:int = 30;
  var mmb:int = kmb << lmb;
  var nmb:int = e[21];
  var omb:int = 2;
  var pmb:int = nmb >> omb;
  var qmb:int = mmb | pmb;
  e[21] = qmb;
  var rmb:int = e[17];
  var smb:int = e[21];
  var tmb:int = rmb ^ smb;
  var umb:int = e[20];
  var vmb:int = tmb ^ umb;
  var wmb:int = e[2];
  var xmb:int = e[13];
  var ymb:int = wmb ^ xmb;
  var zmb:int = e[7];
  var anb:int = ymb ^ zmb;
  var bnb:int = e[5];
  var cnb:int = anb ^ bnb;
  var dnb:int = 1;
  var enb:int = cnb << dnb;
  var fnb:int = e[2];
  var gnb:int = e[13];
  var hnb:int = fnb ^ gnb;
  var inb:int = e[7];
  var jnb:int = hnb ^ inb;
  var knb:int = e[5];
  var lnb:int = jnb ^ knb;
  var mnb:int = 31;
  var nnb:int = lnb >> mnb;
  var onb:int = enb | nnb;
  e[5] = onb;
  var pnb:int = vmb + onb;
  var qnb:int = 1859775393;
  var rnb:int = pnb + qnb;
  var snb:int = e[18];
  var tnb:int = 5;
  var unb:int = snb << tnb;
  var vnb:int = e[18];
  var wnb:int = 27;
  var xnb:int = vnb >> wnb;
  var ynb:int = unb | xnb;
  var znb:int = rnb + ynb;
  var aob:int = e[19];
  var bob:int = aob + znb;
  e[19] = bob;
  var cob:int = e[17];
  var dob:int = 30;
  var eob:int = cob << dob;
  var fob:int = e[17];
  var gob:int = 2;
  var hob:int = fob >> gob;
  var iob:int = eob | hob;
  e[17] = iob;
  var job:int = e[18];
  var kob:int = e[17];
  var lob:int = job ^ kob;
  var mob:int = e[21];
  var nob:int = lob ^ mob;
  var oob:int = e[3];
  var pob:int = e[14];
  var qob:int = oob ^ pob;
  var rob:int = e[8];
  var sob:int = qob ^ rob;
  var tob:int = e[6];
  var uob:int = sob ^ tob;
  var vob:int = 1;
  var wob:int = uob << vob;
  var xob:int = e[3];
  var yob:int = e[14];
  var zob:int = xob ^ yob;
  var apb:int = e[8];
  var bpb:int = zob ^ apb;
  var cpb:int = e[6];
  var dpb:int = bpb ^ cpb;
  var epb:int = 31;
  var fpb:int = dpb >> epb;
  var gpb:int = wob | fpb;
  e[6] = gpb;
  var hpb:int = nob + gpb;
  var ipb:int = 1859775393;
  var jpb:int = hpb + ipb;
  var kpb:int = e[19];
  var lpb:int = 5;
  var mpb:int = kpb << lpb;
  var npb:int = e[19];
  var opb:int = 27;
  var ppb:int = npb >> opb;
  var qpb:int = mpb | ppb;
  var rpb:int = jpb + qpb;
  var spb:int = e[20];
  var tpb:int = spb + rpb;
  e[20] = tpb;
  var upb:int = e[18];
  var vpb:int = 30;
  var wpb:int = upb << vpb;
  var xpb:int = e[18];
  var ypb:int = 2;
  var zpb:int = xpb >> ypb;
  var aqb:int = wpb | zpb;
  e[18] = aqb;
  var bqb:int = e[19];
  var cqb:int = e[18];
  var dqb:int = bqb ^ cqb;
  var eqb:int = e[17];
  var fqb:int = dqb ^ eqb;
  var gqb:int = e[4];
  var hqb:int = e[15];
  var iqb:int = gqb ^ hqb;
  var jqb:int = e[9];
  var kqb:int = iqb ^ jqb;
  var lqb:int = e[7];
  var mqb:int = kqb ^ lqb;
  var nqb:int = 1;
  var oqb:int = mqb << nqb;
  var pqb:int = e[4];
  var qqb:int = e[15];
  var rqb:int = pqb ^ qqb;
  var sqb:int = e[9];
  var tqb:int = rqb ^ sqb;
  var uqb:int = e[7];
  var vqb:int = tqb ^ uqb;
  var wqb:int = 31;
  var xqb:int = vqb >> wqb;
  var yqb:int = oqb | xqb;
  e[7] = yqb;
  var zqb:int = fqb + yqb;
  var arb:int = 1859775393;
  var brb:int = zqb + arb;
  var crb:int = e[20];
  var drb:int = 5;
  var erb:int = crb << drb;
  var frb:int = e[20];
  var grb:int = 27;
  var hrb:int = frb >> grb;
  var irb:int = erb | hrb;
  var jrb:int = brb + irb;
  var krb:int = e[21];
  var lrb:int = krb + jrb;
  e[21] = lrb;
  var mrb:int = e[19];
  var nrb:int = 30;
  var orb:int = mrb << nrb;
  var prb:int = e[19];
  var qrb:int = 2;
  var rrb:int = prb >> qrb;
  var srb:int = orb | rrb;
  e[19] = srb;
  var trb:int = e[20];
  var urb:int = e[19];
  var vrb:int = trb | urb;
  var wrb:int = e[18];
  var xrb:int = vrb & wrb;
  var yrb:int = e[20];
  var zrb:int = e[19];
  var asb:int = yrb & zrb;
  var bsb:int = xrb | asb;
  var csb:int = e[5];
  var dsb:int = e[0];
  var esb:int = csb ^ dsb;
  var fsb:int = e[10];
  var gsb:int = esb ^ fsb;
  var hsb:int = e[8];
  var isb:int = gsb ^ hsb;
  var jsb:int = 1;
  var ksb:int = isb << jsb;
  var lsb:int = e[5];
  var msb:int = e[0];
  var nsb:int = lsb ^ msb;
  var osb:int = e[10];
  var psb:int = nsb ^ osb;
  var qsb:int = e[8];
  var rsb:int = psb ^ qsb;
  var ssb:int = 31;
  var tsb:int = rsb >> ssb;
  var usb:int = ksb | tsb;
  e[8] = usb;
  var vsb:int = bsb + usb;
  var wsb:int = -1894007588;
  var xsb:int = vsb + wsb;
  var ysb:int = e[21];
  var zsb:int = 5;
  var atb:int = ysb << zsb;
  var btb:int = e[21];
  var ctb:int = 27;
  var dtb:int = btb >> ctb;
  var etb:int = atb | dtb;
  var ftb:int = xsb + etb;
  var gtb:int = e[17];
  var htb:int = gtb + ftb;
  e[17] = htb;
  var itb:int = e[20];
  var jtb:int = 30;
  var ktb:int = itb << jtb;
  var ltb:int = e[20];
  var mtb:int = 2;
  var ntb:int = ltb >> mtb;
  var otb:int = ktb | ntb;
  e[20] = otb;
  var ptb:int = e[21];
  var qtb:int = e[20];
  var rtb:int = ptb | qtb;
  var stb:int = e[19];
  var ttb:int = rtb & stb;
  var utb:int = e[21];
  var vtb:int = e[20];
  var wtb:int = utb & vtb;
  var xtb:int = ttb | wtb;
  var ytb:int = e[6];
  var ztb:int = e[1];
  var aub:int = ytb ^ ztb;
  var bub:int = e[11];
  var cub:int = aub ^ bub;
  var dub:int = e[9];
  var eub:int = cub ^ dub;
  var fub:int = 1;
  var gub:int = eub << fub;
  var hub:int = e[6];
  var iub:int = e[1];
  var jub:int = hub ^ iub;
  var kub:int = e[11];
  var lub:int = jub ^ kub;
  var mub:int = e[9];
  var nub:int = lub ^ mub;
  var oub:int = 31;
  var pub:int = nub >> oub;
  var qub:int = gub | pub;
  e[9] = qub;
  var rub:int = xtb + qub;
  var sub:int = -1894007588;
  var tub:int = rub + sub;
  var uub:int = e[17];
  var vub:int = 5;
  var wub:int = uub << vub;
  var xub:int = e[17];
  var yub:int = 27;
  var zub:int = xub >> yub;
  var avb:int = wub | zub;
  var bvb:int = tub + avb;
  var cvb:int = e[18];
  var dvb:int = cvb + bvb;
  e[18] = dvb;
  var evb:int = e[21];
  var fvb:int = 30;
  var gvb:int = evb << fvb;
  var hvb:int = e[21];
  var ivb:int = 2;
  var jvb:int = hvb >> ivb;
  var kvb:int = gvb | jvb;
  e[21] = kvb;
  var lvb:int = e[17];
  var mvb:int = e[21];
  var nvb:int = lvb | mvb;
  var ovb:int = e[20];
  var pvb:int = nvb & ovb;
  var qvb:int = e[17];
  var rvb:int = e[21];
  var svb:int = qvb & rvb;
  var tvb:int = pvb | svb;
  var uvb:int = e[7];
  var vvb:int = e[2];
  var wvb:int = uvb ^ vvb;
  var xvb:int = e[12];
  var yvb:int = wvb ^ xvb;
  var zvb:int = e[10];
  var awb:int = yvb ^ zvb;
  var bwb:int = 1;
  var cwb:int = awb << bwb;
  var dwb:int = e[7];
  var ewb:int = e[2];
  var fwb:int = dwb ^ ewb;
  var gwb:int = e[12];
  var hwb:int = fwb ^ gwb;
  var iwb:int = e[10];
  var jwb:int = hwb ^ iwb;
  var kwb:int = 31;
  var lwb:int = jwb >> kwb;
  var mwb:int = cwb | lwb;
  e[10] = mwb;
  var nwb:int = tvb + mwb;
  var owb:int = -1894007588;
  var pwb:int = nwb + owb;
  var qwb:int = e[18];
  var rwb:int = 5;
  var swb:int = qwb << rwb;
  var twb:int = e[18];
  var uwb:int = 27;
  var vwb:int = twb >> uwb;
  var wwb:int = swb | vwb;
  var xwb:int = pwb + wwb;
  var ywb:int = e[19];
  var zwb:int = ywb + xwb;
  e[19] = zwb;
  var axb:int = e[17];
  var bxb:int = 30;
  var cxb:int = axb << bxb;
  var dxb:int = e[17];
  var exb:int = 2;
  var fxb:int = dxb >> exb;
  var gxb:int = cxb | fxb;
  e[17] = gxb;
  var hxb:int = e[18];
  var ixb:int = e[17];
  var jxb:int = hxb | ixb;
  var kxb:int = e[21];
  var lxb:int = jxb & kxb;
  var mxb:int = e[18];
  var nxb:int = e[17];
  var oxb:int = mxb & nxb;
  var pxb:int = lxb | oxb;
  var qxb:int = e[8];
  var rxb:int = e[3];
  var sxb:int = qxb ^ rxb;
  var txb:int = e[13];
  var uxb:int = sxb ^ txb;
  var vxb:int = e[11];
  var wxb:int = uxb ^ vxb;
  var xxb:int = 1;
  var yxb:int = wxb << xxb;
  var zxb:int = e[8];
  var ayb:int = e[3];
  var byb:int = zxb ^ ayb;
  var cyb:int = e[13];
  var dyb:int = byb ^ cyb;
  var eyb:int = e[11];
  var fyb:int = dyb ^ eyb;
  var gyb:int = 31;
  var hyb:int = fyb >> gyb;
  var iyb:int = yxb | hyb;
  e[11] = iyb;
  var jyb:int = pxb + iyb;
  var kyb:int = -1894007588;
  var lyb:int = jyb + kyb;
  var myb:int = e[19];
  var nyb:int = 5;
  var oyb:int = myb << nyb;
  var pyb:int = e[19];
  var qyb:int = 27;
  var ryb:int = pyb >> qyb;
  var syb:int = oyb | ryb;
  var tyb:int = lyb + syb;
  var uyb:int = e[20];
  var vyb:int = uyb + tyb;
  e[20] = vyb;
  var wyb:int = e[18];
  var xyb:int = 30;
  var yyb:int = wyb << xyb;
  var zyb:int = e[18];
  var azb:int = 2;
  var bzb:int = zyb >> azb;
  var czb:int = yyb | bzb;
  e[18] = czb;
  var dzb:int = e[19];
  var ezb:int = e[18];
  var fzb:int = dzb | ezb;
  var gzb:int = e[17];
  var hzb:int = fzb & gzb;
  var izb:int = e[19];
  var jzb:int = e[18];
  var kzb:int = izb & jzb;
  var lzb:int = hzb | kzb;
  var mzb:int = e[9];
  var nzb:int = e[4];
  var ozb:int = mzb ^ nzb;
  var pzb:int = e[14];
  var qzb:int = ozb ^ pzb;
  var rzb:int = e[12];
  var szb:int = qzb ^ rzb;
  var tzb:int = 1;
  var uzb:int = szb << tzb;
  var vzb:int = e[9];
  var wzb:int = e[4];
  var xzb:int = vzb ^ wzb;
  var yzb:int = e[14];
  var zzb:int = xzb ^ yzb;
  var aac:int = e[12];
  var bac:int = zzb ^ aac;
  var cac:int = 31;
  var dac:int = bac >> cac;
  var eac:int = uzb | dac;
  e[12] = eac;
  var fac:int = lzb + eac;
  var gac:int = -1894007588;
  var hac:int = fac + gac;
  var iac:int = e[20];
  var jac:int = 5;
  var kac:int = iac << jac;
  var lac:int = e[20];
  var mac:int = 27;
  var nac:int = lac >> mac;
  var oac:int = kac | nac;
  var pac:int = hac + oac;
  var qac:int = e[21];
  var rac:int = qac + pac;
  e[21] = rac;
  var sac:int = e[19];
  var tac:int = 30;
  var uac:int = sac << tac;
  var vac:int = e[19];
  var wac:int = 2;
  var xac:int = vac >> wac;
  var yac:int = uac | xac;
  e[19] = yac;
  var zac:int = e[20];
  var abc:int = e[19];
  var bbc:int = zac | abc;
  var cbc:int = e[18];
  var dbc:int = bbc & cbc;
  var ebc:int = e[20];
  var fbc:int = e[19];
  var gbc:int = ebc & fbc;
  var hbc:int = dbc | gbc;
  var ibc:int = e[10];
  var jbc:int = e[5];
  var kbc:int = ibc ^ jbc;
  var lbc:int = e[15];
  var mbc:int = kbc ^ lbc;
  var nbc:int = e[13];
  var obc:int = mbc ^ nbc;
  var pbc:int = 1;
  var qbc:int = obc << pbc;
  var rbc:int = e[10];
  var sbc:int = e[5];
  var tbc:int = rbc ^ sbc;
  var ubc:int = e[15];
  var vbc:int = tbc ^ ubc;
  var wbc:int = e[13];
  var xbc:int = vbc ^ wbc;
  var ybc:int = 31;
  var zbc:int = xbc >> ybc;
  var acc:int = qbc | zbc;
  e[13] = acc;
  var bcc:int = hbc + acc;
  var ccc:int = -1894007588;
  var dcc:int = bcc + ccc;
  var ecc:int = e[21];
  var fcc:int = 5;
  var gcc:int = ecc << fcc;
  var hcc:int = e[21];
  var icc:int = 27;
  var jcc:int = hcc >> icc;
  var kcc:int = gcc | jcc;
  var lcc:int = dcc + kcc;
  var mcc:int = e[17];
  var ncc:int = mcc + lcc;
  e[17] = ncc;
  var occ:int = e[20];
  var pcc:int = 30;
  var qcc:int = occ << pcc;
  var rcc:int = e[20];
  var scc:int = 2;
  var tcc:int = rcc >> scc;
  var ucc:int = qcc | tcc;
  e[20] = ucc;
  var vcc:int = e[21];
  var wcc:int = e[20];
  var xcc:int = vcc | wcc;
  var ycc:int = e[19];
  var zcc:int = xcc & ycc;
  var adc:int = e[21];
  var bdc:int = e[20];
  var cdc:int = adc & bdc;
  var ddc:int = zcc | cdc;
  var edc:int = e[11];
  var fdc:int = e[6];
  var gdc:int = edc ^ fdc;
  var hdc:int = e[0];
  var idc:int = gdc ^ hdc;
  var jdc:int = e[14];
  var kdc:int = idc ^ jdc;
  var ldc:int = 1;
  var mdc:int = kdc << ldc;
  var ndc:int = e[11];
  var odc:int = e[6];
  var pdc:int = ndc ^ odc;
  var qdc:int = e[0];
  var rdc:int = pdc ^ qdc;
  var sdc:int = e[14];
  var tdc:int = rdc ^ sdc;
  var udc:int = 31;
  var vdc:int = tdc >> udc;
  var wdc:int = mdc | vdc;
  e[14] = wdc;
  var xdc:int = ddc + wdc;
  var ydc:int = -1894007588;
  var zdc:int = xdc + ydc;
  var aec:int = e[17];
  var bec:int = 5;
  var cec:int = aec << bec;
  var dec:int = e[17];
  var eec:int = 27;
  var fec:int = dec >> eec;
  var gec:int = cec | fec;
  var hec:int = zdc + gec;
  var iec:int = e[18];
  var jec:int = iec + hec;
  e[18] = jec;
  var kec:int = e[21];
  var lec:int = 30;
  var mec:int = kec << lec;
  var nec:int = e[21];
  var oec:int = 2;
  var pec:int = nec >> oec;
  var qec:int = mec | pec;
  e[21] = qec;
  var rec:int = e[17];
  var sec:int = e[21];
  var tec:int = rec | sec;
  var uec:int = e[20];
  var vec:int = tec & uec;
  var wec:int = e[17];
  var xec:int = e[21];
  var yec:int = wec & xec;
  var zec:int = vec | yec;
  var afc:int = e[12];
  var bfc:int = e[7];
  var cfc:int = afc ^ bfc;
  var dfc:int = e[1];
  var efc:int = cfc ^ dfc;
  var ffc:int = e[15];
  var gfc:int = efc ^ ffc;
  var hfc:int = 1;
  var ifc:int = gfc << hfc;
  var jfc:int = e[12];
  var kfc:int = e[7];
  var lfc:int = jfc ^ kfc;
  var mfc:int = e[1];
  var nfc:int = lfc ^ mfc;
  var ofc:int = e[15];
  var pfc:int = nfc ^ ofc;
  var qfc:int = 31;
  var rfc:int = pfc >> qfc;
  var sfc:int = ifc | rfc;
  e[15] = sfc;
  var tfc:int = zec + sfc;
  var ufc:int = -1894007588;
  var vfc:int = tfc + ufc;
  var wfc:int = e[18];
  var xfc:int = 5;
  var yfc:int = wfc << xfc;
  var zfc:int = e[18];
  var agc:int = 27;
  var bgc:int = zfc >> agc;
  var cgc:int = yfc | bgc;
  var dgc:int = vfc + cgc;
  var egc:int = e[19];
  var fgc:int = egc + dgc;
  e[19] = fgc;
  var ggc:int = e[17];
  var hgc:int = 30;
  var igc:int = ggc << hgc;
  var jgc:int = e[17];
  var kgc:int = 2;
  var lgc:int = jgc >> kgc;
  var mgc:int = igc | lgc;
  e[17] = mgc;
  var ngc:int = e[18];
  var ogc:int = e[17];
  var pgc:int = ngc | ogc;
  var qgc:int = e[21];
  var rgc:int = pgc & qgc;
  var sgc:int = e[18];
  var tgc:int = e[17];
  var ugc:int = sgc & tgc;
  var vgc:int = rgc | ugc;
  var wgc:int = e[13];
  var xgc:int = e[8];
  var ygc:int = wgc ^ xgc;
  var zgc:int = e[2];
  var ahc:int = ygc ^ zgc;
  var bhc:int = e[0];
  var chc:int = ahc ^ bhc;
  var dhc:int = 1;
  var ehc:int = chc << dhc;
  var fhc:int = e[13];
  var ghc:int = e[8];
  var hhc:int = fhc ^ ghc;
  var ihc:int = e[2];
  var jhc:int = hhc ^ ihc;
  var khc:int = e[0];
  var lhc:int = jhc ^ khc;
  var mhc:int = 31;
  var nhc:int = lhc >> mhc;
  var ohc:int = ehc | nhc;
  e[0] = ohc;
  var phc:int = vgc + ohc;
  var qhc:int = -1894007588;
  var rhc:int = phc + qhc;
  var shc:int = e[19];
  var thc:int = 5;
  var uhc:int = shc << thc;
  var vhc:int = e[19];
  var whc:int = 27;
  var xhc:int = vhc >> whc;
  var yhc:int = uhc | xhc;
  var zhc:int = rhc + yhc;
  var aic:int = e[20];
  var bic:int = aic + zhc;
  e[20] = bic;
  var cic:int = e[18];
  var dic:int = 30;
  var eic:int = cic << dic;
  var fic:int = e[18];
  var gic:int = 2;
  var hic:int = fic >> gic;
  var iic:int = eic | hic;
  e[18] = iic;
  var jic:int = e[19];
  var kic:int = e[18];
  var lic:int = jic | kic;
  var mic:int = e[17];
  var nic:int = lic & mic;
  var oic:int = e[19];
  var pic:int = e[18];
  var qic:int = oic & pic;
  var ric:int = nic | qic;
  var sic:int = e[14];
  var tic:int = e[9];
  var uic:int = sic ^ tic;
  var vic:int = e[3];
  var wic:int = uic ^ vic;
  var xic:int = e[1];
  var yic:int = wic ^ xic;
  var zic:int = 1;
  var ajc:int = yic << zic;
  var bjc:int = e[14];
  var cjc:int = e[9];
  var djc:int = bjc ^ cjc;
  var ejc:int = e[3];
  var fjc:int = djc ^ ejc;
  var gjc:int = e[1];
  var hjc:int = fjc ^ gjc;
  var ijc:int = 31;
  var jjc:int = hjc >> ijc;
  var kjc:int = ajc | jjc;
  e[1] = kjc;
  var ljc:int = ric + kjc;
  var mjc:int = -1894007588;
  var njc:int = ljc + mjc;
  var ojc:int = e[20];
  var pjc:int = 5;
  var qjc:int = ojc << pjc;
  var rjc:int = e[20];
  var sjc:int = 27;
  var tjc:int = rjc >> sjc;
  var ujc:int = qjc | tjc;
  var vjc:int = njc + ujc;
  var wjc:int = e[21];
  var xjc:int = wjc + vjc;
  e[21] = xjc;
  var yjc:int = e[19];
  var zjc:int = 30;
  var akc:int = yjc << zjc;
  var bkc:int = e[19];
  var ckc:int = 2;
  var dkc:int = bkc >> ckc;
  var ekc:int = akc | dkc;
  e[19] = ekc;
  var fkc:int = e[20];
  var gkc:int = e[19];
  var hkc:int = fkc | gkc;
  var ikc:int = e[18];
  var jkc:int = hkc & ikc;
  var kkc:int = e[20];
  var lkc:int = e[19];
  var mkc:int = kkc & lkc;
  var nkc:int = jkc | mkc;
  var okc:int = e[15];
  var pkc:int = e[10];
  var qkc:int = okc ^ pkc;
  var rkc:int = e[4];
  var skc:int = qkc ^ rkc;
  var tkc:int = e[2];
  var ukc:int = skc ^ tkc;
  var vkc:int = 1;
  var wkc:int = ukc << vkc;
  var xkc:int = e[15];
  var ykc:int = e[10];
  var zkc:int = xkc ^ ykc;
  var alc:int = e[4];
  var blc:int = zkc ^ alc;
  var clc:int = e[2];
  var dlc:int = blc ^ clc;
  var elc:int = 31;
  var flc:int = dlc >> elc;
  var glc:int = wkc | flc;
  e[2] = glc;
  var hlc:int = nkc + glc;
  var ilc:int = -1894007588;
  var jlc:int = hlc + ilc;
  var klc:int = e[21];
  var llc:int = 5;
  var mlc:int = klc << llc;
  var nlc:int = e[21];
  var olc:int = 27;
  var plc:int = nlc >> olc;
  var qlc:int = mlc | plc;
  var rlc:int = jlc + qlc;
  var slc:int = e[17];
  var tlc:int = slc + rlc;
  e[17] = tlc;
  var ulc:int = e[20];
  var vlc:int = 30;
  var wlc:int = ulc << vlc;
  var xlc:int = e[20];
  var ylc:int = 2;
  var zlc:int = xlc >> ylc;
  var amc:int = wlc | zlc;
  e[20] = amc;
  var bmc:int = e[21];
  var cmc:int = e[20];
  var dmc:int = bmc | cmc;
  var emc:int = e[19];
  var fmc:int = dmc & emc;
  var gmc:int = e[21];
  var hmc:int = e[20];
  var imc:int = gmc & hmc;
  var jmc:int = fmc | imc;
  var kmc:int = e[0];
  var lmc:int = e[11];
  var mmc:int = kmc ^ lmc;
  var nmc:int = e[5];
  var omc:int = mmc ^ nmc;
  var pmc:int = e[3];
  var qmc:int = omc ^ pmc;
  var rmc:int = 1;
  var smc:int = qmc << rmc;
  var tmc:int = e[0];
  var umc:int = e[11];
  var vmc:int = tmc ^ umc;
  var wmc:int = e[5];
  var xmc:int = vmc ^ wmc;
  var ymc:int = e[3];
  var zmc:int = xmc ^ ymc;
  var anc:int = 31;
  var bnc:int = zmc >> anc;
  var cnc:int = smc | bnc;
  e[3] = cnc;
  var dnc:int = jmc + cnc;
  var enc:int = -1894007588;
  var fnc:int = dnc + enc;
  var gnc:int = e[17];
  var hnc:int = 5;
  var inc:int = gnc << hnc;
  var jnc:int = e[17];
  var knc:int = 27;
  var lnc:int = jnc >> knc;
  var mnc:int = inc | lnc;
  var nnc:int = fnc + mnc;
  var onc:int = e[18];
  var pnc:int = onc + nnc;
  e[18] = pnc;
  var qnc:int = e[21];
  var rnc:int = 30;
  var snc:int = qnc << rnc;
  var tnc:int = e[21];
  var unc:int = 2;
  var vnc:int = tnc >> unc;
  var wnc:int = snc | vnc;
  e[21] = wnc;
  var xnc:int = e[17];
  var ync:int = e[21];
  var znc:int = xnc | ync;
  var aoc:int = e[20];
  var boc:int = znc & aoc;
  var coc:int = e[17];
  var doc:int = e[21];
  var eoc:int = coc & doc;
  var foc:int = boc | eoc;
  var goc:int = e[1];
  var hoc:int = e[12];
  var ioc:int = goc ^ hoc;
  var joc:int = e[6];
  var koc:int = ioc ^ joc;
  var loc:int = e[4];
  var moc:int = koc ^ loc;
  var noc:int = 1;
  var ooc:int = moc << noc;
  var poc:int = e[1];
  var qoc:int = e[12];
  var roc:int = poc ^ qoc;
  var soc:int = e[6];
  var toc:int = roc ^ soc;
  var uoc:int = e[4];
  var voc:int = toc ^ uoc;
  var woc:int = 31;
  var xoc:int = voc >> woc;
  var yoc:int = ooc | xoc;
  e[4] = yoc;
  var zoc:int = foc + yoc;
  var apc:int = -1894007588;
  var bpc:int = zoc + apc;
  var cpc:int = e[18];
  var dpc:int = 5;
  var epc:int = cpc << dpc;
  var fpc:int = e[18];
  var gpc:int = 27;
  var hpc:int = fpc >> gpc;
  var ipc:int = epc | hpc;
  var jpc:int = bpc + ipc;
  var kpc:int = e[19];
  var lpc:int = kpc + jpc;
  e[19] = lpc;
  var mpc:int = e[17];
  var npc:int = 30;
  var opc:int = mpc << npc;
  var ppc:int = e[17];
  var qpc:int = 2;
  var rpc:int = ppc >> qpc;
  var spc:int = opc | rpc;
  e[17] = spc;
  var tpc:int = e[18];
  var upc:int = e[17];
  var vpc:int = tpc | upc;
  var wpc:int = e[21];
  var xpc:int = vpc & wpc;
  var ypc:int = e[18];
  var zpc:int = e[17];
  var aqc:int = ypc & zpc;
  var bqc:int = xpc | aqc;
  var cqc:int = e[2];
  var dqc:int = e[13];
  var eqc:int = cqc ^ dqc;
  var fqc:int = e[7];
  var gqc:int = eqc ^ fqc;
  var hqc:int = e[5];
  var iqc:int = gqc ^ hqc;
  var jqc:int = 1;
  var kqc:int = iqc << jqc;
  var lqc:int = e[2];
  var mqc:int = e[13];
  var nqc:int = lqc ^ mqc;
  var oqc:int = e[7];
  var pqc:int = nqc ^ oqc;
  var qqc:int = e[5];
  var rqc:int = pqc ^ qqc;
  var sqc:int = 31;
  var tqc:int = rqc >> sqc;
  var uqc:int = kqc | tqc;
  e[5] = uqc;
  var vqc:int = bqc + uqc;
  var wqc:int = -1894007588;
  var xqc:int = vqc + wqc;
  var yqc:int = e[19];
  var zqc:int = 5;
  var arc:int = yqc << zqc;
  var brc:int = e[19];
  var crc:int = 27;
  var drc:int = brc >> crc;
  var erc:int = arc | drc;
  var frc:int = xqc + erc;
  var grc:int = e[20];
  var hrc:int = grc + frc;
  e[20] = hrc;
  var irc:int = e[18];
  var jrc:int = 30;
  var krc:int = irc << jrc;
  var lrc:int = e[18];
  var mrc:int = 2;
  var nrc:int = lrc >> mrc;
  var orc:int = krc | nrc;
  e[18] = orc;
  var prc:int = e[19];
  var qrc:int = e[18];
  var rrc:int = prc | qrc;
  var src:int = e[17];
  var trc:int = rrc & src;
  var urc:int = e[19];
  var vrc:int = e[18];
  var wrc:int = urc & vrc;
  var xrc:int = trc | wrc;
  var yrc:int = e[3];
  var zrc:int = e[14];
  var asc:int = yrc ^ zrc;
  var bsc:int = e[8];
  var csc:int = asc ^ bsc;
  var dsc:int = e[6];
  var esc:int = csc ^ dsc;
  var fsc:int = 1;
  var gsc:int = esc << fsc;
  var hsc:int = e[3];
  var isc:int = e[14];
  var jsc:int = hsc ^ isc;
  var ksc:int = e[8];
  var lsc:int = jsc ^ ksc;
  var msc:int = e[6];
  var nsc:int = lsc ^ msc;
  var osc:int = 31;
  var psc:int = nsc >> osc;
  var qsc:int = gsc | psc;
  e[6] = qsc;
  var rsc:int = xrc + qsc;
  var ssc:int = -1894007588;
  var tsc:int = rsc + ssc;
  var usc:int = e[20];
  var vsc:int = 5;
  var wsc:int = usc << vsc;
  var xsc:int = e[20];
  var ysc:int = 27;
  var zsc:int = xsc >> ysc;
  var atc:int = wsc | zsc;
  var btc:int = tsc + atc;
  var ctc:int = e[21];
  var dtc:int = ctc + btc;
  e[21] = dtc;
  var etc:int = e[19];
  var ftc:int = 30;
  var gtc:int = etc << ftc;
  var htc:int = e[19];
  var itc:int = 2;
  var jtc:int = htc >> itc;
  var ktc:int = gtc | jtc;
  e[19] = ktc;
  var ltc:int = e[20];
  var mtc:int = e[19];
  var ntc:int = ltc | mtc;
  var otc:int = e[18];
  var ptc:int = ntc & otc;
  var qtc:int = e[20];
  var rtc:int = e[19];
  var stc:int = qtc & rtc;
  var ttc:int = ptc | stc;
  var utc:int = e[4];
  var vtc:int = e[15];
  var wtc:int = utc ^ vtc;
  var xtc:int = e[9];
  var ytc:int = wtc ^ xtc;
  var ztc:int = e[7];
  var auc:int = ytc ^ ztc;
  var buc:int = 1;
  var cuc:int = auc << buc;
  var duc:int = e[4];
  var euc:int = e[15];
  var fuc:int = duc ^ euc;
  var guc:int = e[9];
  var huc:int = fuc ^ guc;
  var iuc:int = e[7];
  var juc:int = huc ^ iuc;
  var kuc:int = 31;
  var luc:int = juc >> kuc;
  var muc:int = cuc | luc;
  e[7] = muc;
  var nuc:int = ttc + muc;
  var ouc:int = -1894007588;
  var puc:int = nuc + ouc;
  var quc:int = e[21];
  var ruc:int = 5;
  var suc:int = quc << ruc;
  var tuc:int = e[21];
  var uuc:int = 27;
  var vuc:int = tuc >> uuc;
  var wuc:int = suc | vuc;
  var xuc:int = puc + wuc;
  var yuc:int = e[17];
  var zuc:int = yuc + xuc;
  e[17] = zuc;
  var avc:int = e[20];
  var bvc:int = 30;
  var cvc:int = avc << bvc;
  var dvc:int = e[20];
  var evc:int = 2;
  var fvc:int = dvc >> evc;
  var gvc:int = cvc | fvc;
  e[20] = gvc;
  var hvc:int = e[21];
  var ivc:int = e[20];
  var jvc:int = hvc | ivc;
  var kvc:int = e[19];
  var lvc:int = jvc & kvc;
  var mvc:int = e[21];
  var nvc:int = e[20];
  var ovc:int = mvc & nvc;
  var pvc:int = lvc | ovc;
  var qvc:int = e[5];
  var rvc:int = e[0];
  var svc:int = qvc ^ rvc;
  var tvc:int = e[10];
  var uvc:int = svc ^ tvc;
  var vvc:int = e[8];
  var wvc:int = uvc ^ vvc;
  var xvc:int = 1;
  var yvc:int = wvc << xvc;
  var zvc:int = e[5];
  var awc:int = e[0];
  var bwc:int = zvc ^ awc;
  var cwc:int = e[10];
  var dwc:int = bwc ^ cwc;
  var ewc:int = e[8];
  var fwc:int = dwc ^ ewc;
  var gwc:int = 31;
  var hwc:int = fwc >> gwc;
  var iwc:int = yvc | hwc;
  e[8] = iwc;
  var jwc:int = pvc + iwc;
  var kwc:int = -1894007588;
  var lwc:int = jwc + kwc;
  var mwc:int = e[17];
  var nwc:int = 5;
  var owc:int = mwc << nwc;
  var pwc:int = e[17];
  var qwc:int = 27;
  var rwc:int = pwc >> qwc;
  var swc:int = owc | rwc;
  var twc:int = lwc + swc;
  var uwc:int = e[18];
  var vwc:int = uwc + twc;
  e[18] = vwc;
  var wwc:int = e[21];
  var xwc:int = 30;
  var ywc:int = wwc << xwc;
  var zwc:int = e[21];
  var axc:int = 2;
  var bxc:int = zwc >> axc;
  var cxc:int = ywc | bxc;
  e[21] = cxc;
  var dxc:int = e[17];
  var exc:int = e[21];
  var fxc:int = dxc | exc;
  var gxc:int = e[20];
  var hxc:int = fxc & gxc;
  var ixc:int = e[17];
  var jxc:int = e[21];
  var kxc:int = ixc & jxc;
  var lxc:int = hxc | kxc;
  var mxc:int = e[6];
  var nxc:int = e[1];
  var oxc:int = mxc ^ nxc;
  var pxc:int = e[11];
  var qxc:int = oxc ^ pxc;
  var rxc:int = e[9];
  var sxc:int = qxc ^ rxc;
  var txc:int = 1;
  var uxc:int = sxc << txc;
  var vxc:int = e[6];
  var wxc:int = e[1];
  var xxc:int = vxc ^ wxc;
  var yxc:int = e[11];
  var zxc:int = xxc ^ yxc;
  var ayc:int = e[9];
  var byc:int = zxc ^ ayc;
  var cyc:int = 31;
  var dyc:int = byc >> cyc;
  var eyc:int = uxc | dyc;
  e[9] = eyc;
  var fyc:int = lxc + eyc;
  var gyc:int = -1894007588;
  var hyc:int = fyc + gyc;
  var iyc:int = e[18];
  var jyc:int = 5;
  var kyc:int = iyc << jyc;
  var lyc:int = e[18];
  var myc:int = 27;
  var nyc:int = lyc >> myc;
  var oyc:int = kyc | nyc;
  var pyc:int = hyc + oyc;
  var qyc:int = e[19];
  var ryc:int = qyc + pyc;
  e[19] = ryc;
  var syc:int = e[17];
  var tyc:int = 30;
  var uyc:int = syc << tyc;
  var vyc:int = e[17];
  var wyc:int = 2;
  var xyc:int = vyc >> wyc;
  var yyc:int = uyc | xyc;
  e[17] = yyc;
  var zyc:int = e[18];
  var azc:int = e[17];
  var bzc:int = zyc | azc;
  var czc:int = e[21];
  var dzc:int = bzc & czc;
  var ezc:int = e[18];
  var fzc:int = e[17];
  var gzc:int = ezc & fzc;
  var hzc:int = dzc | gzc;
  var izc:int = e[7];
  var jzc:int = e[2];
  var kzc:int = izc ^ jzc;
  var lzc:int = e[12];
  var mzc:int = kzc ^ lzc;
  var nzc:int = e[10];
  var ozc:int = mzc ^ nzc;
  var pzc:int = 1;
  var qzc:int = ozc << pzc;
  var rzc:int = e[7];
  var szc:int = e[2];
  var tzc:int = rzc ^ szc;
  var uzc:int = e[12];
  var vzc:int = tzc ^ uzc;
  var wzc:int = e[10];
  var xzc:int = vzc ^ wzc;
  var yzc:int = 31;
  var zzc:int = xzc >> yzc;
  var aad:int = qzc | zzc;
  e[10] = aad;
  var bad:int = hzc + aad;
  var cad:int = -1894007588;
  var dad:int = bad + cad;
  var ead:int = e[19];
  var fad:int = 5;
  var gad:int = ead << fad;
  var had:int = e[19];
  var iad:int = 27;
  var jad:int = had >> iad;
  var kad:int = gad | jad;
  var lad:int = dad + kad;
  var mad:int = e[20];
  var nad:int = mad + lad;
  e[20] = nad;
  var oad:int = e[18];
  var pad:int = 30;
  var qad:int = oad << pad;
  var rad:int = e[18];
  var sad:int = 2;
  var tad:int = rad >> sad;
  var uad:int = qad | tad;
  e[18] = uad;
  var vad:int = e[19];
  var wad:int = e[18];
  var xad:int = vad | wad;
  var yad:int = e[17];
  var zad:int = xad & yad;
  var abd:int = e[19];
  var bbd:int = e[18];
  var cbd:int = abd & bbd;
  var dbd:int = zad | cbd;
  var ebd:int = e[8];
  var fbd:int = e[3];
  var gbd:int = ebd ^ fbd;
  var hbd:int = e[13];
  var ibd:int = gbd ^ hbd;
  var jbd:int = e[11];
  var kbd:int = ibd ^ jbd;
  var lbd:int = 1;
  var mbd:int = kbd << lbd;
  var nbd:int = e[8];
  var obd:int = e[3];
  var pbd:int = nbd ^ obd;
  var qbd:int = e[13];
  var rbd:int = pbd ^ qbd;
  var sbd:int = e[11];
  var tbd:int = rbd ^ sbd;
  var ubd:int = 31;
  var vbd:int = tbd >> ubd;
  var wbd:int = mbd | vbd;
  e[11] = wbd;
  var xbd:int = dbd + wbd;
  var ybd:int = -1894007588;
  var zbd:int = xbd + ybd;
  var acd:int = e[20];
  var bcd:int = 5;
  var ccd:int = acd << bcd;
  var dcd:int = e[20];
  var ecd:int = 27;
  var fcd:int = dcd >> ecd;
  var gcd:int = ccd | fcd;
  var hcd:int = zbd + gcd;
  var icd:int = e[21];
  var jcd:int = icd + hcd;
  e[21] = jcd;
  var kcd:int = e[19];
  var lcd:int = 30;
  var mcd:int = kcd << lcd;
  var ncd:int = e[19];
  var ocd:int = 2;
  var pcd:int = ncd >> ocd;
  var qcd:int = mcd | pcd;
  e[19] = qcd;
  var rcd:int = e[20];
  var scd:int = e[19];
  var tcd:int = rcd ^ scd;
  var ucd:int = e[18];
  var vcd:int = tcd ^ ucd;
  var wcd:int = e[9];
  var xcd:int = e[4];
  var ycd:int = wcd ^ xcd;
  var zcd:int = e[14];
  var add:int = ycd ^ zcd;
  var bdd:int = e[12];
  var cdd:int = add ^ bdd;
  var ddd:int = 1;
  var edd:int = cdd << ddd;
  var fdd:int = e[9];
  var gdd:int = e[4];
  var hdd:int = fdd ^ gdd;
  var idd:int = e[14];
  var jdd:int = hdd ^ idd;
  var kdd:int = e[12];
  var ldd:int = jdd ^ kdd;
  var mdd:int = 31;
  var ndd:int = ldd >> mdd;
  var odd:int = edd | ndd;
  e[12] = odd;
  var pdd:int = vcd + odd;
  var qdd:int = -899497514;
  var rdd:int = pdd + qdd;
  var sdd:int = e[21];
  var tdd:int = 5;
  var udd:int = sdd << tdd;
  var vdd:int = e[21];
  var wdd:int = 27;
  var xdd:int = vdd >> wdd;
  var ydd:int = udd | xdd;
  var zdd:int = rdd + ydd;
  var aed:int = e[17];
  var bed:int = aed + zdd;
  e[17] = bed;
  var ced:int = e[20];
  var ded:int = 30;
  var eed:int = ced << ded;
  var fed:int = e[20];
  var ged:int = 2;
  var hed:int = fed >> ged;
  var ied:int = eed | hed;
  e[20] = ied;
  var jed:int = e[21];
  var ked:int = e[20];
  var led:int = jed ^ ked;
  var med:int = e[19];
  var ned:int = led ^ med;
  var oed:int = e[10];
  var ped:int = e[5];
  var qed:int = oed ^ ped;
  var red:int = e[15];
  var sed:int = qed ^ red;
  var ted:int = e[13];
  var ued:int = sed ^ ted;
  var ved:int = 1;
  var wed:int = ued << ved;
  var xed:int = e[10];
  var yed:int = e[5];
  var zed:int = xed ^ yed;
  var afd:int = e[15];
  var bfd:int = zed ^ afd;
  var cfd:int = e[13];
  var dfd:int = bfd ^ cfd;
  var efd:int = 31;
  var ffd:int = dfd >> efd;
  var gfd:int = wed | ffd;
  e[13] = gfd;
  var hfd:int = ned + gfd;
  var ifd:int = -899497514;
  var jfd:int = hfd + ifd;
  var kfd:int = e[17];
  var lfd:int = 5;
  var mfd:int = kfd << lfd;
  var nfd:int = e[17];
  var ofd:int = 27;
  var pfd:int = nfd >> ofd;
  var qfd:int = mfd | pfd;
  var rfd:int = jfd + qfd;
  var sfd:int = e[18];
  var tfd:int = sfd + rfd;
  e[18] = tfd;
  var ufd:int = e[21];
  var vfd:int = 30;
  var wfd:int = ufd << vfd;
  var xfd:int = e[21];
  var yfd:int = 2;
  var zfd:int = xfd >> yfd;
  var agd:int = wfd | zfd;
  e[21] = agd;
  var bgd:int = e[17];
  var cgd:int = e[21];
  var dgd:int = bgd ^ cgd;
  var egd:int = e[20];
  var fgd:int = dgd ^ egd;
  var ggd:int = e[11];
  var hgd:int = e[6];
  var igd:int = ggd ^ hgd;
  var jgd:int = e[0];
  var kgd:int = igd ^ jgd;
  var lgd:int = e[14];
  var mgd:int = kgd ^ lgd;
  var ngd:int = 1;
  var ogd:int = mgd << ngd;
  var pgd:int = e[11];
  var qgd:int = e[6];
  var rgd:int = pgd ^ qgd;
  var sgd:int = e[0];
  var tgd:int = rgd ^ sgd;
  var ugd:int = e[14];
  var vgd:int = tgd ^ ugd;
  var wgd:int = 31;
  var xgd:int = vgd >> wgd;
  var ygd:int = ogd | xgd;
  e[14] = ygd;
  var zgd:int = fgd + ygd;
  var ahd:int = -899497514;
  var bhd:int = zgd + ahd;
  var chd:int = e[18];
  var dhd:int = 5;
  var ehd:int = chd << dhd;
  var fhd:int = e[18];
  var ghd:int = 27;
  var hhd:int = fhd >> ghd;
  var ihd:int = ehd | hhd;
  var jhd:int = bhd + ihd;
  var khd:int = e[19];
  var lhd:int = khd + jhd;
  e[19] = lhd;
  var mhd:int = e[17];
  var nhd:int = 30;
  var ohd:int = mhd << nhd;
  var phd:int = e[17];
  var qhd:int = 2;
  var rhd:int = phd >> qhd;
  var shd:int = ohd | rhd;
  e[17] = shd;
  var thd:int = e[18];
  var uhd:int = e[17];
  var vhd:int = thd ^ uhd;
  var whd:int = e[21];
  var xhd:int = vhd ^ whd;
  var yhd:int = e[12];
  var zhd:int = e[7];
  var aid:int = yhd ^ zhd;
  var bid:int = e[1];
  var cid:int = aid ^ bid;
  var did:int = e[15];
  var eid:int = cid ^ did;
  var fid:int = 1;
  var gid:int = eid << fid;
  var hid:int = e[12];
  var iid:int = e[7];
  var jid:int = hid ^ iid;
  var kid:int = e[1];
  var lid:int = jid ^ kid;
  var mid:int = e[15];
  var nid:int = lid ^ mid;
  var oid:int = 31;
  var pid:int = nid >> oid;
  var qid:int = gid | pid;
  e[15] = qid;
  var rid:int = xhd + qid;
  var sid:int = -899497514;
  var tid:int = rid + sid;
  var uid:int = e[19];
  var vid:int = 5;
  var wid:int = uid << vid;
  var xid:int = e[19];
  var yid:int = 27;
  var zid:int = xid >> yid;
  var ajd:int = wid | zid;
  var bjd:int = tid + ajd;
  var cjd:int = e[20];
  var djd:int = cjd + bjd;
  e[20] = djd;
  var ejd:int = e[18];
  var fjd:int = 30;
  var gjd:int = ejd << fjd;
  var hjd:int = e[18];
  var ijd:int = 2;
  var jjd:int = hjd >> ijd;
  var kjd:int = gjd | jjd;
  e[18] = kjd;
  var ljd:int = e[19];
  var mjd:int = e[18];
  var njd:int = ljd ^ mjd;
  var ojd:int = e[17];
  var pjd:int = njd ^ ojd;
  var qjd:int = e[13];
  var rjd:int = e[8];
  var sjd:int = qjd ^ rjd;
  var tjd:int = e[2];
  var ujd:int = sjd ^ tjd;
  var vjd:int = e[0];
  var wjd:int = ujd ^ vjd;
  var xjd:int = 1;
  var yjd:int = wjd << xjd;
  var zjd:int = e[13];
  var akd:int = e[8];
  var bkd:int = zjd ^ akd;
  var ckd:int = e[2];
  var dkd:int = bkd ^ ckd;
  var ekd:int = e[0];
  var fkd:int = dkd ^ ekd;
  var gkd:int = 31;
  var hkd:int = fkd >> gkd;
  var ikd:int = yjd | hkd;
  e[0] = ikd;
  var jkd:int = pjd + ikd;
  var kkd:int = -899497514;
  var lkd:int = jkd + kkd;
  var mkd:int = e[20];
  var nkd:int = 5;
  var okd:int = mkd << nkd;
  var pkd:int = e[20];
  var qkd:int = 27;
  var rkd:int = pkd >> qkd;
  var skd:int = okd | rkd;
  var tkd:int = lkd + skd;
  var ukd:int = e[21];
  var vkd:int = ukd + tkd;
  e[21] = vkd;
  var wkd:int = e[19];
  var xkd:int = 30;
  var ykd:int = wkd << xkd;
  var zkd:int = e[19];
  var ald:int = 2;
  var bld:int = zkd >> ald;
  var cld:int = ykd | bld;
  e[19] = cld;
  var dld:int = e[20];
  var eld:int = e[19];
  var fld:int = dld ^ eld;
  var gld:int = e[18];
  var hld:int = fld ^ gld;
  var ild:int = e[14];
  var jld:int = e[9];
  var kld:int = ild ^ jld;
  var lld:int = e[3];
  var mld:int = kld ^ lld;
  var nld:int = e[1];
  var old:int = mld ^ nld;
  var pld:int = 1;
  var qld:int = old << pld;
  var rld:int = e[14];
  var sld:int = e[9];
  var tld:int = rld ^ sld;
  var uld:int = e[3];
  var vld:int = tld ^ uld;
  var wld:int = e[1];
  var xld:int = vld ^ wld;
  var yld:int = 31;
  var zld:int = xld >> yld;
  var amd:int = qld | zld;
  e[1] = amd;
  var bmd:int = hld + amd;
  var cmd:int = -899497514;
  var dmd:int = bmd + cmd;
  var emd:int = e[21];
  var fmd:int = 5;
  var gmd:int = emd << fmd;
  var hmd:int = e[21];
  var imd:int = 27;
  var jmd:int = hmd >> imd;
  var kmd:int = gmd | jmd;
  var lmd:int = dmd + kmd;
  var mmd:int = e[17];
  var nmd:int = mmd + lmd;
  e[17] = nmd;
  var omd:int = e[20];
  var pmd:int = 30;
  var qmd:int = omd << pmd;
  var rmd:int = e[20];
  var smd:int = 2;
  var tmd:int = rmd >> smd;
  var umd:int = qmd | tmd;
  e[20] = umd;
  var vmd:int = e[21];
  var wmd:int = e[20];
  var xmd:int = vmd ^ wmd;
  var ymd:int = e[19];
  var zmd:int = xmd ^ ymd;
  var and:int = e[15];
  var bnd:int = e[10];
  var cnd:int = and ^ bnd;
  var dnd:int = e[4];
  var end:int = cnd ^ dnd;
  var fnd:int = e[2];
  var gnd:int = end ^ fnd;
  var hnd:int = 1;
  var ind:int = gnd << hnd;
  var jnd:int = e[15];
  var knd:int = e[10];
  var lnd:int = jnd ^ knd;
  var mnd:int = e[4];
  var nnd:int = lnd ^ mnd;
  var ond:int = e[2];
  var pnd:int = nnd ^ ond;
  var qnd:int = 31;
  var rnd:int = pnd >> qnd;
  var snd:int = ind | rnd;
  e[2] = snd;
  var tnd:int = zmd + snd;
  var und:int = -899497514;
  var vnd:int = tnd + und;
  var wnd:int = e[17];
  var xnd:int = 5;
  var ynd:int = wnd << xnd;
  var znd:int = e[17];
  var aod:int = 27;
  var bod:int = znd >> aod;
  var cod:int = ynd | bod;
  var dod:int = vnd + cod;
  var eod:int = e[18];
  var fod:int = eod + dod;
  e[18] = fod;
  var god:int = e[21];
  var hod:int = 30;
  var iod:int = god << hod;
  var jod:int = e[21];
  var kod:int = 2;
  var lod:int = jod >> kod;
  var mod:int = iod | lod;
  e[21] = mod;
  var nod:int = e[17];
  var ood:int = e[21];
  var pod:int = nod ^ ood;
  var qod:int = e[20];
  var rod:int = pod ^ qod;
  var sod:int = e[0];
  var tod:int = e[11];
  var uod:int = sod ^ tod;
  var vod:int = e[5];
  var wod:int = uod ^ vod;
  var xod:int = e[3];
  var yod:int = wod ^ xod;
  var zod:int = 1;
  var apd:int = yod << zod;
  var bpd:int = e[0];
  var cpd:int = e[11];
  var dpd:int = bpd ^ cpd;
  var epd:int = e[5];
  var fpd:int = dpd ^ epd;
  var gpd:int = e[3];
  var hpd:int = fpd ^ gpd;
  var ipd:int = 31;
  var jpd:int = hpd >> ipd;
  var kpd:int = apd | jpd;
  e[3] = kpd;
  var lpd:int = rod + kpd;
  var mpd:int = -899497514;
  var npd:int = lpd + mpd;
  var opd:int = e[18];
  var ppd:int = 5;
  var qpd:int = opd << ppd;
  var rpd:int = e[18];
  var spd:int = 27;
  var tpd:int = rpd >> spd;
  var upd:int = qpd | tpd;
  var vpd:int = npd + upd;
  var wpd:int = e[19];
  var xpd:int = wpd + vpd;
  e[19] = xpd;
  var ypd:int = e[17];
  var zpd:int = 30;
  var aqd:int = ypd << zpd;
  var bqd:int = e[17];
  var cqd:int = 2;
  var dqd:int = bqd >> cqd;
  var eqd:int = aqd | dqd;
  e[17] = eqd;
  var fqd:int = e[18];
  var gqd:int = e[17];
  var hqd:int = fqd ^ gqd;
  var iqd:int = e[21];
  var jqd:int = hqd ^ iqd;
  var kqd:int = e[1];
  var lqd:int = e[12];
  var mqd:int = kqd ^ lqd;
  var nqd:int = e[6];
  var oqd:int = mqd ^ nqd;
  var pqd:int = e[4];
  var qqd:int = oqd ^ pqd;
  var rqd:int = 1;
  var sqd:int = qqd << rqd;
  var tqd:int = e[1];
  var uqd:int = e[12];
  var vqd:int = tqd ^ uqd;
  var wqd:int = e[6];
  var xqd:int = vqd ^ wqd;
  var yqd:int = e[4];
  var zqd:int = xqd ^ yqd;
  var ard:int = 31;
  var brd:int = zqd >> ard;
  var crd:int = sqd | brd;
  e[4] = crd;
  var drd:int = jqd + crd;
  var erd:int = -899497514;
  var frd:int = drd + erd;
  var grd:int = e[19];
  var hrd:int = 5;
  var ird:int = grd << hrd;
  var jrd:int = e[19];
  var krd:int = 27;
  var lrd:int = jrd >> krd;
  var mrd:int = ird | lrd;
  var nrd:int = frd + mrd;
  var ord:int = e[20];
  var prd:int = ord + nrd;
  e[20] = prd;
  var qrd:int = e[18];
  var rrd:int = 30;
  var srd:int = qrd << rrd;
  var trd:int = e[18];
  var urd:int = 2;
  var vrd:int = trd >> urd;
  var wrd:int = srd | vrd;
  e[18] = wrd;
  var xrd:int = e[19];
  var yrd:int = e[18];
  var zrd:int = xrd ^ yrd;
  var asd:int = e[17];
  var bsd:int = zrd ^ asd;
  var csd:int = e[2];
  var dsd:int = e[13];
  var esd:int = csd ^ dsd;
  var fsd:int = e[7];
  var gsd:int = esd ^ fsd;
  var hsd:int = e[5];
  var isd:int = gsd ^ hsd;
  var jsd:int = 1;
  var ksd:int = isd << jsd;
  var lsd:int = e[2];
  var msd:int = e[13];
  var nsd:int = lsd ^ msd;
  var osd:int = e[7];
  var psd:int = nsd ^ osd;
  var qsd:int = e[5];
  var rsd:int = psd ^ qsd;
  var ssd:int = 31;
  var tsd:int = rsd >> ssd;
  var usd:int = ksd | tsd;
  e[5] = usd;
  var vsd:int = bsd + usd;
  var wsd:int = -899497514;
  var xsd:int = vsd + wsd;
  var ysd:int = e[20];
  var zsd:int = 5;
  var atd:int = ysd << zsd;
  var btd:int = e[20];
  var ctd:int = 27;
  var dtd:int = btd >> ctd;
  var etd:int = atd | dtd;
  var ftd:int = xsd + etd;
  var gtd:int = e[21];
  var htd:int = gtd + ftd;
  e[21] = htd;
  var itd:int = e[19];
  var jtd:int = 30;
  var ktd:int = itd << jtd;
  var ltd:int = e[19];
  var mtd:int = 2;
  var ntd:int = ltd >> mtd;
  var otd:int = ktd | ntd;
  e[19] = otd;
  var ptd:int = e[20];
  var qtd:int = e[19];
  var rtd:int = ptd ^ qtd;
  var std:int = e[18];
  var ttd:int = rtd ^ std;
  var utd:int = e[3];
  var vtd:int = e[14];
  var wtd:int = utd ^ vtd;
  var xtd:int = e[8];
  var ytd:int = wtd ^ xtd;
  var ztd:int = e[6];
  var aud:int = ytd ^ ztd;
  var bud:int = 1;
  var cud:int = aud << bud;
  var dud:int = e[3];
  var eud:int = e[14];
  var fud:int = dud ^ eud;
  var gud:int = e[8];
  var hud:int = fud ^ gud;
  var iud:int = e[6];
  var jud:int = hud ^ iud;
  var kud:int = 31;
  var lud:int = jud >> kud;
  var mud:int = cud | lud;
  e[6] = mud;
  var nud:int = ttd + mud;
  var oud:int = -899497514;
  var pud:int = nud + oud;
  var qud:int = e[21];
  var rud:int = 5;
  var sud:int = qud << rud;
  var tud:int = e[21];
  var uud:int = 27;
  var vud:int = tud >> uud;
  var wud:int = sud | vud;
  var xud:int = pud + wud;
  var yud:int = e[17];
  var zud:int = yud + xud;
  e[17] = zud;
  var avd:int = e[20];
  var bvd:int = 30;
  var cvd:int = avd << bvd;
  var dvd:int = e[20];
  var evd:int = 2;
  var fvd:int = dvd >> evd;
  var gvd:int = cvd | fvd;
  e[20] = gvd;
  var hvd:int = e[21];
  var ivd:int = e[20];
  var jvd:int = hvd ^ ivd;
  var kvd:int = e[19];
  var lvd:int = jvd ^ kvd;
  var mvd:int = e[4];
  var nvd:int = e[15];
  var ovd:int = mvd ^ nvd;
  var pvd:int = e[9];
  var qvd:int = ovd ^ pvd;
  var rvd:int = e[7];
  var svd:int = qvd ^ rvd;
  var tvd:int = 1;
  var uvd:int = svd << tvd;
  var vvd:int = e[4];
  var wvd:int = e[15];
  var xvd:int = vvd ^ wvd;
  var yvd:int = e[9];
  var zvd:int = xvd ^ yvd;
  var awd:int = e[7];
  var bwd:int = zvd ^ awd;
  var cwd:int = 31;
  var dwd:int = bwd >> cwd;
  var ewd:int = uvd | dwd;
  e[7] = ewd;
  var fwd:int = lvd + ewd;
  var gwd:int = -899497514;
  var hwd:int = fwd + gwd;
  var iwd:int = e[17];
  var jwd:int = 5;
  var kwd:int = iwd << jwd;
  var lwd:int = e[17];
  var mwd:int = 27;
  var nwd:int = lwd >> mwd;
  var owd:int = kwd | nwd;
  var pwd:int = hwd + owd;
  var qwd:int = e[18];
  var rwd:int = qwd + pwd;
  e[18] = rwd;
  var swd:int = e[21];
  var twd:int = 30;
  var uwd:int = swd << twd;
  var vwd:int = e[21];
  var wwd:int = 2;
  var xwd:int = vwd >> wwd;
  var ywd:int = uwd | xwd;
  e[21] = ywd;
  var zwd:int = e[17];
  var axd:int = e[21];
  var bxd:int = zwd ^ axd;
  var cxd:int = e[20];
  var dxd:int = bxd ^ cxd;
  var exd:int = e[5];
  var fxd:int = e[0];
  var gxd:int = exd ^ fxd;
  var hxd:int = e[10];
  var ixd:int = gxd ^ hxd;
  var jxd:int = e[8];
  var kxd:int = ixd ^ jxd;
  var lxd:int = 1;
  var mxd:int = kxd << lxd;
  var nxd:int = e[5];
  var oxd:int = e[0];
  var pxd:int = nxd ^ oxd;
  var qxd:int = e[10];
  var rxd:int = pxd ^ qxd;
  var sxd:int = e[8];
  var txd:int = rxd ^ sxd;
  var uxd:int = 31;
  var vxd:int = txd >> uxd;
  var wxd:int = mxd | vxd;
  e[8] = wxd;
  var xxd:int = dxd + wxd;
  var yxd:int = -899497514;
  var zxd:int = xxd + yxd;
  var ayd:int = e[18];
  var byd:int = 5;
  var cyd:int = ayd << byd;
  var dyd:int = e[18];
  var eyd:int = 27;
  var fyd:int = dyd >> eyd;
  var gyd:int = cyd | fyd;
  var hyd:int = zxd + gyd;
  var iyd:int = e[19];
  var jyd:int = iyd + hyd;
  e[19] = jyd;
  var kyd:int = e[17];
  var lyd:int = 30;
  var myd:int = kyd << lyd;
  var nyd:int = e[17];
  var oyd:int = 2;
  var pyd:int = nyd >> oyd;
  var qyd:int = myd | pyd;
  e[17] = qyd;
  var ryd:int = e[18];
  var syd:int = e[17];
  var tyd:int = ryd ^ syd;
  var uyd:int = e[21];
  var vyd:int = tyd ^ uyd;
  var wyd:int = e[6];
  var xyd:int = e[1];
  var yyd:int = wyd ^ xyd;
  var zyd:int = e[11];
  var azd:int = yyd ^ zyd;
  var bzd:int = e[9];
  var czd:int = azd ^ bzd;
  var dzd:int = 1;
  var ezd:int = czd << dzd;
  var fzd:int = e[6];
  var gzd:int = e[1];
  var hzd:int = fzd ^ gzd;
  var izd:int = e[11];
  var jzd:int = hzd ^ izd;
  var kzd:int = e[9];
  var lzd:int = jzd ^ kzd;
  var mzd:int = 31;
  var nzd:int = lzd >> mzd;
  var ozd:int = ezd | nzd;
  e[9] = ozd;
  var pzd:int = vyd + ozd;
  var qzd:int = -899497514;
  var rzd:int = pzd + qzd;
  var szd:int = e[19];
  var tzd:int = 5;
  var uzd:int = szd << tzd;
  var vzd:int = e[19];
  var wzd:int = 27;
  var xzd:int = vzd >> wzd;
  var yzd:int = uzd | xzd;
  var zzd:int = rzd + yzd;
  var aae:int = e[20];
  var bae:int = aae + zzd;
  e[20] = bae;
  var cae:int = e[18];
  var dae:int = 30;
  var eae:int = cae << dae;
  var fae:int = e[18];
  var gae:int = 2;
  var hae:int = fae >> gae;
  var iae:int = eae | hae;
  e[18] = iae;
  var jae:int = e[19];
  var kae:int = e[18];
  var lae:int = jae ^ kae;
  var mae:int = e[17];
  var nae:int = lae ^ mae;
  var oae:int = e[7];
  var pae:int = e[2];
  var qae:int = oae ^ pae;
  var rae:int = e[12];
  var sae:int = qae ^ rae;
  var tae:int = e[10];
  var uae:int = sae ^ tae;
  var vae:int = 1;
  var wae:int = uae << vae;
  var xae:int = e[7];
  var yae:int = e[2];
  var zae:int = xae ^ yae;
  var abe:int = e[12];
  var bbe:int = zae ^ abe;
  var cbe:int = e[10];
  var dbe:int = bbe ^ cbe;
  var ebe:int = 31;
  var fbe:int = dbe >> ebe;
  var gbe:int = wae | fbe;
  e[10] = gbe;
  var hbe:int = nae + gbe;
  var ibe:int = -899497514;
  var jbe:int = hbe + ibe;
  var kbe:int = e[20];
  var lbe:int = 5;
  var mbe:int = kbe << lbe;
  var nbe:int = e[20];
  var obe:int = 27;
  var pbe:int = nbe >> obe;
  var qbe:int = mbe | pbe;
  var rbe:int = jbe + qbe;
  var sbe:int = e[21];
  var tbe:int = sbe + rbe;
  e[21] = tbe;
  var ube:int = e[19];
  var vbe:int = 30;
  var wbe:int = ube << vbe;
  var xbe:int = e[19];
  var ybe:int = 2;
  var zbe:int = xbe >> ybe;
  var ace:int = wbe | zbe;
  e[19] = ace;
  var bce:int = e[20];
  var cce:int = e[19];
  var dce:int = bce ^ cce;
  var ece:int = e[18];
  var fce:int = dce ^ ece;
  var gce:int = e[8];
  var hce:int = e[3];
  var ice:int = gce ^ hce;
  var jce:int = e[13];
  var kce:int = ice ^ jce;
  var lce:int = e[11];
  var mce:int = kce ^ lce;
  var nce:int = 1;
  var oce:int = mce << nce;
  var pce:int = e[8];
  var qce:int = e[3];
  var rce:int = pce ^ qce;
  var sce:int = e[13];
  var tce:int = rce ^ sce;
  var uce:int = e[11];
  var vce:int = tce ^ uce;
  var wce:int = 31;
  var xce:int = vce >> wce;
  var yce:int = oce | xce;
  e[11] = yce;
  var zce:int = fce + yce;
  var ade:int = -899497514;
  var bde:int = zce + ade;
  var cde:int = e[21];
  var dde:int = 5;
  var ede:int = cde << dde;
  var fde:int = e[21];
  var gde:int = 27;
  var hde:int = fde >> gde;
  var ide:int = ede | hde;
  var jde:int = bde + ide;
  var kde:int = e[17];
  var lde:int = kde + jde;
  e[17] = lde;
  var mde:int = e[20];
  var nde:int = 30;
  var ode:int = mde << nde;
  var pde:int = e[20];
  var qde:int = 2;
  var rde:int = pde >> qde;
  var sde:int = ode | rde;
  e[20] = sde;
  var tde:int = e[21];
  var ude:int = e[20];
  var vde:int = tde ^ ude;
  var wde:int = e[19];
  var xde:int = vde ^ wde;
  var yde:int = e[9];
  var zde:int = e[4];
  var aee:int = yde ^ zde;
  var bee:int = e[14];
  var cee:int = aee ^ bee;
  var dee:int = e[12];
  var eee:int = cee ^ dee;
  var fee:int = 1;
  var gee:int = eee << fee;
  var hee:int = e[9];
  var iee:int = e[4];
  var jee:int = hee ^ iee;
  var kee:int = e[14];
  var lee:int = jee ^ kee;
  var mee:int = e[12];
  var nee:int = lee ^ mee;
  var oee:int = 31;
  var pee:int = nee >> oee;
  var qee:int = gee | pee;
  e[12] = qee;
  var ree:int = xde + qee;
  var see:int = -899497514;
  var tee:int = ree + see;
  var uee:int = e[17];
  var vee:int = 5;
  var wee:int = uee << vee;
  var xee:int = e[17];
  var yee:int = 27;
  var zee:int = xee >> yee;
  var afe:int = wee | zee;
  var bfe:int = tee + afe;
  var cfe:int = e[18];
  var dfe:int = cfe + bfe;
  e[18] = dfe;
  var efe:int = e[21];
  var ffe:int = 30;
  var gfe:int = efe << ffe;
  var hfe:int = e[21];
  var ife:int = 2;
  var jfe:int = hfe >> ife;
  var kfe:int = gfe | jfe;
  e[21] = kfe;
  var lfe:int = e[17];
  var mfe:int = e[21];
  var nfe:int = lfe ^ mfe;
  var ofe:int = e[20];
  var pfe:int = nfe ^ ofe;
  var qfe:int = e[10];
  var rfe:int = e[5];
  var sfe:int = qfe ^ rfe;
  var tfe:int = e[15];
  var ufe:int = sfe ^ tfe;
  var vfe:int = e[13];
  var wfe:int = ufe ^ vfe;
  var xfe:int = 1;
  var yfe:int = wfe << xfe;
  var zfe:int = e[10];
  var age:int = e[5];
  var bge:int = zfe ^ age;
  var cge:int = e[15];
  var dge:int = bge ^ cge;
  var ege:int = e[13];
  var fge:int = dge ^ ege;
  var gge:int = 31;
  var hge:int = fge >> gge;
  var ige:int = yfe | hge;
  e[13] = ige;
  var jge:int = pfe + ige;
  var kge:int = -899497514;
  var lge:int = jge + kge;
  var mge:int = e[18];
  var nge:int = 5;
  var oge:int = mge << nge;
  var pge:int = e[18];
  var qge:int = 27;
  var rge:int = pge >> qge;
  var sge:int = oge | rge;
  var tge:int = lge + sge;
  var uge:int = e[19];
  var vge:int = uge + tge;
  e[19] = vge;
  var wge:int = e[17];
  var xge:int = 30;
  var yge:int = wge << xge;
  var zge:int = e[17];
  var ahe:int = 2;
  var bhe:int = zge >> ahe;
  var che:int = yge | bhe;
  e[17] = che;
  var dhe:int = e[18];
  var ehe:int = e[17];
  var fhe:int = dhe ^ ehe;
  var ghe:int = e[21];
  var hhe:int = fhe ^ ghe;
  var ihe:int = e[11];
  var jhe:int = e[6];
  var khe:int = ihe ^ jhe;
  var lhe:int = e[0];
  var mhe:int = khe ^ lhe;
  var nhe:int = e[14];
  var ohe:int = mhe ^ nhe;
  var phe:int = 1;
  var qhe:int = ohe << phe;
  var rhe:int = e[11];
  var she:int = e[6];
  var the:int = rhe ^ she;
  var uhe:int = e[0];
  var vhe:int = the ^ uhe;
  var whe:int = e[14];
  var xhe:int = vhe ^ whe;
  var yhe:int = 31;
  var zhe:int = xhe >> yhe;
  var aie:int = qhe | zhe;
  e[14] = aie;
  var bie:int = hhe + aie;
  var cie:int = -899497514;
  var die:int = bie + cie;
  var eie:int = e[19];
  var fie:int = 5;
  var gie:int = eie << fie;
  var hie:int = e[19];
  var iie:int = 27;
  var jie:int = hie >> iie;
  var kie:int = gie | jie;
  var lie:int = die + kie;
  var mie:int = e[20];
  var nie:int = mie + lie;
  e[20] = nie;
  var oie:int = e[18];
  var pie:int = 30;
  var qie:int = oie << pie;
  var rie:int = e[18];
  var sie:int = 2;
  var tie:int = rie >> sie;
  var uie:int = qie | tie;
  e[18] = uie;
  var vie:int = e[19];
  var wie:int = e[18];
  var xie:int = vie ^ wie;
  var yie:int = e[17];
  var zie:int = xie ^ yie;
  var aje:int = e[12];
  var bje:int = e[7];
  var cje:int = aje ^ bje;
  var dje:int = e[1];
  var eje:int = cje ^ dje;
  var fje:int = e[15];
  var gje:int = eje ^ fje;
  var hje:int = 1;
  var ije:int = gje << hje;
  var jje:int = e[12];
  var kje:int = e[7];
  var lje:int = jje ^ kje;
  var mje:int = e[1];
  var nje:int = lje ^ mje;
  var oje:int = e[15];
  var pje:int = nje ^ oje;
  var qje:int = 31;
  var rje:int = pje >> qje;
  var sje:int = ije | rje;
  e[15] = sje;
  var tje:int = zie + sje;
  var uje:int = -899497514;
  var vje:int = tje + uje;
  var wje:int = e[20];
  var xje:int = 5;
  var yje:int = wje << xje;
  var zje:int = e[20];
  var ake:int = 27;
  var bke:int = zje >> ake;
  var cke:int = yje | bke;
  var dke:int = vje + cke;
  var eke:int = e[21];
  var fke:int = eke + dke;
  e[21] = fke;
  var gke:int = e[19];
  var hke:int = 30;
  var ike:int = gke << hke;
  var jke:int = e[19];
  var kke:int = 2;
  var lke:int = jke >> kke;
  var mke:int = ike | lke;
  e[19] = mke;
  var nke:int = e[21];
  var oke:int_ptr = e[23];
  var pke:int = oke[0];
  var qke:int = pke + nke;
  oke[0] = qke;
  var rke:int = e[20];
  var ske:int_ptr = e[23];
  var tke:int = ske[1];
  var uke:int = tke + rke;
  ske[1] = uke;
  var vke:int = e[19];
  var wke:int_ptr = e[23];
  var xke:int = wke[2];
  var yke:int = xke + vke;
  wke[2] = yke;
  var zke:int = e[18];
  var ale:int_ptr = e[23];
  var ble:int = ale[3];
  var cle:int = ble + zke;
  ale[3] = cle;
  var dle:int = e[17];
  var ele:int_ptr = e[23];
  var fle:int = ele[4];
  var gle:int = fle + dle;
  ele[4] = gle;
  e[17] = g;
  e[18] = g;
  e[19] = g;
  e[20] = g;
  e[21] = g;
  var dme:long = 0L;
  f[0]:long = dme;
  var hle:int = 56;
  var ile:long_ptr = f + hle;
  ile[0] = dme;
  var jle:int = 48;
  var kle:long_ptr = f + jle;
  kle[0] = dme;
  var lle:int = 40;
  var mle:long_ptr = f + lle;
  mle[0] = dme;
  var nle:int = 32;
  var ole:long_ptr = f + nle;
  ole[0] = dme;
  var ple:int = 24;
  var qle:long_ptr = f + ple;
  qle[0] = dme;
  var rle:int = 16;
  var sle:long_ptr = f + rle;
  sle[0] = dme;
  var tle:int = 8;
  var ule:long_ptr = f + tle;
  ule[0] = dme;
}

function f_ja(a:int) {
  var b:int = g_a;
  var c:int = 16;
  var d:int_ptr = b - c;
  var e:int = 0;
  var f:int = -1009589776;
  var g:int = 271733878;
  var h:int = -1732584194;
  var i:int = -271733879;
  var j:int = 1732584193;
  d[3] = a;
  var k:int_ptr = d[3];
  k[0] = j;
  var l:int_ptr = d[3];
  l[1] = i;
  var m:int_ptr = d[3];
  m[2] = h;
  var n:int_ptr = d[3];
  n[3] = g;
  var o:int_ptr = d[3];
  o[4] = f;
  var p:int_ptr = d[3];
  p[6] = e;
  var q:int_ptr = d[3];
  q[5] = e;
}

function f_ka(a:int, b:int, c:int) {
  var d:int = g_a;
  var e:int = 32;
  var f:int_ptr = d - e;
  g_a = f;
  f[7] = a;
  f[6] = b;
  f[5] = c;
  var g:int_ptr = f[7];
  var h:int = g[5];
  f[3] = h;
  var i:int = f[5];
  var j:int = 3;
  var k:int = i << j;
  var l:int_ptr = f[7];
  var m:int = l[5];
  var n:int = m + k;
  l[5] = n;
  var o:int = f[3];
  var p:int = n;
  var q:int = o;
  var r:int = p < q;
  var s:int = 1;
  var t:int = r & s;
  if (eqz(t)) goto B_a;
  var u:int_ptr = f[7];
  var v:int = u[6];
  var w:int = 1;
  var x:int = v + w;
  u[6] = x;
  label B_a:
  var y:int = 63;
  var z:int = f[5];
  var aa:int = 29;
  var ba:int = z >> aa;
  var ca:int_ptr = f[7];
  var da:int = ca[6];
  var ea:int = da + ba;
  ca[6] = ea;
  var fa:int = f[3];
  var ga:int = 3;
  var ha:int = fa >> ga;
  var ia:int = 63;
  var ja:int = ha & ia;
  f[3] = ja;
  var ka:int = f[3];
  var la:int = f[5];
  var ma:int = ka + la;
  var na:int = ma;
  var oa:int = y;
  var pa:int = na > oa;
  var qa:int = 1;
  var ra:int = pa & qa;
  if (eqz(ra)) goto B_c;
  var sa:int = 64;
  var ta:int = f[7];
  var ua:int = 28;
  var va:int = ta + ua;
  var wa:int = f[3];
  var xa:int = va + wa;
  var ya:int = f[6];
  var za:int = f[3];
  var ab:int = sa - za;
  f[4] = ab;
  f_ic(xa, ya, ab);
  var bb:int = f[7];
  var cb:int = f[7];
  var db:int = 28;
  var eb:int = cb + db;
  f_ia(bb, eb);
  loop L_e {
    var fb:int = f[4];
    var gb:int = 63;
    var hb:int = fb + gb;
    var ib:int = f[5];
    var jb:int = hb;
    var kb:int = ib;
    var lb:int = jb < kb;
    var mb:int = 1;
    var nb:int = lb & mb;
    if (eqz(nb)) goto B_d;
    var ob:int = f[7];
    var pb:int = f[6];
    var qb:int = f[4];
    var rb:int = pb + qb;
    f_ia(ob, rb);
    var sb:int = f[4];
    var tb:int = 64;
    var ub:int = sb + tb;
    f[4] = ub;
    continue L_e;
  }
  unreachable;
  label B_d:
  var vb:int = 0;
  f[3] = vb;
  goto B_b;
  label B_c:
  var wb:int = 0;
  f[4] = wb;
  label B_b:
  var xb:int = f[7];
  var yb:int = 28;
  var zb:int = xb + yb;
  var ac:int = f[3];
  var bc:int = zb + ac;
  var cc:int = f[6];
  var dc:int = f[4];
  var ec:int = cc + dc;
  var fc:int = f[5];
  var gc:int = f[4];
  var hc:int = fc - gc;
  f_ic(bc, ec, hc);
  var ic:int = 32;
  var jc:int = f + ic;
  g_a = jc;
}

function f_la(a:int, b:int) {
  var c:int = g_a;
  var d:int = 32;
  var e:int = c - d;
  g_a = e;
  var f:int = 0;
  e[7]:int = a;
  e[6]:int = b;
  e[5]:int = f;
  loop L_b {
    var g:int = 8;
    var h:int = e[5]:int;
    var i:int = h;
    var j:int = g;
    var k:int = i < j;
    var l:int = 1;
    var m:int = k & l;
    if (eqz(m)) goto B_a;
    var n:int = 12;
    var o:int = e + n;
    var p:int = o;
    var q:int = 3;
    var r:int = 0;
    var s:int = 1;
    var t:int = 4;
    var u:int = e[6]:int;
    var v:int = 20;
    var w:int = u + v;
    var x:int = e[5]:int;
    var y:int = x;
    var z:int = t;
    var aa:int = y >= z;
    var ba:int = 1;
    var ca:int = aa & ba;
    var da:int = select_if(r, s, ca);
    var ea:int = 2;
    var fa:int = da << ea;
    var ga:int_ptr = w + fa;
    var ha:int = ga[0];
    var ia:int = e[5]:int;
    var ja:int = 3;
    var ka:int = ia & ja;
    var la:int = q - ka;
    var ma:int = 3;
    var na:int = la << ma;
    var oa:int = ha >> na;
    var pa:int = 255;
    var qa:int = oa & pa;
    var ra:int = e[5]:int;
    var sa:byte_ptr = p + ra;
    sa[0] = qa;
    var ta:int = e[5]:int;
    var ua:int = 1;
    var va:int = ta + ua;
    e[5]:int = va;
    continue L_b;
  }
  unreachable;
  label B_a:
  var wa:int = 11;
  var xa:int = e + wa;
  var ya:int = xa;
  var za:int = 1;
  var ab:int = 128;
  e[11]:byte = ab;
  var bb:int = e[6]:int;
  f_ka(bb, ya, za);
  loop L_d {
    var cb:int = 448;
    var db:int_ptr = e[6]:int;
    var eb:int = db[5];
    var fb:int = 504;
    var gb:int = eb & fb;
    var hb:int = gb;
    var ib:int = cb;
    var jb:int = hb != ib;
    var kb:int = 1;
    var lb:int = jb & kb;
    if (eqz(lb)) goto B_c;
    var mb:int = 11;
    var nb:int = e + mb;
    var ob:int = nb;
    var pb:int = 1;
    var qb:int = 0;
    e[11]:byte = qb;
    var rb:int = e[6]:int;
    f_ka(rb, ob, pb);
    continue L_d;
  }
  unreachable;
  label B_c:
  var sb:int = 0;
  var tb:int = 8;
  var ub:int = 12;
  var vb:int = e + ub;
  var wb:int = vb;
  var xb:int = e[6]:int;
  f_ka(xb, wb, tb);
  e[5]:int = sb;
  loop L_f {
    var yb:int = 20;
    var zb:int = e[5]:int;
    var ac:int = zb;
    var bc:int = yb;
    var cc:int = ac < bc;
    var dc:int = 1;
    var ec:int = cc & dc;
    if (eqz(ec)) goto B_e;
    var fc:int = 3;
    var gc:int = e[6]:int;
    var hc:int = e[5]:int;
    var ic:int = 2;
    var jc:int = hc >> ic;
    var kc:int = 2;
    var lc:int = jc << kc;
    var mc:int_ptr = gc + lc;
    var nc:int = mc[0];
    var oc:int = e[5]:int;
    var pc:int = 3;
    var qc:int = oc & pc;
    var rc:int = fc - qc;
    var sc:int = 3;
    var tc:int = rc << sc;
    var uc:int = nc >> tc;
    var vc:int = 255;
    var wc:int = uc & vc;
    var xc:int = e[7]:int;
    var yc:int = e[5]:int;
    var zc:byte_ptr = xc + yc;
    zc[0] = wc;
    var ad:int = e[5]:int;
    var bd:int = 1;
    var cd:int = ad + bd;
    e[5]:int = cd;
    continue L_f;
  }
  unreachable;
  label B_e:
  var dd:int = 12;
  var ed:int = e + dd;
  var fd:long_ptr@1 = ed;
  var gd:int = e[6]:int;
  var hd:int = 92;
  var id:int = 0;
  memset(gd, id, hd);
  var ld:long = 0L;
  fd[0] = ld;
  var jd:int = 32;
  var kd:int = e + jd;
  g_a = kd;
}

function f_ma(a:int, b:int) {
  var c:int = g_a;
  var d:int = 32;
  var e:int = c - d;
  var f:int = 0;
  e[7]:int = a;
  e[6]:int = b;
  e[5]:int = f;
  loop L_b {
    var g:int = 4;
    var h:int = e[5]:int;
    var i:int = h;
    var j:int = g;
    var k:int = i < j;
    var l:int = 1;
    var m:int = k & l;
    if (eqz(m)) goto B_a;
    var n:int = e[6]:int;
    var o:int = e[5]:int;
    var p:int = 2;
    var q:int = o << p;
    var r:int = 0;
    var s:int = q + r;
    var t:ubyte_ptr = n + s;
    var u:int = t[0];
    var v:int = e[7]:int;
    var w:int = e[5]:int;
    var x:int = 2;
    var y:int = w << x;
    var z:int = 0;
    var aa:int = y + z;
    var ba:byte_ptr = v + aa;
    ba[0] = u;
    var ca:int = e[6]:int;
    var da:int = e[5]:int;
    var ea:int = 2;
    var fa:int = da << ea;
    var ga:int = 1;
    var ha:int = fa + ga;
    var ia:ubyte_ptr = ca + ha;
    var ja:int = ia[0];
    var ka:int = e[7]:int;
    var la:int = e[5]:int;
    var ma:int = 2;
    var na:int = la << ma;
    var oa:int = 1;
    var pa:int = na + oa;
    var qa:byte_ptr = ka + pa;
    qa[0] = ja;
    var ra:int = e[6]:int;
    var sa:int = e[5]:int;
    var ta:int = 2;
    var ua:int = sa << ta;
    var va:int = 2;
    var wa:int = ua + va;
    var xa:ubyte_ptr = ra + wa;
    var ya:int = xa[0];
    var za:int = e[7]:int;
    var ab:int = e[5]:int;
    var bb:int = 2;
    var cb:int = ab << bb;
    var db:int = 2;
    var eb:int = cb + db;
    var fb:byte_ptr = za + eb;
    fb[0] = ya;
    var gb:int = e[6]:int;
    var hb:int = e[5]:int;
    var ib:int = 2;
    var jb:int = hb << ib;
    var kb:int = 3;
    var lb:int = jb + kb;
    var mb:ubyte_ptr = gb + lb;
    var nb:int = mb[0];
    var ob:int = e[7]:int;
    var pb:int = e[5]:int;
    var qb:int = 2;
    var rb:int = pb << qb;
    var sb:int = 3;
    var tb:int = rb + sb;
    var ub:byte_ptr = ob + tb;
    ub[0] = nb;
    var vb:int = e[5]:int;
    var wb:int = 1;
    var xb:int = vb + wb;
    e[5]:int = xb;
    continue L_b;
  }
  unreachable;
  label B_a:
  var yb:int = 4;
  e[5]:int = yb;
  loop L_d {
    var zb:int = 44;
    var ac:int = e[5]:int;
    var bc:int = ac;
    var cc:int = zb;
    var dc:int = bc < cc;
    var ec:int = 1;
    var fc:int = dc & ec;
    if (eqz(fc)) goto B_c;
    var gc:int = e[5]:int;
    var hc:int = 1;
    var ic:int = gc - hc;
    var jc:int = 2;
    var kc:int = ic << jc;
    e[3]:int = kc;
    var lc:int = e[7]:int;
    var mc:int = e[3]:int;
    var nc:int = 0;
    var oc:int = mc + nc;
    var pc:ubyte_ptr = lc + oc;
    var qc:int = pc[0];
    e[8]:byte = qc;
    var rc:int = e[7]:int;
    var sc:int = e[3]:int;
    var tc:int = 1;
    var uc:int = sc + tc;
    var vc:ubyte_ptr = rc + uc;
    var wc:int = vc[0];
    e[9]:byte = wc;
    var xc:int = e[7]:int;
    var yc:int = e[3]:int;
    var zc:int = 2;
    var ad:int = yc + zc;
    var bd:ubyte_ptr = xc + ad;
    var cd:int = bd[0];
    e[10]:byte = cd;
    var dd:int = e[7]:int;
    var ed:int = e[3]:int;
    var fd:int = 3;
    var gd:int = ed + fd;
    var hd:ubyte_ptr = dd + gd;
    var id:int = hd[0];
    e[11]:byte = id;
    var jd:int = e[5]:int;
    var kd:int = 3;
    var ld:int = jd & kd;
    if (ld) goto B_e;
    var md:int = e[8]:ubyte;
    e[7]:byte = md;
    var nd:int = e[9]:ubyte;
    e[8]:byte = nd;
    var od:int = e[10]:ubyte;
    e[9]:byte = od;
    var pd:int = e[11]:ubyte;
    e[10]:byte = pd;
    var qd:int = e[7]:ubyte;
    e[11]:byte = qd;
    var rd:int = e[8]:ubyte;
    var sd:int = 255;
    var td:ubyte_ptr = rd & sd;
    var ud:int = td[1136];
    e[8]:byte = ud;
    var vd:int = e[9]:ubyte;
    var wd:int = 255;
    var xd:ubyte_ptr = vd & wd;
    var yd:int = xd[1136];
    e[9]:byte = yd;
    var zd:int = e[10]:ubyte;
    var ae:int = 255;
    var be:ubyte_ptr = zd & ae;
    var ce:int = be[1136];
    e[10]:byte = ce;
    var de:int = e[11]:ubyte;
    var ee:int = 255;
    var fe:ubyte_ptr = de & ee;
    var ge:int = fe[1136];
    e[11]:byte = ge;
    var he:int = e[8]:ubyte;
    var ie:int = 255;
    var je:int = he & ie;
    var ke:int = e[5]:int;
    var le:int = 2;
    var me:ubyte_ptr = ke >> le;
    var ne:int = me[1392];
    var oe:int = 255;
    var pe:int = ne & oe;
    var qe:int = je ^ pe;
    e[8]:byte = qe;
    label B_e:
    var re:int = e[5]:int;
    var se:int = 2;
    var te:int = re << se;
    e[4]:int = te;
    var ue:int = e[5]:int;
    var ve:int = 4;
    var we:int = ue - ve;
    var xe:int = 2;
    var ye:int = we << xe;
    e[3]:int = ye;
    var ze:int = e[7]:int;
    var af:int = e[3]:int;
    var bf:int = 0;
    var cf:int = af + bf;
    var df:ubyte_ptr = ze + cf;
    var ef:int = df[0];
    var ff:int = 255;
    var gf:int = ef & ff;
    var hf:int = e[8]:ubyte;
    var if:int = 255;
    var jf:int = hf & if;
    var kf:int = gf ^ jf;
    var lf:int = e[7]:int;
    var mf:int = e[4]:int;
    var nf:int = 0;
    var of:int = mf + nf;
    var pf:byte_ptr = lf + of;
    pf[0] = kf;
    var qf:int = e[7]:int;
    var rf:int = e[3]:int;
    var sf:int = 1;
    var tf:int = rf + sf;
    var uf:ubyte_ptr = qf + tf;
    var vf:int = uf[0];
    var wf:int = 255;
    var xf:int = vf & wf;
    var yf:int = e[9]:ubyte;
    var zf:int = 255;
    var ag:int = yf & zf;
    var bg:int = xf ^ ag;
    var cg:int = e[7]:int;
    var dg:int = e[4]:int;
    var eg:int = 1;
    var fg:int = dg + eg;
    var gg:byte_ptr = cg + fg;
    gg[0] = bg;
    var hg:int = e[7]:int;
    var ig:int = e[3]:int;
    var jg:int = 2;
    var kg:int = ig + jg;
    var lg:ubyte_ptr = hg + kg;
    var mg:int = lg[0];
    var ng:int = 255;
    var og:int = mg & ng;
    var pg:int = e[10]:ubyte;
    var qg:int = 255;
    var rg:int = pg & qg;
    var sg:int = og ^ rg;
    var tg:int = e[7]:int;
    var ug:int = e[4]:int;
    var vg:int = 2;
    var wg:int = ug + vg;
    var xg:byte_ptr = tg + wg;
    xg[0] = sg;
    var yg:int = e[7]:int;
    var zg:int = e[3]:int;
    var ah:int = 3;
    var bh:int = zg + ah;
    var ch:ubyte_ptr = yg + bh;
    var dh:int = ch[0];
    var eh:int = 255;
    var fh:int = dh & eh;
    var gh:int = e[11]:ubyte;
    var hh:int = 255;
    var ih:int = gh & hh;
    var jh:int = fh ^ ih;
    var kh:int = e[7]:int;
    var lh:int = e[4]:int;
    var mh:int = 3;
    var nh:int = lh + mh;
    var oh:byte_ptr = kh + nh;
    oh[0] = jh;
    var ph:int = e[5]:int;
    var qh:int = 1;
    var rh:int = ph + qh;
    e[5]:int = rh;
    continue L_d;
  }
  unreachable;
  label B_c:
}

function f_na(a:int, b:int, c:int) {
  var d:int = g_a;
  var e:int = 16;
  var f:int_ptr = d - e;
  g_a = f;
  f[3] = a;
  f[2] = b;
  f[1] = c;
  var g:int = f[3];
  var h:int = f[2];
  f_ma(g, h);
  var i:int = f[3];
  var j:int = 176;
  var k:long_ptr@1 = i + j;
  var l:long_ptr@1 = f[1];
  var r:long = l[0];
  k[0] = r;
  var m:int = 8;
  var n:long_ptr@1 = k + m;
  var o:long_ptr@1 = l + m;
  var s:long = o[0];
  n[0] = s;
  var p:int = 16;
  var q:int = f + p;
  g_a = q;
}

function f_oa(a:int, b:int) {
  var c:int = g_a;
  var d:int = 16;
  var e:int = c - d;
  g_a = e;
  var f:int = 1;
  var g:int = 0;
  e[3]:int = a;
  e[2]:int = b;
  e[7]:byte = g;
  var h:int = e[3]:int;
  var i:int = e[2]:int;
  var j:int = 255;
  var k:int = g & j;
  f_pa(k, h, i);
  e[7]:byte = f;
  loop L_b {
    var l:int = 10;
    var m:int = e[3]:int;
    f_qa(m);
    var n:int = e[3]:int;
    f_ra(n);
    var o:int = e[7]:ubyte;
    var p:int = 255;
    var q:int = o & p;
    var r:int = q;
    var s:int = l;
    var t:int = r == s;
    var u:int = 1;
    var v:int = t & u;
    if (eqz(v)) goto B_c;
    goto B_a;
    label B_c:
    var w:int = e[3]:int;
    f_sa(w);
    var x:int = e[7]:ubyte;
    var y:int = e[3]:int;
    var z:int = e[2]:int;
    var aa:int = 255;
    var ba:int = x & aa;
    f_pa(ba, y, z);
    var ca:int = e[7]:ubyte;
    var da:int = 1;
    var ea:int = ca + da;
    e[7]:byte = ea;
    continue L_b;
  }
  unreachable;
  label B_a:
  var fa:int = 10;
  var ga:int = e[3]:int;
  var ha:int = e[2]:int;
  var ia:int = 255;
  var ja:int = fa & ia;
  f_pa(ja, ga, ha);
  var ka:int = 16;
  var la:int = e + ka;
  g_a = la;
}

function f_pa(a:int, b:int, c:int) {
  var d:int = g_a;
  var e:int = 16;
  var f:int = d - e;
  var g:int = 0;
  f[15]:byte = a;
  f[2]:int = b;
  f[1]:int = c;
  f[3]:byte = g;
  loop L_b {
    var h:int = 4;
    var i:int = f[3]:ubyte;
    var j:int = 255;
    var k:int = i & j;
    var l:int = k;
    var m:int = h;
    var n:int = l < m;
    var o:int = 1;
    var p:int = n & o;
    if (eqz(p)) goto B_a;
    var q:int = 0;
    f[2]:byte = q;
    loop L_d {
      var r:int = 4;
      var s:int = f[2]:ubyte;
      var t:int = 255;
      var u:int = s & t;
      var v:int = u;
      var w:int = r;
      var x:int = v < w;
      var y:int = 1;
      var z:int = x & y;
      if (eqz(z)) goto B_c;
      var aa:int = f[1]:int;
      var ba:int = f[15]:ubyte;
      var ca:int = 255;
      var da:int = ba & ca;
      var ea:int = 2;
      var fa:int = da << ea;
      var ga:int = 2;
      var ha:int = fa << ga;
      var ia:int = f[3]:ubyte;
      var ja:int = 255;
      var ka:int = ia & ja;
      var la:int = 2;
      var ma:int = ka << la;
      var na:int = ha + ma;
      var oa:int = f[2]:ubyte;
      var pa:int = 255;
      var qa:int = oa & pa;
      var ra:int = na + qa;
      var sa:ubyte_ptr = aa + ra;
      var ta:int = sa[0];
      var ua:int = 255;
      var va:int = ta & ua;
      var wa:int = f[2]:int;
      var xa:int = f[3]:ubyte;
      var ya:int = 255;
      var za:int = xa & ya;
      var ab:int = 2;
      var bb:int = za << ab;
      var cb:int = wa + bb;
      var db:int = f[2]:ubyte;
      var eb:int = 255;
      var fb:int = db & eb;
      var gb:int = cb + fb;
      var hb:int = gb[0]:ubyte;
      var ib:int = 255;
      var jb:int = hb & ib;
      var kb:int = jb ^ va;
      gb[0]:byte = kb;
      var lb:int = f[2]:ubyte;
      var mb:int = 1;
      var nb:int = lb + mb;
      f[2]:byte = nb;
      continue L_d;
    }
    unreachable;
    label B_c:
    var ob:int = f[3]:ubyte;
    var pb:int = 1;
    var qb:int = ob + pb;
    f[3]:byte = qb;
    continue L_b;
  }
  unreachable;
  label B_a:
}

function f_qa(a:int) {
  var b:int = g_a;
  var c:int = 16;
  var d:int = b - c;
  var e:int = 0;
  d[3]:int = a;
  d[11]:byte = e;
  loop L_b {
    var f:int = 4;
    var g:int = d[11]:ubyte;
    var h:int = 255;
    var i:int = g & h;
    var j:int = i;
    var k:int = f;
    var l:int = j < k;
    var m:int = 1;
    var n:int = l & m;
    if (eqz(n)) goto B_a;
    var o:int = 0;
    d[10]:byte = o;
    loop L_d {
      var p:int = 4;
      var q:int = d[10]:ubyte;
      var r:int = 255;
      var s:int = q & r;
      var t:int = s;
      var u:int = p;
      var v:int = t < u;
      var w:int = 1;
      var x:int = v & w;
      if (eqz(x)) goto B_c;
      var y:int = d[3]:int;
      var z:int = d[10]:ubyte;
      var aa:int = 255;
      var ba:int = z & aa;
      var ca:int = 2;
      var da:int = ba << ca;
      var ea:int = y + da;
      var fa:int = d[11]:ubyte;
      var ga:int = 255;
      var ha:int = fa & ga;
      var ia:ubyte_ptr = ea + ha;
      var ja:int = ia[0];
      var ka:int = 255;
      var la:ubyte_ptr = ja & ka;
      var ma:int = la[1136];
      var na:int = d[3]:int;
      var oa:int = d[10]:ubyte;
      var pa:int = 255;
      var qa:int = oa & pa;
      var ra:int = 2;
      var sa:int = qa << ra;
      var ta:int = na + sa;
      var ua:int = d[11]:ubyte;
      var va:int = 255;
      var wa:int = ua & va;
      var xa:byte_ptr = ta + wa;
      xa[0] = ma;
      var ya:int = d[10]:ubyte;
      var za:int = 1;
      var ab:int = ya + za;
      d[10]:byte = ab;
      continue L_d;
    }
    unreachable;
    label B_c:
    var bb:int = d[11]:ubyte;
    var cb:int = 1;
    var db:int = bb + cb;
    d[11]:byte = db;
    continue L_b;
  }
  unreachable;
  label B_a:
}

function f_ra(a:int) {
  var b:int = g_a;
  var c:int = 16;
  var d:int = b - c;
  d[3]:int = a;
  var e:ubyte_ptr = d[3]:int;
  var f:int = e[1];
  d[11]:byte = f;
  var g:ubyte_ptr = d[3]:int;
  var h:int = g[5];
  var i:byte_ptr = d[3]:int;
  i[1] = h;
  var j:ubyte_ptr = d[3]:int;
  var k:int = j[9];
  var l:byte_ptr = d[3]:int;
  l[5] = k;
  var m:ubyte_ptr = d[3]:int;
  var n:int = m[13];
  var o:byte_ptr = d[3]:int;
  o[9] = n;
  var p:int = d[11]:ubyte;
  var q:byte_ptr = d[3]:int;
  q[13] = p;
  var r:ubyte_ptr = d[3]:int;
  var s:int = r[2];
  d[11]:byte = s;
  var t:ubyte_ptr = d[3]:int;
  var u:int = t[10];
  var v:byte_ptr = d[3]:int;
  v[2] = u;
  var w:int = d[11]:ubyte;
  var x:byte_ptr = d[3]:int;
  x[10] = w;
  var y:ubyte_ptr = d[3]:int;
  var z:int = y[6];
  d[11]:byte = z;
  var aa:ubyte_ptr = d[3]:int;
  var ba:int = aa[14];
  var ca:byte_ptr = d[3]:int;
  ca[6] = ba;
  var da:int = d[11]:ubyte;
  var ea:byte_ptr = d[3]:int;
  ea[14] = da;
  var fa:ubyte_ptr = d[3]:int;
  var ga:int = fa[3];
  d[11]:byte = ga;
  var ha:ubyte_ptr = d[3]:int;
  var ia:int = ha[15];
  var ja:byte_ptr = d[3]:int;
  ja[3] = ia;
  var ka:ubyte_ptr = d[3]:int;
  var la:int = ka[11];
  var ma:byte_ptr = d[3]:int;
  ma[15] = la;
  var na:ubyte_ptr = d[3]:int;
  var oa:int = na[7];
  var pa:byte_ptr = d[3]:int;
  pa[11] = oa;
  var qa:int = d[11]:ubyte;
  var ra:byte_ptr = d[3]:int;
  ra[7] = qa;
}

function f_sa(a:int) {
  var b:int = g_a;
  var c:int = 16;
  var d:int = b - c;
  g_a = d;
  var e:int = 0;
  d[3]:int = a;
  d[11]:byte = e;
  loop L_b {
    var f:int = 4;
    var g:int = d[11]:ubyte;
    var h:int = 255;
    var i:int = g & h;
    var j:int = i;
    var k:int = f;
    var l:int = j < k;
    var m:int = 1;
    var n:int = l & m;
    if (eqz(n)) goto B_a;
    var o:int = d[3]:int;
    var p:int = d[11]:ubyte;
    var q:int = 255;
    var r:int = p & q;
    var s:int = 2;
    var t:int = r << s;
    var u:ubyte_ptr = o + t;
    var v:int = u[0];
    d[8]:byte = v;
    var w:int = d[3]:int;
    var x:int = d[11]:ubyte;
    var y:int = 255;
    var z:int = x & y;
    var aa:int = 2;
    var ba:int = z << aa;
    var ca:ubyte_ptr = w + ba;
    var da:int = ca[0];
    var ea:int = 255;
    var fa:int = da & ea;
    var ga:int = d[3]:int;
    var ha:int = d[11]:ubyte;
    var ia:int = 255;
    var ja:int = ha & ia;
    var ka:int = 2;
    var la:int = ja << ka;
    var ma:ubyte_ptr = ga + la;
    var na:int = ma[1];
    var oa:int = 255;
    var pa:int = na & oa;
    var qa:int = fa ^ pa;
    var ra:int = d[3]:int;
    var sa:int = d[11]:ubyte;
    var ta:int = 255;
    var ua:int = sa & ta;
    var va:int = 2;
    var wa:int = ua << va;
    var xa:ubyte_ptr = ra + wa;
    var ya:int = xa[2];
    var za:int = 255;
    var ab:int = ya & za;
    var bb:int = qa ^ ab;
    var cb:int = d[3]:int;
    var db:int = d[11]:ubyte;
    var eb:int = 255;
    var fb:int = db & eb;
    var gb:int = 2;
    var hb:int = fb << gb;
    var ib:ubyte_ptr = cb + hb;
    var jb:int = ib[3];
    var kb:int = 255;
    var lb:int = jb & kb;
    var mb:int = bb ^ lb;
    d[10]:byte = mb;
    var nb:int = d[3]:int;
    var ob:int = d[11]:ubyte;
    var pb:int = 255;
    var qb:int = ob & pb;
    var rb:int = 2;
    var sb:int = qb << rb;
    var tb:ubyte_ptr = nb + sb;
    var ub:int = tb[0];
    var vb:int = 255;
    var wb:int = ub & vb;
    var xb:int = d[3]:int;
    var yb:int = d[11]:ubyte;
    var zb:int = 255;
    var ac:int = yb & zb;
    var bc:int = 2;
    var cc:int = ac << bc;
    var dc:ubyte_ptr = xb + cc;
    var ec:int = dc[1];
    var fc:int = 255;
    var gc:int = ec & fc;
    var hc:int = wb ^ gc;
    d[9]:byte = hc;
    var ic:int = d[9]:ubyte;
    var jc:int = 255;
    var kc:int = ic & jc;
    var lc:int = f_ua(kc);
    d[9]:byte = lc;
    var mc:int = d[9]:ubyte;
    var nc:int = 255;
    var oc:int = mc & nc;
    var pc:int = d[10]:ubyte;
    var qc:int = 255;
    var rc:int = pc & qc;
    var sc:int = oc ^ rc;
    var tc:int = d[3]:int;
    var uc:int = d[11]:ubyte;
    var vc:int = 255;
    var wc:int = uc & vc;
    var xc:int = 2;
    var yc:int = wc << xc;
    var zc:int = tc + yc;
    var ad:int = zc[0]:ubyte;
    var bd:int = 255;
    var cd:int = ad & bd;
    var dd:int = cd ^ sc;
    zc[0]:byte = dd;
    var ed:int = d[3]:int;
    var fd:int = d[11]:ubyte;
    var gd:int = 255;
    var hd:int = fd & gd;
    var id:int = 2;
    var jd:int = hd << id;
    var kd:ubyte_ptr = ed + jd;
    var ld:int = kd[1];
    var md:int = 255;
    var nd:int = ld & md;
    var od:int = d[3]:int;
    var pd:int = d[11]:ubyte;
    var qd:int = 255;
    var rd:int = pd & qd;
    var sd:int = 2;
    var td:int = rd << sd;
    var ud:ubyte_ptr = od + td;
    var vd:int = ud[2];
    var wd:int = 255;
    var xd:int = vd & wd;
    var yd:int = nd ^ xd;
    d[9]:byte = yd;
    var zd:int = d[9]:ubyte;
    var ae:int = 255;
    var be:int = zd & ae;
    var ce:int = f_ua(be);
    d[9]:byte = ce;
    var de:int = d[9]:ubyte;
    var ee:int = 255;
    var fe:int = de & ee;
    var ge:int = d[10]:ubyte;
    var he:int = 255;
    var ie:int = ge & he;
    var je:int = fe ^ ie;
    var ke:int = d[3]:int;
    var le:int = d[11]:ubyte;
    var me:int = 255;
    var ne:int = le & me;
    var oe:int = 2;
    var pe:int = ne << oe;
    var qe:int = ke + pe;
    var re:int = qe[1]:ubyte;
    var se:int = 255;
    var te:int = re & se;
    var ue:int = te ^ je;
    qe[1]:byte = ue;
    var ve:int = d[3]:int;
    var we:int = d[11]:ubyte;
    var xe:int = 255;
    var ye:int = we & xe;
    var ze:int = 2;
    var af:int = ye << ze;
    var bf:ubyte_ptr = ve + af;
    var cf:int = bf[2];
    var df:int = 255;
    var ef:int = cf & df;
    var ff:int = d[3]:int;
    var gf:int = d[11]:ubyte;
    var hf:int = 255;
    var if:int = gf & hf;
    var jf:int = 2;
    var kf:int = if << jf;
    var lf:ubyte_ptr = ff + kf;
    var mf:int = lf[3];
    var nf:int = 255;
    var of:int = mf & nf;
    var pf:int = ef ^ of;
    d[9]:byte = pf;
    var qf:int = d[9]:ubyte;
    var rf:int = 255;
    var sf:int = qf & rf;
    var tf:int = f_ua(sf);
    d[9]:byte = tf;
    var uf:int = d[9]:ubyte;
    var vf:int = 255;
    var wf:int = uf & vf;
    var xf:int = d[10]:ubyte;
    var yf:int = 255;
    var zf:int = xf & yf;
    var ag:int = wf ^ zf;
    var bg:int = d[3]:int;
    var cg:int = d[11]:ubyte;
    var dg:int = 255;
    var eg:int = cg & dg;
    var fg:int = 2;
    var gg:int = eg << fg;
    var hg:int = bg + gg;
    var ig:int = hg[2]:ubyte;
    var jg:int = 255;
    var kg:int = ig & jg;
    var lg:int = kg ^ ag;
    hg[2]:byte = lg;
    var mg:int = d[3]:int;
    var ng:int = d[11]:ubyte;
    var og:int = 255;
    var pg:int = ng & og;
    var qg:int = 2;
    var rg:int = pg << qg;
    var sg:ubyte_ptr = mg + rg;
    var tg:int = sg[3];
    var ug:int = 255;
    var vg:int = tg & ug;
    var wg:int = d[8]:ubyte;
    var xg:int = 255;
    var yg:int = wg & xg;
    var zg:int = vg ^ yg;
    d[9]:byte = zg;
    var ah:int = d[9]:ubyte;
    var bh:int = 255;
    var ch:int = ah & bh;
    var dh:int = f_ua(ch);
    d[9]:byte = dh;
    var eh:int = d[9]:ubyte;
    var fh:int = 255;
    var gh:int = eh & fh;
    var hh:int = d[10]:ubyte;
    var ih:int = 255;
    var jh:int = hh & ih;
    var kh:int = gh ^ jh;
    var lh:int = d[3]:int;
    var mh:int = d[11]:ubyte;
    var nh:int = 255;
    var oh:int = mh & nh;
    var ph:int = 2;
    var qh:int = oh << ph;
    var rh:int = lh + qh;
    var sh:int = rh[3]:ubyte;
    var th:int = 255;
    var uh:int = sh & th;
    var vh:int = uh ^ kh;
    rh[3]:byte = vh;
    var wh:int = d[11]:ubyte;
    var xh:int = 1;
    var yh:int = wh + xh;
    d[11]:byte = yh;
    continue L_b;
  }
  unreachable;
  label B_a:
  var zh:int = 16;
  var ai:int = d + zh;
  g_a = ai;
}

function f_ta(a:int, b:int, c:int) {
  var d:int = g_a;
  var e:int = 48;
  var f:int_ptr = d - e;
  g_a = f;
  var g:int = 16;
  var h:int = 0;
  f[11] = a;
  f[10] = b;
  f[9] = c;
  f[3] = h;
  f[2] = g;
  loop L_b {
    var i:int = f[3];
    var j:int = f[9];
    var k:int = i;
    var l:int = j;
    var m:int = k < l;
    var n:int = 1;
    var o:int = m & n;
    if (eqz(o)) goto B_a;
    var p:int = 16;
    var q:int = f[2];
    var r:int = q;
    var s:int = p;
    var t:int = r == s;
    var u:int = 1;
    var v:int = t & u;
    if (eqz(v)) goto B_c;
    var w:int = 15;
    var x:int = 16;
    var y:int = f + x;
    var z:long_ptr@1 = y;
    var aa:int = f[11];
    var ba:int = 176;
    var ca:long_ptr@1 = aa + ba;
    var wc:long = ca[0];
    z[0] = wc;
    var da:int = 8;
    var ea:long_ptr@1 = z + da;
    var fa:long_ptr@1 = ca + da;
    var xc:long = fa[0];
    ea[0] = xc;
    var ga:int = f[11];
    f_oa(z, ga);
    f[2] = w;
    loop L_e {
      var ha:int = 0;
      var ia:int = f[2];
      var ja:int = ia;
      var ka:int = ha;
      var la:int = ja >= ka;
      var ma:int = 1;
      var na:int = la & ma;
      if (eqz(na)) goto B_d;
      var oa:int = 255;
      var pa:int = f[11];
      var qa:int = 176;
      var ra:int = pa + qa;
      var sa:int = f[2];
      var ta:ubyte_ptr = ra + sa;
      var ua:int = ta[0];
      var va:int = 255;
      var wa:int = ua & va;
      var xa:int = wa;
      var ya:int = oa;
      var za:int = xa == ya;
      var ab:int = 1;
      var bb:int = za & ab;
      if (eqz(bb)) goto B_g;
      var cb:int = 0;
      var db:int = f[11];
      var eb:int = 176;
      var fb:int = db + eb;
      var gb:int = f[2];
      var hb:byte_ptr = fb + gb;
      hb[0] = cb;
      goto B_f;
      label B_g:
      var ib:int = f[11];
      var jb:int = 176;
      var kb:int = ib + jb;
      var lb:int = f[2];
      var mb:int = kb + lb;
      var nb:int = mb[0]:ubyte;
      var ob:int = 255;
      var pb:int = nb & ob;
      var qb:int = 1;
      var rb:int = pb + qb;
      mb[0]:byte = rb;
      goto B_d;
      label B_f:
      var sb:int = f[2];
      var tb:int = -1;
      var ub:int = sb + tb;
      f[2] = ub;
      continue L_e;
    }
    unreachable;
    label B_d:
    var vb:int = 0;
    f[2] = vb;
    label B_c:
    var wb:int = 16;
    var xb:int = f + wb;
    var yb:int = xb;
    var zb:int = f[10];
    var ac:int = f[3];
    var bc:ubyte_ptr = zb + ac;
    var cc:int = bc[0];
    var dc:int = 255;
    var ec:int = cc & dc;
    var fc:int = f[2];
    var gc:ubyte_ptr = yb + fc;
    var hc:int = gc[0];
    var ic:int = 255;
    var jc:int = hc & ic;
    var kc:int = ec ^ jc;
    var lc:int = f[10];
    var mc:int = f[3];
    var nc:byte_ptr = lc + mc;
    nc[0] = kc;
    var oc:int = f[3];
    var pc:int = 1;
    var qc:int = oc + pc;
    f[3] = qc;
    var rc:int = f[2];
    var sc:int = 1;
    var tc:int = rc + sc;
    f[2] = tc;
    continue L_b;
  }
  unreachable;
  label B_a:
  var uc:int = 48;
  var vc:int = f + uc;
  g_a = vc;
}

function f_ua(a:int):int {
  var b:int = g_a;
  var c:int = 16;
  var d:int = b - c;
  d[15]:byte = a;
  var e:int = d[15]:ubyte;
  var f:int = 255;
  var g:int = e & f;
  var h:int = 1;
  var i:int = g << h;
  var j:int = d[15]:ubyte;
  var k:int = 255;
  var l:int = j & k;
  var m:int = 7;
  var n:int = l >> m;
  var o:int = 1;
  var p:int = n & o;
  var q:int = 27;
  var r:int = p * q;
  var s:int = i ^ r;
  var t:int = 255;
  var u:int = s & t;
  return u;
}

function f_va(a:int):int {
  if (a < -4095) goto B_a;
  errno_location()[0]:int = 0 - a;
  a = -1;
  label B_a:
  return a;
}

export function errno_location():int {
  return 2500
}

function f_xa() {
}

function f_ya(a:int, b:int):int {
  f_xa();
  return f_va(env_sys_munmap(a, b));
}

function f_za(a:int, b:int, c:int, d:int, e:int, f:long):int {
  if (eqz(f & -17592186040321L)) goto B_a;
  errno_location()[0]:int = 28;
  return -1;
  label B_a:
  if (b < 2147483647) goto B_b;
  errno_location()[0]:int = 48;
  return -1;
  label B_b:
  if (eqz(d & 16)) goto B_c;
  f_xa();
  label B_c:
  return f_va(env_sys_mmap2(a, b, c, d, e, i32_wrap_i64(f >> 12L)));
}

function f_ab(a:int):int {
  return a + -48 < 10
}

function f_bb(a:int, b:int, c:int):int {
  var e:int;
  var d:int = c != 0;
  if (eqz(c)) goto B_c;
  if (eqz(a & 3)) goto B_c;
  e = b & 255;
  loop L_d {
    if (a[0]:ubyte == e) goto B_b;
    a = a + 1;
    c = c + -1;
    d = c != 0;
    if (eqz(c)) goto B_c;
    if (a & 3) continue L_d;
  }
  label B_c:
  if (eqz(d)) goto B_a;
  label B_b:
  if (a[0]:ubyte == (b & 255)) goto B_e;
  if (c < 4) goto B_e;
  e = (b & 255) * 16843009;
  loop L_f {
    d = a[0]:int ^ e;
    if (((d ^ -1) & d + -16843009) & -2139062144) goto B_e;
    a = a + 4;
    c = c + -4;
    if (c > 3) continue L_f;
  }
  label B_e:
  if (eqz(c)) goto B_a;
  d = b & 255;
  loop L_g {
    if (a[0]:ubyte != d) goto B_h;
    return a;
    label B_h:
    a = a + 1;
    c = c + -1;
    if (c) continue L_g;
  }
  label B_a:
  return 0;
}

function f_cb():int {
  return 2096
}

function f_db(a:{ a:byte, b:byte, c:byte, d:byte }, b:int, c:int):int {
  var d:int = 1;
  if (eqz(a)) goto B_b;
  if (b <= 127) goto B_a;
  if ((f_eb()[44]:int)[0]:int) goto B_d;
  if ((b & -128) == 57216) goto B_a;
  errno_location()[0]:int = 25;
  goto B_c;
  label B_d:
  if (b > 2047) goto B_e;
  a.b = (b & 63) | 128;
  a.a = b >> 6 | 192;
  return 2;
  label B_e:
  if (b < 55296) goto B_g;
  if ((b & -8192) != 57344) goto B_f;
  label B_g:
  a.c = (b & 63) | 128;
  a.a = b >> 12 | 224;
  a.b = (b >> 6 & 63) | 128;
  return 3;
  label B_f:
  if (b + -65536 > 1048575) goto B_h;
  a.d = (b & 63) | 128;
  a.a = b >> 18 | 240;
  a.c = (b >> 6 & 63) | 128;
  a.b = (b >> 12 & 63) | 128;
  return 4;
  label B_h:
  errno_location()[0]:int = 25;
  label B_c:
  d = -1;
  label B_b:
  return d;
  label B_a:
  a.a = b;
  return 1;
}

function f_eb():int {
  return f_cb()
}

function f_fb(a:int, b:int):int {
  if (a) goto B_a;
  return 0;
  label B_a:
  return f_db(a, b, 0);
}

function f_gb(a:double, b:int_ptr):double {
  var d:long = i64_reinterpret_f64(a);
  var c:int = i32_wrap_i64(d >> 52L) & 2047;
  if (c == 2047) goto B_a;
  if (c) goto B_b;
  if (a != 0.0) goto B_d;
  c = 0;
  goto B_c;
  label B_d:
  a = f_gb(a * 18446744073709551616.0, b);
  c = b[0] + -64;
  label B_c:
  b[0] = c;
  return a;
  label B_b:
  b[0] = c + -1022;
  a = f64_reinterpret_i64(
        (d & -9218868437227405313L) | 4602678819172646912L);
  label B_a:
  return a;
}

function f_hb(a:int, b:int, c:int, d:int, e:int):int {
  var f:int_ptr = g_a - 208;
  g_a = f;
  f[51] = c;
  c = 0;
  memset(f + 160, 0, 40);
  f[50] = f[51];
  if (f_ib(0, b, f + 200, f + 80, f + 160, d, e) >= 0) goto B_b;
  b = -1;
  goto B_a;
  label B_b:
  if (a[19]:int < 0) goto B_c;
  c = f_qc(a);
  label B_c:
  var g:int = a[0]:int;
  if (a[74]:byte > 0) goto B_d;
  a[0]:int = g & -33;
  label B_d:
  g = g & 32;
  if (eqz(a[12]:int)) goto B_f;
  b = f_ib(a, b, f + 200, f + 80, f + 160, d, e);
  goto B_e;
  label B_f:
  a[12]:int = 80;
  a[4]:int = f + 80;
  a[7]:int = f;
  a[5]:int = f;
  var h:int = a[11]:int;
  a[11]:int = f;
  b = f_ib(a, b, f + 200, f + 80, f + 160, d, e);
  if (eqz(h)) goto B_e;
  call_indirect(a, 0, 0, a[9]:int);
  a[12]:int = 0;
  a[11]:int = h;
  a[7]:int = 0;
  a[4]:int = 0;
  d = a[5]:int;
  a[5]:int = 0;
  b = select_if(b, -1, d);
  label B_e:
  a[0]:int = (d = a[0]:int) | g;
  b = select_if(-1, b, d & 32);
  if (eqz(c)) goto B_a;
  f_rc(a);
  label B_a:
  g_a = f + 208;
  return b;
}

function f_ib(a:int, b:int, c:int_ptr, d:int, e:int, f:int, g:int):int {
  var o:int_ptr;
  var p:int;
  var o:int_ptr;
  var o:int_ptr;
  var o:int_ptr;
  var o:int_ptr;
  var p:int;
  var o:int_ptr;
  var o:int_ptr;
  var o:int_ptr;
  var p:int;
  var s:int;
  var s:int;
  var s:int;
  var p:int;
  var o:int_ptr;
  var q:int;
  var q:int;
  var q:int;
  var q:int;
  var p:int;
  var o:int_ptr;
  var o:int_ptr;
  var w:long;
  var w:long;
  var w:long;
  var w:long;
  var w:long;
  var s:int;
  var o:int_ptr;
  var p:int;
  var p:int;
  var p:int;
  var p:int;
  var o:int_ptr;
  var p:int;
  var s:int;
  var o:int_ptr;
  var p:int;
  var p:int;
  var o:int_ptr;
  var p:int;
  var s:int;
  var s:int;
  var s:int;
  var s:int;
  var o:int_ptr;
  var n:int;
  var n:int;
  var u:int;
  var r:int;
  var t:int;
  var t:int;
  var p:int;
  var s:int;
  var s:int;
  var o:int_ptr;
  var o:int_ptr;
  var n:int;
  var q:int;
  var u:int;
  var o:int_ptr;
  var n:int;
  var r:int;
  var p:int;
  var p:int;
  var o:int_ptr;
  var n:int;
  var u:int;
  var h:int = g_a - 80;
  g_a = h;
  h[19]:int = b;
  var i:int = h + 55;
  var j:int = h + 56;
  var k:int = 0;
  var l:int = 0;
  b = 0;
  loop L_b {
    if (l < 0) goto B_c;
    if (b <= 2147483647 - l) goto B_d;
    errno_location()[0]:int = 61;
    l = -1;
    goto B_c;
    label B_d:
    l = b + l;
    label B_c:
    var m:ubyte_ptr = h[19]:int;
    b = m;
    n = m[0];
    if (eqz(n)) goto B_i;
    loop L_j {
      n = n & 255;
      if (n) goto B_m;
      n = b;
      goto B_l;
      label B_m:
      if (n != 37) goto B_k;
      n = b;
      loop L_n {
        if (b[1]:ubyte != 37) goto B_l;
        h[19]:int = (o = b + 2);
        n = n + 1;
        p = b[2]:ubyte;
        b = o;
        if (p == 37) continue L_n;
      }
      label B_l:
      b = n - m;
      if (eqz(a)) goto B_o;
      f_jb(a, m, b);
      label B_o:
      if (b) continue L_b;
      b = f_ab((h[19]:int)[1]:byte);
      n = h[19]:int;
      if (eqz(b)) goto B_q;
      if (n[2]:ubyte != 36) goto B_q;
      b = n + 3;
      q = n[1]:byte + -48;
      k = 1;
      goto B_p;
      label B_q:
      b = n + 1;
      q = -1;
      label B_p:
      h[19]:int = b;
      r = 0;
      p = b[0]:byte;
      o = p + -32;
      if (o <= 31) goto B_s;
      n = b;
      goto B_r;
      label B_s:
      r = 0;
      n = b;
      o = 1 << o;
      if (eqz(o & 75913)) goto B_r;
      loop L_t {
        h[19]:int = (n = b + 1);
        r = o | r;
        p = b[1]:byte;
        o = p + -32;
        if (o >= 32) goto B_r;
        b = n;
        o = 1 << o;
        if (o & 75913) continue L_t;
      }
      label B_r:
      if (p != 42) goto B_v;
      if (eqz(f_ab(n[1]:byte))) goto B_x;
      n = h[19]:int;
      if (n[2]:ubyte != 36) goto B_x;
      ((n[1]:byte << 2) + e + -192)[0]:int = 10;
      b = n + 3;
      s = ((n[1]:byte << 3) + d + -384)[0]:int;
      k = 1;
      goto B_w;
      label B_x:
      if (k) goto B_h;
      k = 0;
      s = 0;
      if (eqz(a)) goto B_y;
      c[0] = (b = c[0]) + 4;
      s = b[0]:int;
      label B_y:
      b = h[19]:int + 1;
      label B_w:
      h[19]:int = b;
      if (s > -1) goto B_u;
      s = 0 - s;
      r = r | 8192;
      goto B_u;
      label B_v:
      s = f_kb(h + 76);
      if (s < 0) goto B_h;
      b = h[19]:int;
      label B_u:
      t = -1;
      if (b[0]:ubyte != 46) goto B_z;
      if (b[1]:ubyte != 42) goto B_aa;
      if (eqz(f_ab(b[2]:byte))) goto B_ba;
      b = h[19]:int;
      if (b[3]:ubyte != 36) goto B_ba;
      ((b[2]:byte << 2) + e + -192)[0]:int = 10;
      t = ((b[2]:byte << 3) + d + -384)[0]:int;
      h[19]:int = (b = b + 4);
      goto B_z;
      label B_ba:
      if (k) goto B_h;
      if (a) goto B_da;
      t = 0;
      goto B_ca;
      label B_da:
      c[0] = (b = c[0]) + 4;
      t = b[0]:int;
      label B_ca:
      h[19]:int = (b = h[19]:int + 2);
      goto B_z;
      label B_aa:
      h[19]:int = b + 1;
      t = f_kb(h + 76);
      b = h[19]:int;
      label B_z:
      n = 0;
      loop L_ea {
        o = n;
        u = -1;
        if (b[0]:byte + -65 > 57) goto B_a;
        h[19]:int = (p = b + 1);
        n = b[0]:byte;
        b = p;
        n = (n + o * 58 + 1359)[0]:ubyte;
        if (n + -1 < 8) continue L_ea;
      }
      if (n == 19) goto B_ha;
      if (eqz(n)) goto B_a;
      if (q < 0) goto B_ia;
      e[q]:int = n;
      h[8]:long = d[q]:long;
      goto B_ga;
      label B_ia:
      if (eqz(a)) goto B_e;
      f_lb(h + 64, n, c, g);
      p = h[19]:int;
      goto B_fa;
      label B_ha:
      u = -1;
      if (q > -1) goto B_a;
      label B_ga:
      b = 0;
      if (eqz(a)) continue L_b;
      label B_fa:
      var v:int = r & -65537;
      n = select_if(v, r, r & 8192);
      u = 0;
      q = 1403;
      r = j;
      b = (p + -1)[0]:byte;
      b = select_if(select_if(b & -33, b, (b & 15) == 3), b, o);
      br_table[B_ua, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_ka, B_f, B_ja, B_sa, B_ka, B_ka, B_ka, B_f, B_sa, B_f, B_f, B_f, B_f, B_wa, B_ta, B_va, B_f, B_f, B_pa, B_f, B_xa, B_f, B_f, B_ua, ..B_ya](
        b + -88);
      label B_ya:
      r = j;
      br_table[B_ka, B_f, B_na, B_f, B_ka, B_ka, B_ka, ..B_za](b + -65)
      label B_za:
      if (b == 83) goto B_oa;
      goto B_g;
      label B_xa:
      u = 0;
      q = 1403;
      w = h[8]:long;
      goto B_ra;
      label B_wa:
      b = 0;
      br_table[B_gb, B_fb, B_eb, B_db, B_cb, L_b, B_bb, B_ab, ..L_b](
        o & 255)
      label B_gb:
      (h[16]:int)[0]:int = l;
      continue L_b;
      label B_fb:
      (h[16]:int)[0]:int = l;
      continue L_b;
      label B_eb:
      (h[16]:int)[0]:long = i64_extend_i32_s(l);
      continue L_b;
      label B_db:
      (h[16]:int)[0]:short = l;
      continue L_b;
      label B_cb:
      (h[16]:int)[0]:byte = l;
      continue L_b;
      label B_bb:
      (h[16]:int)[0]:int = l;
      continue L_b;
      label B_ab:
      (h[16]:int)[0]:long = i64_extend_i32_s(l);
      continue L_b;
      label B_va:
      t = select_if(t, 8, t > 8);
      n = n | 8;
      b = 120;
      label B_ua:
      u = 0;
      q = 1403;
      m = f_mb(h[8]:long, j, b & 32);
      if (eqz(n & 8)) goto B_qa;
      if (eqz(h[8]:long)) goto B_qa;
      q = (b >> 4) + 1403;
      u = 2;
      goto B_qa;
      label B_ta:
      u = 0;
      q = 1403;
      m = f_nb(h[8]:long, j);
      if (eqz(n & 8)) goto B_qa;
      t = select_if(t, (b = j - m) + 1, t > b);
      goto B_qa;
      label B_sa:
      w = h[8]:long;
      if (w > -1L) goto B_hb;
      h[8]:long = (w = 0L - w);
      u = 1;
      q = 1403;
      goto B_ra;
      label B_hb:
      if (eqz(n & 2048)) goto B_ib;
      u = 1;
      q = 1404;
      goto B_ra;
      label B_ib:
      q = select_if(1405, 1403, u = n & 1);
      label B_ra:
      m = f_ob(w, j);
      label B_qa:
      n = select_if(n & -65537, n, t > -1);
      w = h[8]:long;
      if (t) goto B_jb;
      if (eqz(eqz(w))) goto B_jb;
      t = 0;
      m = j;
      goto B_g;
      label B_jb:
      t = select_if(t, b = j - m + eqz(w), t > b);
      goto B_g;
      label B_pa:
      u = 0;
      b = h[16]:int;
      m = select_if(b, 1413, b);
      b = f_bb(m, 0, t);
      r = select_if(b, m + t, b);
      n = v;
      t = select_if(b - m, t, b);
      goto B_f;
      label B_oa:
      if (eqz(t)) goto B_kb;
      o = h[16]:int;
      goto B_ma;
      label B_kb:
      b = 0;
      f_pb(a, 32, s, 0, n);
      goto B_la;
      label B_na:
      h[3]:int = 0;
      h[2]:int = h[8]:long;
      h[16]:int = h + 8;
      t = -1;
      o = h + 8;
      label B_ma:
      b = 0;
      loop L_mb {
        p = o[0];
        if (eqz(p)) goto B_lb;
        p = f_fb(h + 4, p);
        m = p < 0;
        if (m) goto B_nb;
        if (p > t - b) goto B_nb;
        o = o + 4;
        if (t > (b = p + b)) continue L_mb;
        goto B_lb;
        label B_nb:
      }
      u = -1;
      if (m) goto B_a;
      label B_lb:
      f_pb(a, 32, s, b, n);
      if (b) goto B_ob;
      b = 0;
      goto B_la;
      label B_ob:
      p = 0;
      o = h[16]:int;
      loop L_pb {
        m = o[0];
        if (eqz(m)) goto B_la;
        m = f_fb(h + 4, m);
        p = m + p;
        if (p > b) goto B_la;
        f_jb(a, h + 4, m);
        o = o + 4;
        if (p < b) continue L_pb;
      }
      label B_la:
      f_pb(a, 32, s, b, n ^ 8192);
      b = select_if(s, b, s > b);
      continue L_b;
      label B_ka:
      b = call_indirect(a, h[8]:double, s, t, n, b, f);
      continue L_b;
      label B_ja:
      h[55]:byte = h[8]:long;
      t = 1;
      m = i;
      r = j;
      n = v;
      goto B_f;
      label B_k:
      h[19]:int = (o = b + 1);
      n = b[1]:ubyte;
      b = o;
      continue L_j;
    }
    unreachable;
    label B_i:
    u = l;
    if (a) goto B_a;
    if (eqz(k)) goto B_e;
    b = 1;
    loop L_rb {
      n = e[b]:int;
      if (eqz(n)) goto B_qb;
      f_lb(d + (b << 3), n, c, g);
      u = 1;
      b = b + 1;
      if (b != 10) continue L_rb;
      goto B_a;
    }
    unreachable;
    label B_qb:
    u = 1;
    if (b >= 10) goto B_a;
    loop L_sb {
      if (e[b]:int) goto B_h;
      u = 1;
      b = b + 1;
      if (b == 10) goto B_a;
      continue L_sb;
    }
    unreachable;
    label B_h:
    u = -1;
    goto B_a;
    label B_g:
    r = j;
    label B_f:
    f_pb(
      a,
      32,
      b = select_if(o = u + (r = select_if(p = r - m, t, t < p)), s, s < o),
      o,
      n);
    f_jb(a, q, u);
    f_pb(a, 48, b, o, n ^ 65536);
    f_pb(a, 48, r, p, 0);
    f_jb(a, m, p);
    f_pb(a, 32, b, o, n ^ 8192);
    continue L_b;
    label B_e:
  }
  u = 0;
  label B_a:
  g_a = h + 80;
  return u;
}

function f_jb(a:ubyte_ptr, b:int, c:int) {
  if (a[0] & 32) goto B_a;
  f_lc(b, c, a);
  label B_a:
}

function f_kb(a:int_ptr):int {
  var b:int = 0;
  if (eqz(f_ab((a[0])[0]:byte))) goto B_a;
  loop L_b {
    var c:{ a:byte, b:byte } = a[0];
    var d:int = c.a;
    a[0] = c + 1;
    b = d + b * 10 + -48;
    if (f_ab(c.b)) continue L_b;
  }
  label B_a:
  return b;
}

function f_lb(a:int, b:int, c:int_ptr, d:int) {
  if (b > 20) goto B_a;
  br_table[B_k, B_j, B_i, B_h, B_g, B_f, B_e, B_d, B_c, B_b, ..B_a](
    b + -9)
  label B_k:
  c[0] = (b = c[0]) + 4;
  a[0]:int = b[0]:int;
  return ;
  label B_j:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:int;
  return ;
  label B_i:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:uint;
  return ;
  label B_h:
  c[0] = (b = c[0] + 7 & -8) + 8;
  a[0]:long = b[0]:long;
  return ;
  label B_g:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:short;
  return ;
  label B_f:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:ushort;
  return ;
  label B_e:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:byte;
  return ;
  label B_d:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:ubyte;
  return ;
  label B_c:
  c[0] = (b = c[0] + 7 & -8) + 8;
  a[0]:double = b[0]:double;
  return ;
  label B_b:
  call_indirect(a, c, d);
  label B_a:
}

function f_mb(a:long, b:byte_ptr, c:int):int {
  if (eqz(a)) goto B_a;
  loop L_b {
    b = b + -1;
    b[0] = ((i32_wrap_i64(a) & 15) + 1888)[0]:ubyte | c;
    a = a >> 4L;
    if (a != 0L) continue L_b;
  }
  label B_a:
  return b;
}

function f_nb(a:long, b:byte_ptr):int {
  if (eqz(a)) goto B_a;
  loop L_b {
    b = b + -1;
    b[0] = (i32_wrap_i64(a) & 7) | 48;
    a = a >> 3L;
    if (a != 0L) continue L_b;
  }
  label B_a:
  return b;
}

function f_ob(a:long, b:byte_ptr):int {
  var f:long;
  var f:long;
  var c:int;
  var c:int;
  var c:int;
  var d:int;
  var c:int;
  if (a >= 4294967296L) goto B_b;
  f = a;
  goto B_a;
  label B_b:
  loop L_c {
    b = b + -1;
    b[0] = i32_wrap_i64(a - (f = a / 10L) * 10L) | 48;
    c = a > 42949672959L;
    a = f;
    if (c) continue L_c;
  }
  label B_a:
  c = i32_wrap_i64(f);
  if (eqz(c)) goto B_d;
  loop L_e {
    b = b + -1;
    b[0] = c - (d = c / 10) * 10 | 48;
    var e:int = c > 9;
    c = d;
    if (e) continue L_e;
  }
  label B_d:
  return b;
}

function f_pb(a:int, b:int, c:int, d:int, e:int) {
  var f:int = g_a - 256;
  g_a = f;
  if (c <= d) goto B_a;
  if (e & 73728) goto B_a;
  memset(f, b & 255, select_if(c = c - d, 256, d = c < 256));
  if (d) goto B_b;
  loop L_c {
    f_jb(a, f, 256);
    c = c + -256;
    if (c > 255) continue L_c;
  }
  label B_b:
  f_jb(a, f, c);
  label B_a:
  g_a = f + 256;
}

function f_qb(a:int, b:int, c:int):int {
  return f_hb(a, b, c, 2, 3)
}

function f_rb(a:int, b:double, c:int, d:int, e:int, f:int):int {
  var y:long;
  var i:int;
  var k:int_ptr;
  var j:ubyte_ptr;
  var i:int;
  var l:int;
  var n:int;
  var l:int;
  var p:int;
  var l:int;
  var l:int;
  var p:int;
  var p:int;
  var p:int;
  var l:int;
  var s:int;
  var l:int;
  var l:int;
  var y:long;
  var y:long;
  var l:int;
  var l:int;
  var s:int;
  var y:long;
  var l:int;
  var s:int;
  var s:int;
  var l:int;
  var l:int;
  var s:int;
  var l:int;
  var l:int;
  var o:ubyte_ptr;
  var n:int;
  var s:int;
  var l:int;
  var s:int;
  var s:int;
  var s:int;
  var k:int_ptr;
  var k:int_ptr;
  var s:int;
  var x:int;
  var k:int_ptr;
  var l:int;
  var s:int;
  var s:int;
  var s:int;
  var l:int;
  var l:int;
  var k:int_ptr;
  var s:int;
  var l:int;
  var l:int;
  var s:int;
  var l:int;
  var s:int;
  var s:int;
  var x:int;
  var x:int;
  var o:ubyte_ptr;
  var n:int;
  var o:ubyte_ptr;
  var n:int;
  var l:int;
  var x:int;
  var v:byte_ptr;
  var p:int;
  var x:int;
  var v:byte_ptr;
  var x:int;
  var x:int;
  var x:int;
  var k:int_ptr;
  var v:byte_ptr;
  var v:byte_ptr;
  var k:int_ptr;
  var t:byte_ptr;
  var l:int;
  var x:int;
  var x:int;
  var t:byte_ptr;
  var l:int;
  var x:int;
  var u:int;
  var w:int;
  var j:ubyte_ptr;
  var k:int_ptr;
  var v:byte_ptr;
  var x:int;
  var k:int_ptr;
  var x:int;
  var k:int_ptr;
  var k:int_ptr;
  var k:int_ptr;
  var s:int;
  var s:int;
  var s:int;
  var k:int_ptr;
  var k:int_ptr;
  var s:int;
  var s:int;
  var x:int;
  var x:int;
  var k:int_ptr;
  var l:int;
  var l:int;
  var l:int;
  var s:int;
  var x:int;
  var l:int;
  var n:int;
  var o:ubyte_ptr;
  var o:ubyte_ptr;
  var l:int;
  var k:int_ptr;
  var w:int;
  var x:int;
  var k:int_ptr;
  var k:int_ptr;
  var l:int;
  var v:byte_ptr;
  var k:int_ptr;
  var x:int;
  var v:byte_ptr;
  var o:ubyte_ptr;
  var x:int;
  var l:int;
  var l:int;
  var o:ubyte_ptr;
  var l:int;
  var o:ubyte_ptr;
  var x:int;
  var l:int;
  var l:int;
  var o:ubyte_ptr;
  var l:int;
  var o:ubyte_ptr;
  var w:int;
  var u:int;
  var v:byte_ptr;
  var l:int;
  var l:int;
  var l:int;
  var l:int;
  var l:int;
  var t:byte_ptr;
  var l:int;
  var t:byte_ptr;
  var i:int;
  var o:ubyte_ptr;
  var x:int;
  var l:int;
  var j:ubyte_ptr;
  var i:int;
  var k:int_ptr;
  var v:byte_ptr;
  var s:int;
  var s:int;
  var x:int;
  var s:int;
  var s:int;
  var x:int;
  var l:int;
  var l:int;
  var l:int;
  var l:int;
  var l:int;
  var v:byte_ptr;
  var l:int;
  var l:int;
  var s:int;
  var s:int;
  var u:int;
  var s:int;
  var o:ubyte_ptr;
  var s:int;
  var l:int;
  var l:int;
  var l:int;
  var l:int;
  var l:int;
  var o:ubyte_ptr;
  var o:ubyte_ptr;
  var o:ubyte_ptr;
  var s:int;
  var s:int;
  var o:ubyte_ptr;
  var l:int;
  var x:int;
  var o:ubyte_ptr;
  var s:int;
  var s:int;
  var s:int;
  var l:int;
  var s:int;
  var l:int;
  var l:int;
  var l:int;
  var l:int;
  var l:int;
  var l:int;
  var w:int;
  var o:ubyte_ptr;
  var l:int;
  var l:int;
  var o:ubyte_ptr;
  var o:ubyte_ptr;
  var x:int;
  var o:ubyte_ptr;
  var x:int;
  var v:byte_ptr;
  var o:ubyte_ptr;
  var o:ubyte_ptr;
  var t:byte_ptr;
  var t:byte_ptr;
  var o:ubyte_ptr;
  var l:int;
  var k:int_ptr;
  var j:ubyte_ptr;
  var j:ubyte_ptr;
  var l:int;
  var aa:double;
  var l:int;
  var l:int;
  var o:ubyte_ptr;
  var aa:double;
  var aa:double;
  var aa:double;
  var aa:double;
  var l:int;
  var l:int;
  var l:int;
  var l:int;
  var i:int;
  var l:int;
  var v:byte_ptr;
  var l:int;
  var s:int;
  var s:int;
  var l:int;
  var s:int;
  var r:int;
  var s:int;
  var l:int;
  var s:int;
  var x:int;
  var l:int;
  var l:int;
  var s:int;
  var v:byte_ptr;
  var v:byte_ptr;
  var s:int;
  var l:int;
  var w:int;
  var o:ubyte_ptr;
  var w:int;
  var k:int_ptr;
  var s:int;
  var l:int;
  var s:int;
  var v:byte_ptr;
  var v:byte_ptr;
  var r:int;
  var k:int_ptr;
  var k:int_ptr;
  var k:int_ptr;
  var g:int = g_a - 560;
  g_a = g;
  var h:int = 0;
  g[11]:int = 0;
  y = f_tb(b);
  if (y > -1L) goto B_b;
  i = 1;
  j = 1904;
  b = -(b);
  y = f_tb(b);
  goto B_a;
  label B_b:
  i = 1;
  if (eqz(e & 2048)) goto B_c;
  j = 1907;
  goto B_a;
  label B_c:
  j = 1910;
  if (e & 1) goto B_a;
  i = 0;
  h = 1;
  j = 1905;
  label B_a:
  if ((y & 9218868437227405312L) != 9218868437227405312L) goto B_e;
  f_pb(a, 32, c, k = i + 3, e & -65537);
  f_jb(a, j, i);
  f_jb(a,
       select_if(select_if(1931, 1935, l = f & 32),
                 select_if(1923, 1927, l),
                 b != b),
       3);
  f_pb(a, 32, c, k, e ^ 8192);
  goto B_d;
  label B_e:
  var m:int = g + 16;
  b = f_gb(b, g + 44);
  b = b + b;
  if (b == 0.0) goto B_i;
  g[11]:int = (l = g[11]:int) + -1;
  n = f | 32;
  if (n != 97) goto B_h;
  goto B_f;
  label B_i:
  n = f | 32;
  if (n == 97) goto B_f;
  o = select_if(6, d, d < 0);
  p = g[11]:int;
  goto B_g;
  label B_h:
  g[11]:int = (p = l + -29);
  o = select_if(6, d, d < 0);
  b = b * 268435456.0;
  label B_g:
  var q:int = select_if(g + 48, g + 336, p < 0);
  r = q;
  loop L_j {
    if (eqz(b < 4294967296.0 & b >= 0.0)) goto B_l;
    l = i32_trunc_f64_u(b);
    goto B_k;
    label B_l:
    l = 0;
    label B_k:
    r[0]:int = l;
    r = r + 4;
    b = (b - f64_convert_i32_u(l)) * 1000000000.0;
    if (b != 0.0) continue L_j;
  }
  if (p >= 1) goto B_n;
  d = p;
  l = r;
  s = q;
  goto B_m;
  label B_n:
  s = q;
  d = p;
  loop L_o {
    d = select_if(d, 29, d < 29);
    l = r + -4;
    if (l < s) goto B_p;
    var z:long = i64_extend_i32_u(d);
    y = 0L;
    loop L_q {
      l[0]:int = 
        (y = (l[0]:uint << z) + (y & 4294967295L)) - 
        (y = y / 1000000000L) * 1000000000L;
      l = l + -4;
      if (l >= s) continue L_q;
    }
    l = i32_wrap_i64(y);
    if (eqz(l)) goto B_p;
    s = s + -4;
    s[0]:int = l;
    label B_p:
    loop L_s {
      l = r;
      if (l <= s) goto B_r;
      r = l + -4;
      if (eqz(r[0]:int)) continue L_s;
    }
    label B_r:
    g[11]:int = (d = g[11]:int - d);
    r = l;
    if (d > 0) continue L_o;
  }
  label B_m:
  if (d > -1) goto B_t;
  t = (o + 25) / 9 + 1;
  u = n == 102;
  loop L_u {
    k = select_if(9, 0 - d, d < -9);
    if (s < l) goto B_w;
    s = select_if(s, s + 4, s[0]:int);
    goto B_v;
    label B_w:
    v = 1000000000 >> k;
    w = -1 << k ^ -1;
    d = 0;
    r = s;
    loop L_x {
      r[0]:int = ((x = r[0]:int) >> k) + d;
      d = (x & w) * v;
      r = r + 4;
      if (r < l) continue L_x;
    }
    s = select_if(s, s + 4, s[0]:int);
    if (eqz(d)) goto B_v;
    l[0]:int = d;
    l = l + 4;
    label B_v:
    g[11]:int = (d = g[11]:int + k);
    r = select_if(q, s, u);
    l = select_if(r + (t << 2), l, l - r >> 2 > t);
    if (d < 0) continue L_u;
  }
  label B_t:
  r = 0;
  if (s >= l) goto B_y;
  r = (q - s >> 2) * 9;
  d = 10;
  x = s[0]:int;
  if (x < 10) goto B_y;
  loop L_z {
    r = r + 1;
    if (x >= (d = d * 10)) continue L_z;
  }
  label B_y:
  d = o - select_if(0, r, n == 102) - (o != 0 & n == 103);
  if (d >= (l - q >> 2) * 9 + -9) goto B_aa;
  x = d + 9216;
  v = x / 9;
  k = (v << 2) + select_if(g + 48 | 4, g + 340, p < 0) + -4096;
  d = 10;
  x = x - v * 9;
  if (x > 7) goto B_ba;
  loop L_ca {
    d = d * 10;
    x = x + 1;
    if (x != 8) continue L_ca;
  }
  label B_ba:
  v = k[0];
  x = v - (w = v / d) * d;
  t = k + 4;
  if (t != l) goto B_ea;
  if (eqz(x)) goto B_da;
  label B_ea:
  aa = 
    select_if(
      0.5,
      select_if(select_if(1.0, 1.5, x == (u = d >> 1)), 1.5, t == l),
      x < u);
  b = select_if(9007199254740994.0, 9007199254740992.0, w & 1);
  if (h) goto B_fa;
  if (j[0] != 45) goto B_fa;
  aa = -(aa);
  b = -(b);
  label B_fa:
  k[0] = (x = v - x);
  if (b + aa == b) goto B_da;
  k[0] = (r = x + d);
  if (r < 1000000000) goto B_ga;
  loop L_ha {
    k[0] = 0;
    k = k + -4;
    if (k >= s) goto B_ia;
    s = s + -4;
    s[0]:int = 0;
    label B_ia:
    k[0] = (r = k[0] + 1);
    if (r > 999999999) continue L_ha;
  }
  label B_ga:
  r = (q - s >> 2) * 9;
  d = 10;
  x = s[0]:int;
  if (x < 10) goto B_da;
  loop L_ja {
    r = r + 1;
    if (x >= (d = d * 10)) continue L_ja;
  }
  label B_da:
  d = k + 4;
  l = select_if(d, l, l > d);
  label B_aa:
  loop L_la {
    d = l;
    x = d <= s;
    if (x) goto B_ka;
    l = d + -4;
    if (eqz(l[0]:int)) continue L_la;
  }
  label B_ka:
  if (n == 103) goto B_na;
  w = e & 8;
  goto B_ma;
  label B_na:
  o = 
    select_if(r ^ -1, -1, k = (l = select_if(o, 1, o)) > r & r > -5) + l;
  f = select_if(-1, -2, k) + f;
  w = e & 8;
  if (w) goto B_ma;
  l = -9;
  if (x) goto B_oa;
  k = (d + -4)[0]:int;
  if (eqz(k)) goto B_oa;
  x = 10;
  l = 0;
  if (k % 10) goto B_oa;
  loop L_pa {
    v = l;
    l = v + 1;
    if (eqz(k % (x = x * 10))) continue L_pa;
  }
  l = v ^ -1;
  label B_oa:
  x = (d - q >> 2) * 9;
  if ((f & -33) != 70) goto B_qa;
  w = 0;
  o = select_if(o, l = select_if(l = x + l + -9, 0, l > 0), o < l);
  goto B_ma;
  label B_qa:
  w = 0;
  o = select_if(o, l = select_if(l = r + x + l + -9, 0, l > 0), o < l);
  label B_ma:
  u = o | w;
  x = u != 0;
  v = f & -33;
  if (v != 70) goto B_sa;
  l = select_if(r, 0, r > 0);
  goto B_ra;
  label B_sa:
  if (
    m - (l = f_ob(i64_extend_i32_u(r + (l = r >> 31) ^ l), m)) > 1) goto B_ta;
  loop L_ua {
    l = l + -1;
    l[0]:byte = 48;
    if (m - l < 2) continue L_ua;
  }
  label B_ta:
  t = l + -2;
  t[0] = f;
  (l + -1)[0]:byte = select_if(45, 43, r < 0);
  l = m - t;
  label B_ra:
  f_pb(a, 32, c, k = i + o + x + l + 1, e);
  f_jb(a, j, i);
  f_pb(a, 48, c, k, e ^ 65536);
  if (v != 70) goto B_ya;
  v = g + 16 | 8;
  r = g + 16 | 9;
  x = select_if(q, s, s > q);
  s = x;
  loop L_za {
    l = f_ob(s[0]:uint, r);
    if (s == x) goto B_bb;
    if (l <= g + 16) goto B_ab;
    loop L_cb {
      l = l + -1;
      l[0]:byte = 48;
      if (l > g + 16) continue L_cb;
      goto B_ab;
    }
    unreachable;
    label B_bb:
    if (l != r) goto B_ab;
    g[24]:byte = 48;
    l = v;
    label B_ab:
    f_jb(a, l, r - l);
    s = s + 4;
    if (s <= q) continue L_za;
  }
  if (eqz(u)) goto B_db;
  f_jb(a, 1939, 1);
  label B_db:
  if (s >= d) goto B_xa;
  if (o < 1) goto B_xa;
  loop L_eb {
    l = f_ob(s[0]:uint, r);
    if (l <= g + 16) goto B_fb;
    loop L_gb {
      l = l + -1;
      l[0]:byte = 48;
      if (l > g + 16) continue L_gb;
    }
    label B_fb:
    f_jb(a, l, select_if(o, 9, o < 9));
    l = o + -9;
    s = s + 4;
    if (s >= d) goto B_wa;
    x = o > 9;
    o = l;
    if (x) continue L_eb;
    goto B_wa;
  }
  unreachable;
  label B_ya:
  if (o < 0) goto B_hb;
  v = select_if(d, s + 4, d > s);
  q = g + 16 | 8;
  d = g + 16 | 9;
  r = s;
  loop L_ib {
    l = f_ob(r[0]:uint, d);
    if (l != d) goto B_jb;
    g[24]:byte = 48;
    l = q;
    label B_jb:
    if (r == s) goto B_lb;
    if (l <= g + 16) goto B_kb;
    loop L_mb {
      l = l + -1;
      l[0]:byte = 48;
      if (l > g + 16) continue L_mb;
      goto B_kb;
    }
    unreachable;
    label B_lb:
    f_jb(a, l, 1);
    l = l + 1;
    if (w) goto B_nb;
    if (o < 1) goto B_kb;
    label B_nb:
    f_jb(a, 1939, 1);
    label B_kb:
    f_jb(a, l, select_if(x = d - l, o, o > x));
    o = o - x;
    r = r + 4;
    if (r >= v) goto B_hb;
    if (o > -1) continue L_ib;
  }
  label B_hb:
  f_pb(a, 48, o + 18, 18, 0);
  f_jb(a, t, m - t);
  goto B_va;
  label B_xa:
  l = o;
  label B_wa:
  f_pb(a, 48, l + 9, 9, 0);
  label B_va:
  f_pb(a, 32, c, k, e ^ 8192);
  goto B_d;
  label B_f:
  o = select_if(j + 9, j, r = f & 32);
  if (d > 11) goto B_ob;
  l = 12 - d;
  if (eqz(l)) goto B_ob;
  aa = 8.0;
  loop L_pb {
    aa = aa * 16.0;
    l = l + -1;
    if (l) continue L_pb;
  }
  if (o[0] != 45) goto B_qb;
  b = -(aa + -(b) - aa);
  goto B_ob;
  label B_qb:
  b = b + aa - aa;
  label B_ob:
  l = g[11]:int;
  l = f_ob(i64_extend_i32_u(l + (l = l >> 31) ^ l), m);
  if (l != m) goto B_rb;
  g[15]:byte = 48;
  l = g + 15;
  label B_rb:
  w = i | 2;
  s = g[11]:int;
  v = l + -2;
  v[0] = f + 15;
  (l + -1)[0]:byte = select_if(45, 43, s < 0);
  x = e & 8;
  s = g + 16;
  loop L_sb {
    l = s;
    if (eqz(abs(b) < 2147483648.0)) goto B_ub;
    s = i32_trunc_f64_s(b);
    goto B_tb;
    label B_ub:
    s = -2147483648;
    label B_tb:
    l[0]:byte = (s + 1888)[0]:ubyte | r;
    b = (b - f64_convert_i32_s(s)) * 16.0;
    s = l + 1;
    if (s - g + 16 != 1) goto B_vb;
    if (x) goto B_wb;
    if (d > 0) goto B_wb;
    if (b == 0.0) goto B_vb;
    label B_wb:
    l[1]:byte = 46;
    s = l + 2;
    label B_vb:
    if (b != 0.0) continue L_sb;
  }
  if (eqz(d)) goto B_yb;
  if (s - g + 16 + -2 >= d) goto B_yb;
  l = d + m - v + 2;
  goto B_xb;
  label B_yb:
  l = m - g + 16 - v + s;
  label B_xb:
  f_pb(a, 32, c, k = l + w, e);
  f_jb(a, o, w);
  f_pb(a, 48, c, k, e ^ 65536);
  f_jb(a, g + 16, s = s - g + 16);
  f_pb(a, 48, l - s + (r = m - v), 0, 0);
  f_jb(a, v, r);
  f_pb(a, 32, c, k, e ^ 8192);
  label B_d:
  g_a = g + 560;
  return select_if(c, k, k < c);
}

function f_sb(a:double_ptr, b:int_ptr) {
  var c:{ a:long, b:long }
  b[0] = (c = b[0] + 15 & -16) + 16;
  a[0] = f_bc(c.a, c.b);
}

function f_tb(a:double):long {
  return i64_reinterpret_f64(a)
}

function f_ub():int {
  f_wb(2568);
  return 2576;
}

function f_vb() {
  f_xb(2568)
}

function f_wb(a:int) {
}

function f_xb(a:int) {
}

function f_yb(a:int):int {
  if (a) goto B_a;
  return 0;
  label B_a:
  errno_location()[0]:int = a;
  return -1;
}

function f_zb(a:{ a:long, b:long }, b:long, c:long, d:int) {
  var e:long;
  if (eqz(d & 64)) goto B_b;
  c = b << i64_extend_i32_u(d + -64);
  b = 0L;
  goto B_a;
  label B_b:
  if (eqz(d)) goto B_a;
  c = b >> i64_extend_i32_u(64 - d) | c << (e = i64_extend_i32_u(d));
  b = b << e;
  label B_a:
  a.a = b;
  a.b = c;
}

function f_ac(a:{ a:long, b:long }, b:long, c:long, d:int) {
  var e:long;
  if (eqz(d & 64)) goto B_b;
  b = c >> i64_extend_i32_u(d + -64);
  c = 0L;
  goto B_a;
  label B_b:
  if (eqz(d)) goto B_a;
  b = c << i64_extend_i32_u(64 - d) | b >> (e = i64_extend_i32_u(d));
  c = c >> e;
  label B_a:
  a.a = b;
  a.b = c;
}

function f_bc(a:long, b:long):double {
  var f:long;
  var f:long;
  var e:long;
  var e:long;
  var e:long;
  var e:long;
  var e:long;
  var e:long;
  var e:long;
  var e:long;
  var f:long;
  var e:long;
  var f:long;
  var f:long;
  var f:long;
  var c:long_ptr = g_a - 32;
  g_a = c;
  e = b & 9223372036854775807L;
  if (e + -4323737117252386816L >= e + -4899634919602388992L) goto B_b;
  e = a >> 60L | b << 4L;
  a = a & 1152921504606846975L;
  if (a < 576460752303423489L) goto B_c;
  f = e + 4611686018427387905L;
  goto B_a;
  label B_c:
  f = e + 4611686018427387904L;
  if ((a ^ 576460752303423488L) != 0L) goto B_a;
  f = (f & 1L) + f;
  goto B_a;
  label B_b:
  if (
    select_if(eqz(a), e < 9223090561878065152L, e == 9223090561878065152L)) goto B_d;
  f = ((a >> 60L | b << 4L) & 2251799813685247L) | 9221120237041090560L;
  goto B_a;
  label B_d:
  f = 9218868437227405312L;
  if (e > 4899634919602388991L) goto B_a;
  f = 0L;
  var d:int = i32_wrap_i64(e >> 48L);
  if (d < 15249) goto B_a;
  f_zb(c + 16, a, e = (b & 281474976710655L) | 281474976710656L, d + -15233);
  f_ac(c, a, e, 15361 - d);
  e = c[0];
  f = e >> 60L | (c + 8)[0]:long << 4L;
  e = (e & 1152921504606846975L) | 
      i64_extend_i32_u((c[2] | (c + 16 + 8)[0]:long) != 0L);
  if (e < 576460752303423489L) goto B_e;
  f = f + 1L;
  goto B_a;
  label B_e:
  if ((e ^ 576460752303423488L) != 0L) goto B_a;
  f = (f & 1L) + f;
  label B_a:
  g_a = c + 32;
  return f64_reinterpret_i64(f | (b & -9223372036854775808L));
}

export function malloc(a:int):int {
  var d:{ a:int, b:int, c:int, d:int }
  var e:int;
  var g:int;
  var g:int;
  var g:int;
  var g:int;
  var d:{ a:int, b:int, c:int, d:int }
  var h:int;
  var e:int;
  var e:int;
  var e:int;
  var g:int;
  var e:int;
  var g:int;
  var e:int;
  var e:int;
  var e:int;
  var g:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var e:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var c:int_ptr;
  var g:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var e:int;
  var e:int;
  var d:{ a:int, b:int, c:int, d:int }
  var e:int;
  var d:{ a:int, b:int, c:int, d:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var g:int;
  var i:int;
  var d:{ a:int, b:int, c:int, d:int }
  var e:int;
  var g:int;
  var c:int_ptr;
  var c:int_ptr;
  var d:{ a:int, b:int, c:int, d:int }
  var d:{ a:int, b:int, c:int, d:int }
  var d:{ a:int, b:int, c:int, d:int }
  var e:int;
  var e:int;
  var e:int;
  var d:{ a:int, b:int, c:int, d:int }
  var e:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var g:int;
  var e:int;
  var g:int;
  var e:int;
  var g:int;
  var e:int;
  var e:int;
  var e:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var d:{ a:int, b:int, c:int, d:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var g:int;
  var g:int;
  var d:{ a:int, b:int, c:int, d:int }
  var g:int;
  var e:int;
  var g:int;
  var e:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var g:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var d:{ a:int, b:int, c:int, d:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var i:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var i:int;
  var i:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var g:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var g:int;
  var i:int;
  var g:int;
  var i:int;
  var i:int;
  var m:int;
  var h:int;
  var d:{ a:int, b:int, c:int, d:int }
  var e:int;
  var e:int;
  var g:int;
  var g:int;
  var e:int;
  var g:int;
  var d:{ a:int, b:int, c:int, d:int }
  var d:{ a:int, b:int, c:int, d:int }
  var m:int;
  var g:int;
  var d:{ a:int, b:int, c:int, d:int }
  var m:int;
  var m:int;
  var g:int;
  var d:{ a:int, b:int, c:int, d:int }
  var c:int_ptr;
  var e:int;
  var c:int_ptr;
  var g:int;
  var c:int_ptr;
  var g:int;
  var g:int;
  var g:int;
  var c:int_ptr;
  var g:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var c:int_ptr;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var g:int;
  var i:int;
  var m:int;
  var h:int;
  var g:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var g:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var g:int;
  var g:int;
  var g:int;
  var d:{ a:int, b:int, c:int, d:int }
  var c:int_ptr;
  var e:int;
  var g:int;
  var c:int_ptr;
  var e:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var i:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var g:int;
  var g:int;
  var i:int;
  var e:int;
  var d:{ a:int, b:int, c:int, d:int }
  var i:int;
  var d:{ a:int, b:int, c:int, d:int }
  var m:int;
  var i:int;
  var i:int;
  var i:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var i:int;
  var i:int;
  var i:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var i:int;
  var g:int;
  var i:int;
  var i:int;
  var g:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var g:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var c:int_ptr;
  var d:{ a:int, b:int, c:int, d:int }
  var d:{ a:int, b:int, c:int, d:int }
  var g:int;
  var g:int;
  var e:int;
  var d:{ a:int, b:int, c:int, d:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var g:int;
  var e:int;
  var g:int;
  var e:int;
  var d:{ a:int, b:int, c:int, d:int }
  var e:int;
  var e:int;
  var e:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var d:{ a:int, b:int, c:int, d:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var d:{ a:int, b:int, c:int, d:int }
  var d:{ a:int, b:int, c:int, d:int }
  var g:int;
  var e:int;
  var d:{ a:int, b:int, c:int, d:int }
  var e:int;
  var d:{ a:int, b:int, c:int, d:int }
  var c:int_ptr;
  var e:int;
  var i:int;
  var d:{ a:int, b:int, c:int, d:int }
  var e:int;
  var g:int;
  var i:int;
  var j:int_ptr;
  var g:int;
  var j:int_ptr;
  var e:int;
  var e:int;
  var g:int;
  var e:int;
  var g:int;
  var e:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var i:int;
  var e:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var i:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var e:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var c:int_ptr;
  var d:{ a:int, b:int, c:int, d:int }
  var c:int_ptr;
  var e:int;
  var c:int_ptr;
  var g:int;
  var e:int;
  var g:int;
  var c:int_ptr;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var c:int_ptr;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var m:int;
  var c:int_ptr;
  var c:int_ptr;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var d:{ a:int, b:int, c:int, d:int }
  var c:int_ptr;
  var h:int;
  var c:int_ptr;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var c:int_ptr;
  var c:int_ptr;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var i:int;
  var i:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var c:int_ptr;
  var d:{ a:int, b:int, c:int, d:int }
  var c:int_ptr;
  var e:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var c:int_ptr;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var e:int;
  var e:int;
  var e:int;
  var g:int;
  var c:int_ptr;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var e:int;
  var e:int;
  var g:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var e:int;
  var g:int;
  var e:int;
  var i:int;
  var c:int_ptr;
  var e:int;
  var e:int;
  var e:int;
  var c:int_ptr;
  var g:int;
  var e:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var c:int_ptr;
  var g:int;
  var g:int;
  var e:int;
  var g:int;
  var g:int;
  var e:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var c:int_ptr;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var m:int;
  var d:{ a:int, b:int, c:int, d:int }
  var g:int;
  var g:int;
  var g:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var m:int;
  var d:{ a:int, b:int, c:int, d:int }
  var m:int;
  var d:{ a:int, b:int, c:int, d:int }
  var e:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var g:int;
  var g:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var g:int;
  var g:int;
  var g:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var e:int;
  var e:int;
  var e:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var c:int_ptr;
  var e:int;
  var i:int;
  var c:int_ptr;
  var d:{ a:int, b:int, c:int, d:int }
  var c:int_ptr;
  var j:int_ptr;
  var d:{ a:int, b:int, c:int, d:int }
  var e:int;
  var i:int;
  var d:{ a:int, b:int, c:int, d:int }
  var c:int_ptr;
  var d:{ a:int, b:int, c:int, d:int }
  var d:{ a:int, b:int, c:int, d:int }
  var c:int_ptr;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var c:int_ptr;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var i:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var e:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var e:int;
  var c:int_ptr;
  var c:int_ptr;
  var e:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var e:int;
  var d:{ a:int, b:int, c:int, d:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var e:int;
  var d:{ a:int, b:int, c:int, d:int }
  var e:int;
  var d:{ a:int, b:int, c:int, d:int }
  var c:int_ptr;
  var e:int;
  var d:{ a:int, b:int, c:int, d:int }
  var c:int_ptr;
  var c:int_ptr;
  var d:{ a:int, b:int, c:int, d:int }
  var i:int;
  var j:int_ptr;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var d:{ a:int, b:int, c:int, d:int }
  var e:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var e:int;
  var c:int_ptr;
  var c:int_ptr;
  var d:{ a:int, b:int, c:int, d:int }
  var j:int_ptr;
  var j:int_ptr;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var c:int_ptr;
  var c:int_ptr;
  var c:int_ptr;
  var j:int_ptr;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var e:int;
  var c:int_ptr;
  var e:int;
  var e:int;
  var c:int_ptr;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var e:int;
  var c:int_ptr;
  var e:int;
  var e:int;
  var c:int_ptr;
  var h:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var h:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var g:int;
  var g:int;
  var e:int;
  var d:{ a:int, b:int, c:int, d:int }
  var e:int;
  var d:{ a:int, b:int, c:int, d:int }
  var e:int;
  var g:int;
  var e:int;
  var g:int;
  var g:int;
  var g:int;
  var e:int;
  var e:int;
  var e:int;
  var d:{ a:int, b:int, c:int, d:int }
  var d:{ a:int, b:int, c:int, d:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var d:{ a:int, b:int, c:int, d:int }
  var e:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var e:int;
  var e:int;
  var g:int;
  var e:int;
  var g:int;
  var e:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var e:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var i:int;
  var d:{ a:int, b:int, c:int, d:int }
  var g:int;
  var g:int;
  var d:{ a:int, b:int, c:int, d:int }
  var e:int;
  var e:int;
  var d:{ a:int, b:int, c:int, d:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var d:{ a:int, b:int, c:int, d:int }
  var e:int;
  var e:int;
  var d:{ a:int, b:int, c:int, d:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var i:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var i:int;
  var g:int;
  var g:int;
  var d:{ a:int, b:int, c:int, d:int }
  var g:int;
  var g:int;
  var g:int;
  var g:int;
  var c:int_ptr;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var i:int;
  var i:int;
  var m:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var e:int;
  var g:int;
  var g:int;
  var g:int;
  var e:int;
  var i:int;
  var i:int;
  var i:int;
  var i:int;
  var c:int_ptr;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var i:int;
  var g:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var i:int;
  var e:int;
  var i:int;
  var i:int;
  var e:int;
  var i:int;
  var e:int;
  var i:int;
  var c:int_ptr;
  var c:int_ptr;
  var c:int_ptr;
  var g:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var g:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var g:int;
  var e:int;
  var g:int;
  var e:int;
  var e:int;
  var e:int;
  var g:int;
  var c:int_ptr;
  var c:int_ptr;
  var g:int;
  var g:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var g:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var c:int_ptr;
  var e:int;
  var e:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var i:int;
  var g:int;
  var e:int;
  var e:int;
  var g:int;
  var c:int_ptr;
  var g:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var g:int;
  var c:int_ptr;
  var g:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var i:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var i:int;
  var e:int;
  var e:int;
  var g:int;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var d:{ a:int, b:int, c:int, d:int }
  var g:int;
  var d:{ a:int, b:int, c:int, d:int }
  var g:int;
  var g:int;
  var g:int;
  var d:{ a:int, b:int, c:int, d:int }
  var g:int;
  var m:int;
  var g:int;
  var e:int;
  var g:int;
  var e:int;
  var e:int;
  var e:int;
  var g:int;
  var e:int;
  var d:{ a:int, b:int, c:int, d:int }
  var d:{ a:int, b:int, c:int, d:int }
  var d:{ a:int, b:int, c:int, d:int }
  var g:int;
  var e:int;
  var d:{ a:int, b:int, c:int, d:int }
  var j:int_ptr;
  var i:int;
  var i:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var h:int;
  var g:int;
  var j:int_ptr;
  var j:int_ptr;
  var i:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var j:int_ptr;
  var i:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var i:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var e:int;
  var i:int;
  var e:int;
  var d:{ a:int, b:int, c:int, d:int }
  var i:int;
  var i:int;
  var d:{ a:int, b:int, c:int, d:int }
  var m:int;
  var e:int;
  var m:int;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  var g:int;
  var e:int;
  var g:int;
  var e:int;
  var m:int;
  var e:int;
  var m:int;
  var m:int;
  var m:int;
  var e:int;
  var e:int;
  var e:int;
  var g:int;
  var g:int;
  var d:{ a:int, b:int, c:int, d:int }
  var d:{ a:int, b:int, c:int, d:int }
  var g:int;
  var d:{ a:int, b:int, c:int, d:int }
  var e:int;
  var m:int;
  var m:int;
  var h:int;
  var h:int;
  var d:{ a:int, b:int, c:int, d:int }
  var g:int;
  var m:int;
  var m:int;
  var g:int;
  var e:int;
  var g:int;
  var d:{ a:int, b:int, c:int, d:int }
  var g:int;
  var e:int;
  var g:int;
  var d:{ a:int, b:int, c:int, d:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var d:{ a:int, b:int, c:int, d:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var m:int;
  var m:int;
  var g:int;
  var m:int;
  var m:int;
  var m:int;
  var m:int;
  var g:int;
  var m:int;
  var g:int;
  var m:int;
  var m:int;
  var m:int;
  var g:int;
  var m:int;
  var i:int;
  var l:int_ptr;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var i:int;
  var i:int;
  var j:int_ptr;
  var g:int;
  var l:int_ptr;
  var l:int_ptr;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var i:int;
  var i:int;
  var i:int;
  var l:int_ptr;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var i:int;
  var i:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var i:int;
  var i:int;
  var e:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var e:int;
  var d:{ a:int, b:int, c:int, d:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var d:{ a:int, b:int, c:int, d:int }
  var k:int_ptr;
  var e:int;
  var k:int_ptr;
  var e:int;
  var e:int;
  var h:int;
  var h:int;
  var d:{ a:int, b:int, c:int, d:int }
  var d:{ a:int, b:int, c:int, d:int }
  var d:{ a:int, b:int, c:int, d:int }
  var c:int_ptr;
  var d:{ a:int, b:int, c:int, d:int }
  var c:int_ptr;
  var g:int;
  var g:int;
  var g:int;
  var d:{ a:int, b:int, c:int, d:int }
  var g:int;
  var d:{ a:int, b:int, c:int, d:int }
  var k:int_ptr;
  var e:int;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var b:int = g_a - 16;
  g_a = b;
  if (a > 244) goto B_m;
  c = d_c[21]:int;
  a = c >> (e = (d = select_if(16, a + 11 & -8, a < 11)) >> 3);
  if (eqz(a & 3)) goto B_n;
  d = ((a ^ -1) & 1) + e;
  f = d << 3;
  e = (f + 2628)[0]:int;
  a = e + 8;
  g = e[2]:int;
  if (g != (f = f + 2620)) goto B_p;
  d_c[21]:int = c & -2 << d;
  goto B_o;
  label B_p:
  d_c[25]:int > g;
  g[3]:int = f;
  f.c = g;
  label B_o:
  e[1]:int = (g = d << 3) | 3;
  e = e + g;
  e[1]:int = e[1]:int | 1;
  goto B_a;
  label B_n:
  if (d <= (h = d_c[23]:int)) goto B_l;
  if (eqz(a)) goto B_q;
  a = a << e & ((a = 2 << e) | 0 - a);
  a = (a & 0 - a) + -1;
  e = a >> (a = a >> 12 & 16);
  g = e >> 5 & 8;
  g = 
    ((((g | a) | (e = (a = e >> g) >> 2 & 4)) | (e = (a = a >> e) >> 1 & 2)) | 
     (e = (a = a >> e) >> 1 & 1)) + 
    (a >> e);
  f = g << 3;
  e = (f + 2628)[0]:int;
  a = e[2]:int;
  if (a != (f = f + 2620)) goto B_s;
  d_c[21]:int = (c = c & -2 << g);
  goto B_r;
  label B_s:
  d_c[25]:int > a;
  a[3]:int = f;
  f.c = a;
  label B_r:
  a = e + 8;
  e[1]:int = d | 3;
  f = e + d;
  f.b = (g = (i = g << 3) - d) | 1;
  (e + i)[0]:int = g;
  if (eqz(h)) goto B_t;
  i = h >> 3;
  d = (i << 3) + 2620;
  e = d_c[26]:int;
  if (c & (i = 1 << i)) goto B_v;
  d_c[21]:int = c | i;
  i = d;
  goto B_u;
  label B_v:
  i = d.c;
  label B_u:
  d.c = e;
  i[3]:int = e;
  e[3]:int = d;
  e[2]:int = i;
  label B_t:
  d_c[26]:int = f;
  d_c[23]:int = g;
  goto B_a;
  label B_q:
  j = d_c[22]:int;
  if (eqz(j)) goto B_l;
  a = (j & 0 - j) + -1;
  e = a >> (a = a >> 12 & 16);
  g = e >> 5 & 8;
  f = 
    ((((((g | a) | (e = (a = e >> g) >> 2 & 4)) | (e = (a = a >> e) >> 1 & 2)) | 
       (e = (a = a >> e) >> 1 & 1)) + 
      (a >> e) << 
      2) + 
     2884)[0]:int;
  e = (f.b & -8) - d;
  g = f;
  loop L_x {
    a = g[4]:int;
    if (a) goto B_y;
    a = (g + 20)[0]:int;
    if (eqz(a)) goto B_w;
    label B_y:
    g = (a[1]:int & -8) - d;
    e = select_if(g, e, g = g < e);
    f = select_if(a, f, g);
    g = a;
    continue L_x;
  }
  unreachable;
  label B_w:
  k = f + d;
  if (k <= f) goto B_k;
  l = f.g;
  i = f.d;
  if (i == f) goto B_z;
  if (d_c[25]:int > (a = f.c)) goto B_aa;
  a[3]:int != f;
  label B_aa:
  a[3]:int = i;
  i[2]:int = a;
  goto B_b;
  label B_z:
  g = f + 20;
  a = g[0]:int;
  if (a) goto B_ba;
  a = f.e;
  if (eqz(a)) goto B_j;
  g = f + 16;
  label B_ba:
  loop L_ca {
    m = g;
    i = a;
    g = i + 20;
    a = g[0]:int;
    if (a) continue L_ca;
    g = i + 16;
    a = i[4]:int;
    if (a) continue L_ca;
  }
  m[0]:int = 0;
  goto B_b;
  label B_m:
  d = -1;
  if (a > -65) goto B_l;
  a = a + 11;
  d = a & -8;
  h = d_c[22]:int;
  if (eqz(h)) goto B_l;
  m = 31;
  if (d > 16777215) goto B_da;
  a = a >> 8;
  e = a << (a = a + 1048320 >> 16 & 8);
  g = e << (e = e + 520192 >> 16 & 4);
  a = ((g << (g = g + 245760 >> 16 & 2)) >> 15) - ((e | a) | g);
  m = (a << 1 | (d >> a + 21 & 1)) + 28;
  label B_da:
  e = 0 - d;
  g = ((m << 2) + 2884)[0]:int;
  if (g) goto B_ha;
  a = 0;
  i = 0;
  goto B_ga;
  label B_ha:
  a = 0;
  f = d << select_if(0, 25 - (m >> 1), m == 31);
  i = 0;
  loop L_ia {
    c = (g[1]:int & -8) - d;
    if (c >= e) goto B_ja;
    e = c;
    i = g;
    if (c) goto B_ja;
    e = 0;
    i = g;
    a = g;
    goto B_fa;
    label B_ja:
    a = select_if(select_if(a,
                            c = (g + 20)[0]:int,
                            c == (g = (g + (f >> 29 & 4) + 16)[0]:int)),
                  a,
                  c);
    f = f << 1;
    if (g) continue L_ia;
  }
  label B_ga:
  if (a | i) goto B_ka;
  a = 2 << m;
  a = (a | 0 - a) & h;
  if (eqz(a)) goto B_l;
  a = (a & 0 - a) + -1;
  g = a >> (a = a >> 12 & 16);
  f = g >> 5 & 8;
  a = 
    ((((((f | a) | (g = (a = g >> f) >> 2 & 4)) | (g = (a = a >> g) >> 1 & 2)) | 
       (g = (a = a >> g) >> 1 & 1)) + 
      (a >> g) << 
      2) + 
     2884)[0]:int;
  label B_ka:
  if (eqz(a)) goto B_ea;
  label B_fa:
  loop L_la {
    c = (a[1]:int & -8) - d;
    f = c < e;
    g = a[4]:int;
    if (g) goto B_ma;
    g = (a + 20)[0]:int;
    label B_ma:
    e = select_if(c, e, f);
    i = select_if(a, i, f);
    a = g;
    if (g) continue L_la;
  }
  label B_ea:
  if (eqz(i)) goto B_l;
  if (e >= d_c[23]:int - d) goto B_l;
  m = i + d;
  if (m <= i) goto B_k;
  j = i[6]:int;
  f = i[3]:int;
  if (f == i) goto B_na;
  if (d_c[25]:int > (a = i[2]:int)) goto B_oa;
  a[3]:int != i;
  label B_oa:
  a[3]:int = f;
  f.c = a;
  goto B_c;
  label B_na:
  g = i + 20;
  a = g[0]:int;
  if (a) goto B_pa;
  a = i[4]:int;
  if (eqz(a)) goto B_i;
  g = i + 16;
  label B_pa:
  loop L_qa {
    c = g;
    f = a;
    g = f + 20;
    a = g[0]:int;
    if (a) continue L_qa;
    g = f + 16;
    a = f.e;
    if (a) continue L_qa;
  }
  c[0] = 0;
  goto B_c;
  label B_l:
  a = d_c[23]:int;
  if (a < d) goto B_ra;
  e = d_c[26]:int;
  g = a - d;
  if (g < 16) goto B_ta;
  d_c[23]:int = g;
  d_c[26]:int = (f = e + d);
  f.b = g | 1;
  (e + a)[0]:int = g;
  e[1]:int = d | 3;
  goto B_sa;
  label B_ta:
  d_c[26]:int = 0;
  d_c[23]:int = 0;
  e[1]:int = a | 3;
  a = e + a;
  a[1]:int = a[1]:int | 1;
  label B_sa:
  a = e + 8;
  goto B_a;
  label B_ra:
  f = d_c[24]:int;
  if (f <= d) goto B_ua;
  d_c[24]:int = (e = f - d);
  d_c[27]:int = (g = (a = d_c[27]:int) + d);
  g[1]:int = e | 1;
  a[1]:int = d | 3;
  a = a + 8;
  goto B_a;
  label B_ua:
  if (eqz(d_c[139]:int)) goto B_wa;
  e = d_c[141]:int;
  goto B_va;
  label B_wa:
  d_c[142]:long@4 = -1L;
  d_c[140]:long@4 = 17592186048512L;
  d_c[139]:int = (b + 12 & -16) ^ 1431655768;
  d_c[144]:int = 0;
  d_c[132]:int = 0;
  e = 4096;
  label B_va:
  a = 0;
  c = e + (h = d + 47);
  i = c & (m = 0 - e);
  if (i <= d) goto B_a;
  a = 0;
  e = d_c[131]:int;
  if (eqz(e)) goto B_xa;
  g = d_c[129]:int;
  j = g + i;
  if (j <= g) goto B_a;
  if (j > e) goto B_a;
  label B_xa:
  if (d_c[528]:ubyte & 4) goto B_f;
  e = d_c[27]:int;
  if (eqz(e)) goto B_ab;
  a = 3028;
  loop L_bb {
    g = a[0]:int;
    if (g > e) goto B_cb;
    if (g + a[1]:int > e) goto B_za;
    label B_cb:
    a = a[2]:int;
    if (a) continue L_bb;
  }
  label B_ab:
  f = f_hc(0);
  if (f == -1) goto B_g;
  c = i;
  a = d_c[140]:int;
  e = a + -1;
  if (eqz(e & f)) goto B_db;
  c = i - f + (e + f & 0 - a);
  label B_db:
  if (c <= d) goto B_g;
  if (c > 2147483646) goto B_g;
  a = d_c[131]:int;
  if (eqz(a)) goto B_eb;
  e = d_c[129]:int;
  g = e + c;
  if (g <= e) goto B_g;
  if (g > a) goto B_g;
  label B_eb:
  a = f_hc(c);
  if (a != f) goto B_ya;
  goto B_e;
  label B_za:
  c = c - f & m;
  if (c > 2147483646) goto B_g;
  f = f_hc(c);
  if (f == a[0]:int + a[1]:int) goto B_h;
  a = f;
  label B_ya:
  if (d + 48 <= c) goto B_fb;
  if (a == -1) goto B_fb;
  e = h - c + (e = d_c[141]:int) & 0 - e;
  if (e <= 2147483646) goto B_gb;
  f = a;
  goto B_e;
  label B_gb:
  if (f_hc(e) == -1) goto B_hb;
  c = e + c;
  f = a;
  goto B_e;
  label B_hb:
  f_hc(0 - c);
  goto B_g;
  label B_fb:
  f = a;
  if (a != -1) goto B_e;
  goto B_g;
  label B_k:
  unreachable;
  label B_j:
  i = 0;
  goto B_b;
  label B_i:
  f = 0;
  goto B_c;
  label B_h:
  if (f != -1) goto B_e;
  label B_g:
  d_c[132]:int = d_c[132]:int | 4;
  label B_f:
  if (i > 2147483646) goto B_d;
  f = f_hc(i);
  if (f >= (a = f_hc(0))) goto B_d;
  if (f == -1) goto B_d;
  if (a == -1) goto B_d;
  c = a - f;
  if (c <= d + 40) goto B_d;
  label B_e:
  d_c[129]:int = (a = d_c[129]:int + c);
  if (a <= d_c[130]:int) goto B_ib;
  d_c[130]:int = a;
  label B_ib:
  e = d_c[27]:int;
  if (eqz(e)) goto B_mb;
  a = 3028;
  loop L_nb {
    if (f == (g = a[0]:int) + (i = a[1]:int)) goto B_lb;
    a = a[2]:int;
    if (a) continue L_nb;
    goto B_kb;
  }
  unreachable;
  label B_mb:
  a = d_c[25]:int;
  if (eqz(a)) goto B_pb;
  if (f >= a) goto B_ob;
  label B_pb:
  d_c[25]:int = f;
  label B_ob:
  a = 0;
  d_c[134]:int = c;
  d_c[133]:int = f;
  d_c[29]:int = -1;
  d_c[30]:int = d_c[139]:int;
  d_c[136]:int = 0;
  loop L_qb {
    e = a << 3;
    (e + 2628)[0]:int = (g = e + 2620);
    (e + 2632)[0]:int = g;
    a = a + 1;
    if (a != 32) continue L_qb;
  }
  d_c[24]:int = 
    (g = (a = c + -40) - (e = select_if(-8 - f & 7, 0, f + 8 & 7)));
  d_c[27]:int = (e = f + e);
  e[1]:int = g | 1;
  (f + a)[1]:int = 40;
  d_c[28]:int = d_c[143]:int;
  goto B_jb;
  label B_lb:
  if (a[12]:ubyte & 8) goto B_kb;
  if (f <= e) goto B_kb;
  if (g > e) goto B_kb;
  a[1]:int = i + c;
  d_c[27]:int = (g = e + (a = select_if(-8 - e & 7, 0, e + 8 & 7)));
  d_c[24]:int = (a = (f = d_c[24]:int + c) - a);
  g[1]:int = a | 1;
  (e + f)[1]:int = 40;
  d_c[28]:int = d_c[143]:int;
  goto B_jb;
  label B_kb:
  if (f >= (i = d_c[25]:int)) goto B_rb;
  d_c[25]:int = f;
  i = f;
  label B_rb:
  g = f + c;
  a = 3028;
  loop L_zb {
    if (a[0]:int == g) goto B_yb;
    a = a[2]:int;
    if (a) continue L_zb;
    goto B_xb;
  }
  unreachable;
  label B_yb:
  if (eqz(a[12]:ubyte & 8)) goto B_wb;
  label B_xb:
  a = 3028;
  loop L_ac {
    g = a[0]:int;
    if (g > e) goto B_bc;
    g = g + a[1]:int;
    if (g > e) goto B_vb;
    label B_bc:
    a = a[2]:int;
    continue L_ac;
  }
  unreachable;
  label B_wb:
  a[0]:int = f;
  a[1]:int = a[1]:int + c;
  m = f + select_if(-8 - f & 7, 0, f + 8 & 7);
  m[1]:int = d | 3;
  f = g + select_if(-8 - g & 7, 0, g + 8 & 7);
  a = f - m - d;
  g = m + d;
  if (e != f) goto B_cc;
  d_c[27]:int = g;
  d_c[24]:int = (a = d_c[24]:int + a);
  g[1]:int = a | 1;
  goto B_tb;
  label B_cc:
  if (d_c[26]:int != f) goto B_dc;
  d_c[26]:int = g;
  d_c[23]:int = (a = d_c[23]:int + a);
  g[1]:int = a | 1;
  (g + a)[0]:int = a;
  goto B_tb;
  label B_dc:
  e = f.b;
  if ((e & 3) != 1) goto B_ec;
  h = e & -8;
  if (e > 255) goto B_gc;
  d = f.d;
  c = f.c;
  if (c == (e = ((j = e >> 3) << 3) + 2620)) goto B_hc;
  i > c;
  label B_hc:
  if (d != c) goto B_ic;
  d_c[21]:int = d_c[21]:int & -2 << j;
  goto B_fc;
  label B_ic:
  if (d == e) goto B_jc;
  i > d;
  label B_jc:
  c[3] = d;
  d.c = c;
  goto B_fc;
  label B_gc:
  j = f.g;
  c = f.d;
  if (c == f) goto B_lc;
  if (i > (e = f.c)) goto B_mc;
  e[3]:int != f;
  label B_mc:
  e[3]:int = c;
  c[2] = e;
  goto B_kc;
  label B_lc:
  e = f + 20;
  d = e[0]:int;
  if (d) goto B_nc;
  e = f + 16;
  d = e[0]:int;
  if (d) goto B_nc;
  c = 0;
  goto B_kc;
  label B_nc:
  loop L_oc {
    i = e;
    c = d;
    e = c + 20;
    d = e[0]:int;
    if (d) continue L_oc;
    e = c + 16;
    d = c[4];
    if (d) continue L_oc;
  }
  i[0]:int = 0;
  label B_kc:
  if (eqz(j)) goto B_fc;
  d = f.h;
  e = (d << 2) + 2884;
  if (e[0]:int != f) goto B_qc;
  e[0]:int = c;
  if (c) goto B_pc;
  d_c[22]:int = d_c[22]:int & -2 << d;
  goto B_fc;
  label B_qc:
  (j + select_if(16, 20, j[4] == f))[0]:int = c;
  if (eqz(c)) goto B_fc;
  label B_pc:
  c[6] = j;
  e = f.e;
  if (eqz(e)) goto B_rc;
  c[4] = e;
  e[6]:int = c;
  label B_rc:
  e = f.f;
  if (eqz(e)) goto B_fc;
  (c + 20)[0]:int = e;
  e[6]:int = c;
  label B_fc:
  a = h + a;
  f = f + h;
  label B_ec:
  f.b = f.b & -2;
  g[1]:int = a | 1;
  (g + a)[0]:int = a;
  if (a > 255) goto B_sc;
  e = a >> 3;
  a = (e << 3) + 2620;
  d = d_c[21]:int;
  if (d & (e = 1 << e)) goto B_uc;
  d_c[21]:int = d | e;
  e = a;
  goto B_tc;
  label B_uc:
  e = a[2]:int;
  label B_tc:
  a[2]:int = g;
  e[3]:int = g;
  g[3]:int = a;
  g[2]:int = e;
  goto B_tb;
  label B_sc:
  e = 31;
  if (a > 16777215) goto B_vc;
  e = a >> 8;
  d = e << (e = e + 1048320 >> 16 & 8);
  f = d << (d = d + 520192 >> 16 & 4);
  e = ((f << (f = f + 245760 >> 16 & 2)) >> 15) - ((d | e) | f);
  e = (e << 1 | (a >> e + 21 & 1)) + 28;
  label B_vc:
  g[7]:int = e;
  g[4]:long@4 = 0L;
  d = (e << 2) + 2884;
  f = d_c[22]:int;
  if (f & (i = 1 << e)) goto B_xc;
  d_c[22]:int = f | i;
  d.a = g;
  g[6]:int = d;
  goto B_wc;
  label B_xc:
  e = a << select_if(0, 25 - (e >> 1), e == 31);
  f = d.a;
  loop L_yc {
    d = f;
    if ((d.b & -8) == a) goto B_ub;
    f = e >> 29;
    e = e << 1;
    i = d + (f & 4) + 16;
    f = i[0]:int;
    if (f) continue L_yc;
  }
  i[0]:int = g;
  g[6]:int = d;
  label B_wc:
  g[3]:int = g;
  g[2]:int = g;
  goto B_tb;
  label B_vb:
  d_c[24]:int = 
    (m = (a = c + -40) - (i = select_if(-8 - f & 7, 0, f + 8 & 7)));
  d_c[27]:int = (i = f + i);
  i[1]:int = m | 1;
  (f + a)[1]:int = 40;
  d_c[28]:int = d_c[143]:int;
  i = select_if(e,
                a = g + select_if(39 - g & 7, 0, g + -39 & 7) + -47,
                a < e + 16);
  i[1]:int = 27;
  (i + 16)[0]:long@4 = d_c[135]:long@4;
  i[2]:long@4 = d_c[133]:long@4;
  d_c[135]:int = i + 8;
  d_c[134]:int = c;
  d_c[133]:int = f;
  d_c[136]:int = 0;
  a = i + 24;
  loop L_zc {
    a[1]:int = 7;
    f = a + 8;
    a = a + 4;
    if (g > f) continue L_zc;
  }
  if (i == e) goto B_jb;
  i[1]:int = i[1]:int & -2;
  e[1]:int = (c = i - e) | 1;
  i[0]:int = c;
  if (c > 255) goto B_ad;
  g = c >> 3;
  a = (g << 3) + 2620;
  f = d_c[21]:int;
  if (f & (g = 1 << g)) goto B_cd;
  d_c[21]:int = f | g;
  g = a;
  goto B_bd;
  label B_cd:
  g = a[2]:int;
  label B_bd:
  a[2]:int = e;
  g[3]:int = e;
  e[3]:int = a;
  e[2]:int = g;
  goto B_jb;
  label B_ad:
  a = 31;
  if (c > 16777215) goto B_dd;
  a = c >> 8;
  g = a << (a = a + 1048320 >> 16 & 8);
  f = g << (g = g + 520192 >> 16 & 4);
  a = ((f << (f = f + 245760 >> 16 & 2)) >> 15) - ((g | a) | f);
  a = (a << 1 | (c >> a + 21 & 1)) + 28;
  label B_dd:
  e[4]:long@4 = 0L;
  (e + 28)[0]:int = a;
  g = (a << 2) + 2884;
  f = d_c[22]:int;
  if (f & (i = 1 << a)) goto B_fd;
  d_c[22]:int = f | i;
  g[0]:int = e;
  (e + 24)[0]:int = g;
  goto B_ed;
  label B_fd:
  a = c << select_if(0, 25 - (a >> 1), a == 31);
  f = g[0]:int;
  loop L_gd {
    g = f;
    if ((g[1]:int & -8) == c) goto B_sb;
    f = a >> 29;
    a = a << 1;
    i = g + (f & 4) + 16;
    f = i[0]:int;
    if (f) continue L_gd;
  }
  i[0]:int = e;
  (e + 24)[0]:int = g;
  label B_ed:
  e[3]:int = e;
  e[2]:int = e;
  goto B_jb;
  label B_ub:
  a = d.c;
  a[3]:int = g;
  d.c = g;
  g[6]:int = 0;
  g[3]:int = d;
  g[2]:int = a;
  label B_tb:
  a = m + 8;
  goto B_a;
  label B_sb:
  a = g[2]:int;
  a[3]:int = e;
  g[2]:int = e;
  (e + 24)[0]:int = 0;
  e[3]:int = g;
  e[2]:int = a;
  label B_jb:
  a = d_c[24]:int;
  if (a <= d) goto B_d;
  d_c[24]:int = (e = a - d);
  d_c[27]:int = (g = (a = d_c[27]:int) + d);
  g[1]:int = e | 1;
  a[1]:int = d | 3;
  a = a + 8;
  goto B_a;
  label B_d:
  errno_location()[0]:int = 48;
  a = 0;
  goto B_a;
  label B_c:
  if (eqz(j)) goto B_hd;
  if (i != (a = ((g = i[7]:int) << 2) + 2884)[0]:int) goto B_jd;
  a[0]:int = f;
  if (f) goto B_id;
  d_c[22]:int = (h = h & -2 << g);
  goto B_hd;
  label B_jd:
  (j + select_if(16, 20, j[4] == i))[0]:int = f;
  if (eqz(f)) goto B_hd;
  label B_id:
  f.g = j;
  a = i[4]:int;
  if (eqz(a)) goto B_kd;
  f.e = a;
  a[6]:int = f;
  label B_kd:
  a = (i + 20)[0]:int;
  if (eqz(a)) goto B_hd;
  (f + 20)[0]:int = a;
  a[6]:int = f;
  label B_hd:
  if (e > 15) goto B_md;
  i[1]:int = (a = e + d) | 3;
  a = i + a;
  a[1]:int = a[1]:int | 1;
  goto B_ld;
  label B_md:
  i[1]:int = d | 3;
  m[1]:int = e | 1;
  (m + e)[0]:int = e;
  if (e > 255) goto B_nd;
  e = e >> 3;
  a = (e << 3) + 2620;
  g = d_c[21]:int;
  if (g & (e = 1 << e)) goto B_pd;
  d_c[21]:int = g | e;
  e = a;
  goto B_od;
  label B_pd:
  e = a[2]:int;
  label B_od:
  a[2]:int = m;
  e[3]:int = m;
  m[3]:int = a;
  m[2]:int = e;
  goto B_ld;
  label B_nd:
  a = 31;
  if (e > 16777215) goto B_qd;
  a = e >> 8;
  g = a << (a = a + 1048320 >> 16 & 8);
  d = g << (g = g + 520192 >> 16 & 4);
  a = ((d << (d = d + 245760 >> 16 & 2)) >> 15) - ((g | a) | d);
  a = (a << 1 | (e >> a + 21 & 1)) + 28;
  label B_qd:
  m[7]:int = a;
  m[4]:long@4 = 0L;
  g = (a << 2) + 2884;
  if (h & (d = 1 << a)) goto B_td;
  d_c[22]:int = h | d;
  g[0]:int = m;
  m[6]:int = g;
  goto B_sd;
  label B_td:
  a = e << select_if(0, 25 - (a >> 1), a == 31);
  d = g[0]:int;
  loop L_ud {
    g = d;
    if ((g[1]:int & -8) == e) goto B_rd;
    d = a >> 29;
    a = a << 1;
    f = g + (d & 4) + 16;
    d = f.a;
    if (d) continue L_ud;
  }
  f.a = m;
  m[6]:int = g;
  label B_sd:
  m[3]:int = m;
  m[2]:int = m;
  goto B_ld;
  label B_rd:
  a = g[2]:int;
  a[3]:int = m;
  g[2]:int = m;
  m[6]:int = 0;
  m[3]:int = g;
  m[2]:int = a;
  label B_ld:
  a = i + 8;
  goto B_a;
  label B_b:
  if (eqz(l)) goto B_vd;
  if (f != (a = ((g = f.h) << 2) + 2884)[0]:int) goto B_xd;
  a[0]:int = i;
  if (i) goto B_wd;
  d_c[22]:int = j & -2 << g;
  goto B_vd;
  label B_xd:
  (l + select_if(16, 20, l[4] == f))[0]:int = i;
  if (eqz(i)) goto B_vd;
  label B_wd:
  i[6]:int = l;
  a = f.e;
  if (eqz(a)) goto B_yd;
  i[4]:int = a;
  a[6]:int = i;
  label B_yd:
  a = (f + 20)[0]:int;
  if (eqz(a)) goto B_vd;
  (i + 20)[0]:int = a;
  a[6]:int = i;
  label B_vd:
  if (e > 15) goto B_ae;
  f.b = (a = e + d) | 3;
  a = f + a;
  a[1]:int = a[1]:int | 1;
  goto B_zd;
  label B_ae:
  f.b = d | 3;
  k[1] = e | 1;
  (k + e)[0]:int = e;
  if (eqz(h)) goto B_be;
  d = h >> 3;
  g = (d << 3) + 2620;
  a = d_c[26]:int;
  d = 1 << d;
  if (d & c) goto B_de;
  d_c[21]:int = d | c;
  d = g;
  goto B_ce;
  label B_de:
  d = g[2]:int;
  label B_ce:
  g[2]:int = a;
  d.d = a;
  a[3]:int = g;
  a[2]:int = d;
  label B_be:
  d_c[26]:int = k;
  d_c[23]:int = e;
  label B_zd:
  a = f + 8;
  label B_a:
  g_a = b + 16;
  return a;
}

export function free(a:int_ptr) {
  var c:int_ptr;
  var e:{ a:int, b:int, c:int }
  var h:int_ptr;
  var g:int_ptr;
  var h:int_ptr;
  var g:int_ptr;
  var g:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var g:int_ptr;
  var h:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var h:int_ptr;
  var h:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var h:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var e:{ a:int, b:int, c:int }
  var f:int_ptr;
  var e:{ a:int, b:int, c:int }
  var e:{ a:int, b:int, c:int }
  var f:int_ptr;
  var e:{ a:int, b:int, c:int }
  var e:{ a:int, b:int, c:int }
  var f:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var e:{ a:int, b:int, c:int }
  var e:{ a:int, b:int, c:int }
  var e:{ a:int, b:int, c:int }
  var f:int_ptr;
  var e:{ a:int, b:int, c:int }
  var f:int_ptr;
  var f:int_ptr;
  var e:{ a:int, b:int, c:int }
  var g:int_ptr;
  var h:int_ptr;
  var e:{ a:int, b:int, c:int }
  var f:int_ptr;
  var f:int_ptr;
  var e:{ a:int, b:int, c:int }
  var h:int_ptr;
  var h:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var h:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var e:{ a:int, b:int, c:int }
  var e:{ a:int, b:int, c:int }
  var e:{ a:int, b:int, c:int }
  var e:{ a:int, b:int, c:int }
  var f:int_ptr;
  var f:int_ptr;
  var e:{ a:int, b:int, c:int }
  var f:int_ptr;
  var f:int_ptr;
  var f:int_ptr;
  var e:{ a:int, b:int, c:int }
  var e:{ a:int, b:int, c:int }
  var e:{ a:int, b:int, c:int }
  var f:int_ptr;
  var e:{ a:int, b:int, c:int }
  var e:{ a:int, b:int, c:int }
  var f:int_ptr;
  var f:int_ptr;
  var e:{ a:int, b:int, c:int }
  var e:{ a:int, b:int, c:int }
  var e:{ a:int, b:int, c:int }
  var e:{ a:int, b:int, c:int }
  if (eqz(a)) goto B_a;
  var b:int = a + -8;
  var d:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int } = 
    b + (a = (c = (a + -4)[0]:int) & -8);
  if (c & 1) goto B_b;
  if (eqz(c & 3)) goto B_a;
  b = b - (c = b[0]:int);
  if (b < (e = d_c[25]:int)) goto B_a;
  a = c + a;
  if (d_c[26]:int == b) goto B_c;
  if (c > 255) goto B_d;
  f = b[3]:int;
  g = b[2]:int;
  if (g == (c = ((h = c >> 3) << 3) + 2620)) goto B_e;
  e > g;
  label B_e:
  if (f != g) goto B_f;
  d_c[21]:int = d_c[21]:int & -2 << h;
  goto B_b;
  label B_f:
  if (f == c) goto B_g;
  e > f;
  label B_g:
  g[3] = f;
  f[2] = g;
  goto B_b;
  label B_d:
  h = b[6]:int;
  f = b[3]:int;
  if (f == b) goto B_i;
  if (e > (c = b[2]:int)) goto B_j;
  c[3] != b;
  label B_j:
  c[3] = f;
  f[2] = c;
  goto B_h;
  label B_i:
  c = b + 20;
  e = c[0];
  if (e) goto B_k;
  c = b + 16;
  e = c[0];
  if (e) goto B_k;
  f = 0;
  goto B_h;
  label B_k:
  loop L_l {
    g = c;
    f = e;
    c = f + 20;
    e = c[0];
    if (e) continue L_l;
    c = f + 16;
    e = f[4];
    if (e) continue L_l;
  }
  g[0] = 0;
  label B_h:
  if (eqz(h)) goto B_b;
  e = b[7]:int;
  c = (e << 2) + 2884;
  if (c[0] != b) goto B_n;
  c[0] = f;
  if (f) goto B_m;
  d_c[22]:int = d_c[22]:int & -2 << e;
  goto B_b;
  label B_n:
  (h + select_if(16, 20, h[4] == b))[0]:int = f;
  if (eqz(f)) goto B_b;
  label B_m:
  f[6] = h;
  c = b[4]:int;
  if (eqz(c)) goto B_o;
  f[4] = c;
  c[6] = f;
  label B_o:
  c = b[5]:int;
  if (eqz(c)) goto B_b;
  (f + 20)[0]:int = c;
  c[6] = f;
  goto B_b;
  label B_c:
  c = d.b;
  if ((c & 3) != 3) goto B_b;
  d_c[23]:int = a;
  d.b = c & -2;
  b[1]:int = a | 1;
  (b + a)[0]:int = a;
  return ;
  label B_b:
  if (d <= b) goto B_a;
  c = d.b;
  if (eqz(c & 1)) goto B_a;
  if (c & 2) goto B_q;
  if (d_c[27]:int != d) goto B_r;
  d_c[27]:int = b;
  d_c[24]:int = (a = d_c[24]:int + a);
  b[1]:int = a | 1;
  if (b != d_c[26]:int) goto B_a;
  d_c[23]:int = 0;
  d_c[26]:int = 0;
  return ;
  label B_r:
  if (d_c[26]:int != d) goto B_s;
  d_c[26]:int = b;
  d_c[23]:int = (a = d_c[23]:int + a);
  b[1]:int = a | 1;
  (b + a)[0]:int = a;
  return ;
  label B_s:
  a = (c & -8) + a;
  if (c > 255) goto B_u;
  e = d.d;
  f = d.c;
  if (f == (c = ((d = c >> 3) << 3) + 2620)) goto B_v;
  d_c[25]:int > f;
  label B_v:
  if (e != f) goto B_w;
  d_c[21]:int = d_c[21]:int & -2 << d;
  goto B_t;
  label B_w:
  if (e == c) goto B_x;
  d_c[25]:int > e;
  label B_x:
  f[3] = e;
  e.c = f;
  goto B_t;
  label B_u:
  h = d.g;
  f = d.d;
  if (f == d) goto B_z;
  if (d_c[25]:int > (c = d.c)) goto B_aa;
  c[3] != d;
  label B_aa:
  c[3] = f;
  f[2] = c;
  goto B_y;
  label B_z:
  c = d + 20;
  e = c[0];
  if (e) goto B_ba;
  c = d + 16;
  e = c[0];
  if (e) goto B_ba;
  f = 0;
  goto B_y;
  label B_ba:
  loop L_ca {
    g = c;
    f = e;
    c = f + 20;
    e = c[0];
    if (e) continue L_ca;
    c = f + 16;
    e = f[4];
    if (e) continue L_ca;
  }
  g[0] = 0;
  label B_y:
  if (eqz(h)) goto B_t;
  e = d.h;
  c = (e << 2) + 2884;
  if (c[0] != d) goto B_ea;
  c[0] = f;
  if (f) goto B_da;
  d_c[22]:int = d_c[22]:int & -2 << e;
  goto B_t;
  label B_ea:
  (h + select_if(16, 20, h[4] == d))[0]:int = f;
  if (eqz(f)) goto B_t;
  label B_da:
  f[6] = h;
  c = d.e;
  if (eqz(c)) goto B_fa;
  f[4] = c;
  c[6] = f;
  label B_fa:
  c = d.f;
  if (eqz(c)) goto B_t;
  (f + 20)[0]:int = c;
  c[6] = f;
  label B_t:
  b[1]:int = a | 1;
  (b + a)[0]:int = a;
  if (b != d_c[26]:int) goto B_p;
  d_c[23]:int = a;
  return ;
  label B_q:
  d.b = c & -2;
  b[1]:int = a | 1;
  (b + a)[0]:int = a;
  label B_p:
  if (a > 255) goto B_ga;
  c = a >> 3;
  a = (c << 3) + 2620;
  e = d_c[21]:int;
  if (e & (c = 1 << c)) goto B_ia;
  d_c[21]:int = e | c;
  c = a;
  goto B_ha;
  label B_ia:
  c = a[2];
  label B_ha:
  a[2] = b;
  c[3] = b;
  b[3]:int = a;
  b[2]:int = c;
  return ;
  label B_ga:
  c = 31;
  if (a > 16777215) goto B_ja;
  c = a >> 8;
  e = c << (c = c + 1048320 >> 16 & 8);
  f = e << (e = e + 520192 >> 16 & 4);
  c = ((f << (f = f + 245760 >> 16 & 2)) >> 15) - ((e | c) | f);
  c = (c << 1 | (a >> c + 21 & 1)) + 28;
  label B_ja:
  b[4]:long@4 = 0L;
  (b + 28)[0]:int = c;
  e = (c << 2) + 2884;
  f = d_c[22]:int;
  if (f & (d = 1 << c)) goto B_na;
  d_c[22]:int = f | d;
  e.a = b;
  (b + 24)[0]:int = e;
  goto B_ma;
  label B_na:
  c = a << select_if(0, 25 - (c >> 1), c == 31);
  f = e.a;
  loop L_oa {
    e = f;
    if ((e.b & -8) == a) goto B_la;
    f = c >> 29;
    c = c << 1;
    d = e + (f & 4) + 16;
    f = d.a;
    if (f) continue L_oa;
  }
  d.a = b;
  (b + 24)[0]:int = e;
  label B_ma:
  b[3]:int = b;
  b[2]:int = b;
  goto B_ka;
  label B_la:
  a = e.c;
  a[3] = b;
  e.c = b;
  (b + 24)[0]:int = 0;
  b[3]:int = e;
  b[2]:int = a;
  label B_ka:
  d_c[29]:int = (b = d_c[29]:int + -1);
  if (b) goto B_a;
  b = 3036;
  loop L_pa {
    a = b[0]:int;
    b = a + 8;
    if (a) continue L_pa;
  }
  d_c[29]:int = -1;
  label B_a:
}

export function memalign(a:int, b:int):int {
  if (a > 8) goto B_a;
  return malloc(b);
  label B_a:
  return f_fc(a, b);
}

function f_fc(a:{ a:int, b:int }, b:int):int {
  var d:{ a:int, b:int }
  var d:{ a:int, b:int }
  var d:{ a:int, b:int }
  var d:{ a:int, b:int }
  var d:{ a:int, b:int }
  var d:{ a:int, b:int }
  var d:{ a:int, b:int }
  var d:{ a:int, b:int }
  var d:{ a:int, b:int }
  var d:{ a:int, b:int }
  var d:{ a:int, b:int }
  var d:{ a:int, b:int }
  var c:int_ptr = 16;
  d = select_if(a, 16, a > 16);
  if (d & d + -1) goto B_b;
  a = d;
  goto B_a;
  label B_b:
  loop L_c {
    a = c;
    c = a << 1;
    if (a < d) continue L_c;
  }
  label B_a:
  if (-64 - a > b) goto B_d;
  errno_location()[0]:int = 48;
  return 0;
  label B_d:
  b = select_if(16, b + 11 & -8, b < 11);
  c = malloc(b + a + 12);
  if (c) goto B_e;
  return 0;
  label B_e:
  d = c + -8;
  if (a + -1 & c) goto B_g;
  a = d;
  goto B_f;
  label B_g:
  var e:int_ptr = c + -4;
  var f:int = e[0];
  var g:int_ptr = 
    (f & -8) - 
    (c = 
       (a = select_if(c = (c + a + -1 & 0 - a) + -8, c + a, c - d > 15)) - d);
  if (f & 3) goto B_h;
  d = d.a;
  a.b = g;
  a.a = d + c;
  goto B_f;
  label B_h:
  a.b = (g | (a.b & 1)) | 2;
  g = a + g;
  g[1] = g[1] | 1;
  e[0] = (c | (e[0] & 1)) | 2;
  a.b = a.b | 1;
  f_gc(d, c);
  label B_f:
  c = a.b;
  if (eqz(c & 3)) goto B_i;
  d = c & -8;
  if (d <= b + 16) goto B_i;
  a.b = (b | (c & 1)) | 2;
  c = a + b;
  c[1] = (b = d - b) | 3;
  d = a + d;
  d.b = d.b | 1;
  f_gc(c, b);
  label B_i:
  return a + 8;
}

function f_gc(a:int, b:int_ptr) {
  var h:int_ptr;
  var g:int_ptr;
  var h:int_ptr;
  var g:int_ptr;
  var g:int_ptr;
  var g:int_ptr;
  var g:int_ptr;
  var g:int_ptr;
  var f:{ a:int, b:int, c:int }
  var f:{ a:int, b:int, c:int }
  var f:{ a:int, b:int, c:int }
  var g:int_ptr;
  var f:{ a:int, b:int, c:int }
  var g:int_ptr;
  var g:int_ptr;
  var f:{ a:int, b:int, c:int }
  var h:int_ptr;
  var f:{ a:int, b:int, c:int }
  var g:int_ptr;
  var g:int_ptr;
  var f:{ a:int, b:int, c:int }
  var h:int_ptr;
  var h:int_ptr;
  var g:int_ptr;
  var g:int_ptr;
  var g:int_ptr;
  var h:int_ptr;
  var g:int_ptr;
  var g:int_ptr;
  var g:int_ptr;
  var g:int_ptr;
  var d:int_ptr;
  var d:int_ptr;
  var d:int_ptr;
  var g:int_ptr;
  var d:int_ptr;
  var e:int_ptr;
  var g:int_ptr;
  var f:{ a:int, b:int, c:int }
  var g:int_ptr;
  var f:{ a:int, b:int, c:int }
  var d:int_ptr;
  var e:int_ptr;
  var f:{ a:int, b:int, c:int }
  var g:int_ptr;
  var f:{ a:int, b:int, c:int }
  var f:{ a:int, b:int, c:int }
  var g:int_ptr;
  var g:int_ptr;
  var e:int_ptr;
  var d:int_ptr;
  var d:int_ptr;
  var g:int_ptr;
  var g:int_ptr;
  var d:int_ptr;
  var d:int_ptr;
  var f:{ a:int, b:int, c:int }
  var d:int_ptr;
  var f:{ a:int, b:int, c:int }
  var d:int_ptr;
  var f:{ a:int, b:int, c:int }
  var g:int_ptr;
  var d:int_ptr;
  var f:{ a:int, b:int, c:int }
  var g:int_ptr;
  var g:int_ptr;
  var f:{ a:int, b:int, c:int }
  var e:int_ptr;
  var h:int_ptr;
  var f:{ a:int, b:int, c:int }
  var d:int_ptr;
  var d:int_ptr;
  var g:int_ptr;
  var g:int_ptr;
  var f:{ a:int, b:int, c:int }
  var h:int_ptr;
  var h:int_ptr;
  var g:int_ptr;
  var g:int_ptr;
  var g:int_ptr;
  var h:int_ptr;
  var d:int_ptr;
  var g:int_ptr;
  var d:int_ptr;
  var d:int_ptr;
  var g:int_ptr;
  var d:int_ptr;
  var g:int_ptr;
  var d:int_ptr;
  var d:int_ptr;
  var g:int_ptr;
  var d:int_ptr;
  var d:int_ptr;
  var f:{ a:int, b:int, c:int }
  var d:int_ptr;
  var f:{ a:int, b:int, c:int }
  var d:int_ptr;
  var d:int_ptr;
  var d:int_ptr;
  var d:int_ptr;
  var d:int_ptr;
  var f:{ a:int, b:int, c:int }
  var f:{ a:int, b:int, c:int }
  var g:int_ptr;
  var g:int_ptr;
  var f:{ a:int, b:int, c:int }
  var d:int_ptr;
  var g:int_ptr;
  var d:int_ptr;
  var d:int_ptr;
  var d:int_ptr;
  var d:int_ptr;
  var g:int_ptr;
  var d:int_ptr;
  var g:int_ptr;
  var f:{ a:int, b:int, c:int }
  var f:{ a:int, b:int, c:int }
  var d:int_ptr;
  var d:int_ptr;
  var f:{ a:int, b:int, c:int }
  var g:int_ptr;
  var f:{ a:int, b:int, c:int }
  var d:int_ptr;
  var d:int_ptr;
  var f:{ a:int, b:int, c:int }
  var g:int_ptr;
  var g:int_ptr;
  var f:{ a:int, b:int, c:int }
  var f:{ a:int, b:int, c:int }
  var f:{ a:int, b:int, c:int }
  var f:{ a:int, b:int, c:int }
  var c:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int } = 
    a + b;
  d = a[1]:int;
  if (d & 1) goto B_b;
  if (eqz(d & 3)) goto B_a;
  d = a[0]:int;
  b = d + b;
  if (d_c[26]:int == (a = a - d)) goto B_c;
  e = d_c[25]:int;
  if (d > 255) goto B_d;
  f = a[3]:int;
  g = a[2]:int;
  if (g == (d = ((h = d >> 3) << 3) + 2620)) goto B_e;
  e > g;
  label B_e:
  if (f != g) goto B_f;
  d_c[21]:int = d_c[21]:int & -2 << h;
  goto B_b;
  label B_f:
  if (f == d) goto B_g;
  e > f;
  label B_g:
  g[3] = f;
  f.c = g;
  goto B_b;
  label B_d:
  h = a[6]:int;
  g = a[3]:int;
  if (g == a) goto B_i;
  if (e > (d = a[2]:int)) goto B_j;
  d[3] != a;
  label B_j:
  d[3] = g;
  g[2] = d;
  goto B_h;
  label B_i:
  d = a + 20;
  f = d[0];
  if (f) goto B_k;
  d = a + 16;
  f = d[0];
  if (f) goto B_k;
  g = 0;
  goto B_h;
  label B_k:
  loop L_l {
    e = d;
    g = f;
    d = g + 20;
    f = d[0];
    if (f) continue L_l;
    d = g + 16;
    f = g[4];
    if (f) continue L_l;
  }
  e[0] = 0;
  label B_h:
  if (eqz(h)) goto B_b;
  f = a[7]:int;
  d = (f << 2) + 2884;
  if (d[0] != a) goto B_n;
  d[0] = g;
  if (g) goto B_m;
  d_c[22]:int = d_c[22]:int & -2 << f;
  goto B_b;
  label B_n:
  (h + select_if(16, 20, h[4] == a))[0]:int = g;
  if (eqz(g)) goto B_b;
  label B_m:
  g[6] = h;
  d = a[4]:int;
  if (eqz(d)) goto B_o;
  g[4] = d;
  d[6] = g;
  label B_o:
  d = a[5]:int;
  if (eqz(d)) goto B_b;
  (g + 20)[0]:int = d;
  d[6] = g;
  goto B_b;
  label B_c:
  d = c.b;
  if ((d & 3) != 3) goto B_b;
  d_c[23]:int = b;
  c.b = d & -2;
  a[1]:int = b | 1;
  c.a = b;
  return ;
  label B_b:
  d = c.b;
  if (d & 2) goto B_q;
  if (d_c[27]:int != c) goto B_r;
  d_c[27]:int = a;
  d_c[24]:int = (b = d_c[24]:int + b);
  a[1]:int = b | 1;
  if (a != d_c[26]:int) goto B_a;
  d_c[23]:int = 0;
  d_c[26]:int = 0;
  return ;
  label B_r:
  if (d_c[26]:int != c) goto B_s;
  d_c[26]:int = a;
  d_c[23]:int = (b = d_c[23]:int + b);
  a[1]:int = b | 1;
  (a + b)[0]:int = b;
  return ;
  label B_s:
  e = d_c[25]:int;
  b = (d & -8) + b;
  if (d > 255) goto B_u;
  f = c.d;
  g = c.c;
  if (g == (d = ((c = d >> 3) << 3) + 2620)) goto B_v;
  e > g;
  label B_v:
  if (f != g) goto B_w;
  d_c[21]:int = d_c[21]:int & -2 << c;
  goto B_t;
  label B_w:
  if (f == d) goto B_x;
  e > f;
  label B_x:
  g[3] = f;
  f.c = g;
  goto B_t;
  label B_u:
  h = c.g;
  g = c.d;
  if (g == c) goto B_z;
  if (e > (d = c.c)) goto B_aa;
  d[3] != c;
  label B_aa:
  d[3] = g;
  g[2] = d;
  goto B_y;
  label B_z:
  d = c + 20;
  f = d[0];
  if (f) goto B_ba;
  d = c + 16;
  f = d[0];
  if (f) goto B_ba;
  g = 0;
  goto B_y;
  label B_ba:
  loop L_ca {
    e = d;
    g = f;
    d = g + 20;
    f = d[0];
    if (f) continue L_ca;
    d = g + 16;
    f = g[4];
    if (f) continue L_ca;
  }
  e[0] = 0;
  label B_y:
  if (eqz(h)) goto B_t;
  f = c.h;
  d = (f << 2) + 2884;
  if (d[0] != c) goto B_ea;
  d[0] = g;
  if (g) goto B_da;
  d_c[22]:int = d_c[22]:int & -2 << f;
  goto B_t;
  label B_ea:
  (h + select_if(16, 20, h[4] == c))[0]:int = g;
  if (eqz(g)) goto B_t;
  label B_da:
  g[6] = h;
  d = c.e;
  if (eqz(d)) goto B_fa;
  g[4] = d;
  d[6] = g;
  label B_fa:
  d = c.f;
  if (eqz(d)) goto B_t;
  (g + 20)[0]:int = d;
  d[6] = g;
  label B_t:
  a[1]:int = b | 1;
  (a + b)[0]:int = b;
  if (a != d_c[26]:int) goto B_p;
  d_c[23]:int = b;
  return ;
  label B_q:
  c.b = d & -2;
  a[1]:int = b | 1;
  (a + b)[0]:int = b;
  label B_p:
  if (b > 255) goto B_ga;
  d = b >> 3;
  b = (d << 3) + 2620;
  f = d_c[21]:int;
  if (f & (d = 1 << d)) goto B_ia;
  d_c[21]:int = f | d;
  d = b;
  goto B_ha;
  label B_ia:
  d = b[2];
  label B_ha:
  b[2] = a;
  d[3] = a;
  a[3]:int = b;
  a[2]:int = d;
  return ;
  label B_ga:
  d = 31;
  if (b > 16777215) goto B_ja;
  d = b >> 8;
  f = d << (d = d + 1048320 >> 16 & 8);
  g = f << (f = f + 520192 >> 16 & 4);
  d = ((g << (g = g + 245760 >> 16 & 2)) >> 15) - ((f | d) | g);
  d = (d << 1 | (b >> d + 21 & 1)) + 28;
  label B_ja:
  a[4]:long@4 = 0L;
  (a + 28)[0]:int = d;
  f = (d << 2) + 2884;
  g = d_c[22]:int;
  if (g & (c = 1 << d)) goto B_ma;
  d_c[22]:int = g | c;
  f.a = a;
  (a + 24)[0]:int = f;
  goto B_la;
  label B_ma:
  d = b << select_if(0, 25 - (d >> 1), d == 31);
  g = f.a;
  loop L_na {
    f = g;
    if ((f.b & -8) == b) goto B_ka;
    g = d >> 29;
    d = d << 1;
    c = f + (g & 4) + 16;
    g = c.a;
    if (g) continue L_na;
  }
  c.a = a;
  (a + 24)[0]:int = f;
  label B_la:
  a[3]:int = a;
  a[2]:int = a;
  return ;
  label B_ka:
  b = f.c;
  b[3] = a;
  f.c = a;
  (a + 24)[0]:int = 0;
  a[3]:int = f;
  a[2]:int = b;
  label B_a:
}

function f_hc(a:int):int {
  var c:int;
  var b:int = d_10009zKAV_XItg3P[94]:int;
  a = b + (c = a + 3 & -4);
  if (c < 1) goto B_b;
  if (a <= b) goto B_a;
  label B_b:
  if (a <= memory_size() << 16) goto B_c;
  if (eqz(env_emscripten_resize_heap(a))) goto B_a;
  label B_c:
  d_10009zKAV_XItg3P[94]:int = a;
  return b;
  label B_a:
  errno_location()[0]:int = 48;
  return -1;
}

function f_ic(a:int, b:int, c:int):int {
  var f:int;
  var e:int;
  var e:int;
  var e:int;
  var e:int;
  if (c < 512) goto B_a;
  env_emscripten_memcpy_big(a, b, c);
  return a;
  label B_a:
  var d:int = a + c;
  if ((b ^ a) & 3) goto B_c;
  if (c >= 1) goto B_e;
  c = a;
  goto B_d;
  label B_e:
  if (a & 3) goto B_f;
  c = a;
  goto B_d;
  label B_f:
  c = a;
  loop L_g {
    c[0]:byte = b[0]:ubyte;
    b = b + 1;
    c = c + 1;
    if (c >= d) goto B_d;
    if (c & 3) continue L_g;
  }
  label B_d:
  e = d & -4;
  if (e < 64) goto B_h;
  if (c > (f = e + -64)) goto B_h;
  loop L_i {
    c[0]:int = b[0]:int;
    c[1]:int = b[1]:int;
    c[2]:int = b[2]:int;
    c[3]:int = b[3]:int;
    c[4]:int = b[4]:int;
    c[5]:int = b[5]:int;
    c[6]:int = b[6]:int;
    c[7]:int = b[7]:int;
    c[8]:int = b[8]:int;
    c[9]:int = b[9]:int;
    c[10]:int = b[10]:int;
    c[11]:int = b[11]:int;
    c[12]:int = b[12]:int;
    c[13]:int = b[13]:int;
    c[14]:int = b[14]:int;
    c[15]:int = b[15]:int;
    b = b + 64;
    c = c + 64;
    if (c <= f) continue L_i;
  }
  label B_h:
  if (c >= e) goto B_b;
  loop L_j {
    c[0]:int = b[0]:int;
    b = b + 4;
    c = c + 4;
    if (c < e) continue L_j;
    goto B_b;
  }
  unreachable;
  label B_c:
  if (d >= 4) goto B_k;
  c = a;
  goto B_b;
  label B_k:
  e = d + -4;
  if (e >= a) goto B_l;
  c = a;
  goto B_b;
  label B_l:
  c = a;
  loop L_m {
    c[0]:byte = b[0]:ubyte;
    c[1]:byte = b[1]:ubyte;
    c[2]:byte = b[2]:ubyte;
    c[3]:byte = b[3]:ubyte;
    b = b + 4;
    c = c + 4;
    if (c <= e) continue L_m;
  }
  label B_b:
  if (c >= d) goto B_n;
  loop L_o {
    c[0]:byte = b[0]:ubyte;
    b = b + 1;
    c = c + 1;
    if (c != d) continue L_o;
  }
  label B_n:
  return a;
}

export function memset(a:{ a:byte, b:byte, c:byte, d:byte }, b:{ a:long, b:long, c:long, d:long }, c:int):int {
  var e:int;
  var f:int;
  if (eqz(c)) goto B_a;
  var d:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int } = c + a;
  (d + -1)[0]:byte = b;
  a.a = b;
  if (c < 3) goto B_a;
  (d + -2)[0]:byte = b;
  a.b = b;
  (d + -3)[0]:byte = b;
  a.c = b;
  if (c < 7) goto B_a;
  (d + -4)[0]:byte = b;
  a.d = b;
  if (c < 9) goto B_a;
  d = a + (e = 0 - a & 3);
  d.a = (b = (b & 255) * 16843009);
  c = d + (e = c - e & -4);
  (c + -4)[0]:int = b;
  if (e < 9) goto B_a;
  d.c = b;
  d.b = b;
  (c + -8)[0]:int = b;
  (c + -12)[0]:int = b;
  if (e < 25) goto B_a;
  d.g = b;
  d.f = b;
  d.e = b;
  d.d = b;
  (c + -16)[0]:int = b;
  (c + -20)[0]:int = b;
  (c + -24)[0]:int = b;
  (c + -28)[0]:int = b;
  c = e - (f = (d & 4) | 24);
  if (c < 32) goto B_a;
  var g:long = i64_extend_i32_u(b);
  g = g << 32L | g;
  b = d + f;
  loop L_b {
    b.d = g;
    b.c = g;
    b.b = g;
    b.a = g;
    b = b + 32;
    c = c + -32;
    if (c > 31) continue L_b;
  }
  label B_a:
  return a;
}

function f_kc(a:int):int {
  var b:int;
  a[74]:byte = (b = a[74]:ubyte) + -1 | b;
  b = a[0]:int;
  if (eqz(b & 8)) goto B_a;
  a[0]:int = b | 32;
  return -1;
  label B_a:
  a[1]:long@4 = 0L;
  a[7]:int = (b = a[11]:int);
  a[5]:int = b;
  a[4]:int = b + a[12]:int;
  return 0;
}

function f_lc(a:int, b:int, c:int):int {
  var d:int;
  var f:int;
  var e:int;
  var d:int;
  var d:int;
  var d:int;
  var e:int;
  var d:int;
  var d:int;
  var d:int;
  var f:int;
  var d:int;
  var e:int;
  d = c[4]:int;
  if (d) goto B_b;
  e = 0;
  if (f_kc(c)) goto B_a;
  d = c[4]:int;
  label B_b:
  if (d - (f = c[5]:int) >= b) goto B_c;
  return call_indirect(c, a, b, c[9]:int);
  label B_c:
  if (c[75]:byte >= 0) goto B_e;
  d = 0;
  goto B_d;
  label B_e:
  e = b;
  loop L_f {
    d = e;
    if (d) goto B_g;
    d = 0;
    goto B_d;
    label B_g:
    if ((a + (e = d + -1))[0]:ubyte != 10) continue L_f;
  }
  e = call_indirect(c, a, d, c[9]:int);
  if (e < d) goto B_a;
  a = a + d;
  b = b - d;
  f = c[5]:int;
  label B_d:
  f_ic(f, a, b);
  c[5]:int = c[5]:int + b;
  e = d + b;
  label B_a:
  return e;
}

function f_mc(a:int, b:int_ptr, c:int):int {
  var e:int;
  var i:int;
  var d:int_ptr = g_a - 32;
  g_a = d;
  d[4] = (e = a[7]:int);
  var f:int = a[5]:int;
  d[7] = c;
  d[6] = b;
  d[5] = (b = f - e);
  var g:int = b + c;
  var h:int = 2;
  b = d + 16;
  if (
    f_yb(wasi_snapshot_preview1_fd_write(a[15]:int, d + 16, 2, d + 12))) goto B_d;
  loop L_e {
    if (g == (e = d[3])) goto B_c;
    if (e <= -1) goto B_b;
    var j:int_ptr = b + ((f = e > (i = b[1])) << 3);
    j[0] = j[0] + (i = e - select_if(i, 0, f));
    j = b + select_if(12, 4, f);
    j[0] = j[0] - i;
    g = g - e;
    if (
      eqz(f_yb(wasi_snapshot_preview1_fd_write(a[15]:int,
                                               b = select_if(b + 8, b, f),
                                               h = h - f,
                                               d + 12)))) continue L_e;
  }
  label B_d:
  if (g != -1) goto B_b;
  label B_c:
  a[7]:int = (b = a[11]:int);
  a[5]:int = b;
  a[4]:int = b + a[12]:int;
  e = c;
  goto B_a;
  label B_b:
  e = 0;
  a[7]:int = 0;
  a[2]:long = 0L;
  a[0]:int = a[0]:int | 32;
  if (h == 2) goto B_a;
  e = c - b[1];
  label B_a:
  g_a = d + 32;
  return e;
}

function f_nc(a:int):int {
  return 0
}

function f_oc(a:int, b:long, c:int):long {
  return 0L
}

function f_pc(a:int, b:int):int {
  var c:int_ptr = g_a - 16;
  g_a = c;
  c[3] = b;
  b = f_qb(d_bbbbbbbbbbbbbbbbsaltplk3UQgi[230]:int, a, b);
  g_a = c + 16;
  return b;
}

function f_qc(a:int):int {
  return 1
}

function f_rc(a:int) {
}

function f_sc(a:ubyte_ptr):int {
  var d:int;
  var c:int;
  var c:int;
  var c:int;
  var d:int;
  var b:ubyte_ptr = a;
  if (eqz(a & 3)) goto B_b;
  if (a[0]) goto B_c;
  return a - a;
  label B_c:
  b = a;
  loop L_d {
    b = b + 1;
    if (eqz(b & 3)) goto B_b;
    if (eqz(b[0])) goto B_a;
    continue L_d;
  }
  unreachable;
  label B_b:
  loop L_e {
    c = b;
    b = c + 4;
    d = c[0]:int;
    if (eqz(((d ^ -1) & d + -16843009) & -2139062144)) continue L_e;
  }
  if (d & 255) goto B_f;
  return c - a;
  label B_f:
  loop L_g {
    d = c[1]:ubyte;
    b = c + 1;
    c = b;
    if (d) continue L_g;
  }
  label B_a:
  return b - a;
}

export function stackSave():int {
  return g_a
}

export function stackRestore(a:int) {
  g_a = a
}

export function stackAlloc(a:int):int {
  var b:int = g_a - a & -16;
  g_a = b;
  return b;
}

export function fflush(a:int_ptr):int {
  var c:int;
  var b:int;
  var c:int;
  if (eqz(a)) goto B_b;
  if (a[19] > -1) goto B_c;
  return f_xc(a);
  label B_c:
  b = f_qc(a);
  c = f_xc(a);
  if (eqz(b)) goto B_a;
  f_rc(a);
  return c;
  label B_b:
  c = 0;
  if (eqz(d_10009zKAV_XItg3P[132]:int)) goto B_d;
  c = fflush(d_10009zKAV_XItg3P[132]:int);
  label B_d:
  a = f_ub()[0]:int;
  if (eqz(a)) goto B_e;
  loop L_f {
    b = 0;
    if (a[19] < 0) goto B_g;
    b = f_qc(a);
    label B_g:
    if (a[5] <= a[7]) goto B_h;
    c = f_xc(a) | c;
    label B_h:
    if (eqz(b)) goto B_i;
    f_rc(a);
    label B_i:
    a = a[14];
    if (a) continue L_f;
  }
  label B_e:
  f_vb();
  label B_a:
  return c;
}

function f_xc(a:int):int {
  var c:int;
  if (a[5]:int <= a[7]:int) goto B_a;
  call_indirect(a, 0, 0, a[9]:int);
  if (a[5]:int) goto B_a;
  return -1;
  label B_a:
  var b:int = a[1]:int;
  if (b >= (c = a[2]:int)) goto B_b;
  call_indirect(a, i64_extend_i32_s(b - c), 1, a[10]:int);
  label B_b:
  a[7]:int = 0;
  a[2]:long = 0L;
  a[1]:long@4 = 0L;
  return 0;
}

function f_yc(a:int, b:int, c:long, d:int):long {
  return call_indirect(b, c, d, a)
}

export function dynCall_jiji(a:int, b:int, c:int, d:int, e:int):int {
  var f:long = 
    f_yc(a, b, i64_extend_i32_u(c) | i64_extend_i32_u(d) << 32L, e);
  env_setTempRet0(i32_wrap_i64(f >> 32L));
  return i32_wrap_i64(f);
}

